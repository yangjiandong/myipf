<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0074)http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            <title>IPF reference - single - Open eHealth Integration Platform 2.x - Confluence</title>
    
        
        
        
        
        

                        
        
    
    
            
<meta id="confluence-context-path" name="confluence-context-path" content="/confluence">
<meta id="confluence-space-key" name="confluence-space-key" content="ipf2">

<script type="text/javascript">
    // Deprecated global variables. To be removed in a future version of Confluence.
    var contextPath = '/confluence';
    var i18n = [];
</script>

    

<!-- include system resources -->
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/master.css" title="Confluence Master Stylesheet" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/wiki-content.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tabs.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/menu.css" media="all">
<!--[if IE]>
<link type="text/css" rel="stylesheet" href="/confluence/s/1515/1/1.0/_/download/resources/confluence.web.resources%3Amaster-styles/menu-ie.css" media="all"/>
<![endif]-->
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tables.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/panels.css" media="all">
<!--[if IE]>
<link type="text/css" rel="stylesheet" href="/confluence/s/1515/1/1.0/_/download/resources/confluence.web.resources%3Amaster-styles/master-ie.css" title="Master-IE" media="all"/>
<![endif]-->
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/renderer-macros.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/content-types.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information-macros.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/layout-macros.css" media="all">
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/jquery.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/jquery-compatibility.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/jquery.dimensions.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/atlassian.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/image-effects.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/prototype.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/effects.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/dragdrop.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/controls.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/util.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/engine.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/util(1).js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/AddLabeltoEntity.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/RemoveLabelFromEntity.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/SuggestedLabelsForEntity.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/GenerateAutocompleteLabelsListForEntity.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/uberlabels.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/labels-editor.js"></script>
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/autocomplete.css" media="all">
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/labels.css" media="all">
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/animation.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/comments.js"></script>
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/comments.css" media="all">
<!--[if IE]>
<link type="text/css" rel="stylesheet" href="/confluence/s/1515/1/1.0/_/download/resources/confluence.web.resources%3Acomments/comments-ie.css" media="all"/>
<![endif]-->
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/breadcrumbs.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/master.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/menu.js"></script>
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/PageNotification.js"></script>
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/print.css" media="print">
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/drop-down.js"></script>
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/drop-down.css" media="all">
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/contentnamesearch.js"></script>
<link type="text/css" rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/contentnamesearch.css" media="all">
<script type="text/javascript" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/atlassian-effects.js"></script>

<!-- end system resources -->

    <link rel="stylesheet" href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/combined.css" type="text/css">

    <meta name="confluence-request-time" content="1299348653315">

    <link rel="shortcut icon" href="http://repo.openehealth.org/confluence/favicon.ico">
    <link rel="icon" type="image/png" href="http://repo.openehealth.org/confluence/images/logo/confluence_16.png">

<link rel="search" type="application/opensearchdescription+xml" href="http://repo.openehealth.org/confluence/opensearch/osd.action" title="Confluence">

    
</head><style>body { position:relative; top:0px; margin-top: 33px; }</style>

            <body onload="placeFocus()" id="com-atlassian-confluence" style="position: relative; top: 0px; margin-top: 32px; "><iframe src="chrome-extension://kcahibnffhnnjcedflmchmokndkjnhpg/norefer.html?url=http%3A%2F%2Fwww.stumbleupon.com%2Ftoolbar%2Flitebar.php%3Fdevice%3Dchromebar%26version%3Dchromebar%25202.9.8.1%26ts%3D1299315588" id="__su__tbcont" width="100%" style="border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-width: initial; border-color: initial; position: fixed; top: 0px; left: 0px; margin-bottom: 0px; margin-left: 0px; z-index: 10000000; background-image: url(http://cdn.stumble-upon.com/i/toolbar/bgToolbar.gif); background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(68, 68, 68); width: 100%; height: 32px; background-position: initial initial; background-repeat: initial initial; "></iframe>
    


    <script type="text/javascript">
        AJS.toInit(function ($) {
            $(".message-close-button").each(function () {
                var li = $(this).parent();
                var cookieId = this.alt;
                $(this).click(function () {
                    li.slideUp();
                    setCookie(cookieId, true);
                });
            });

            $("#messageContainer .confluence-messages").each(function () {
                if (!getCookie(this.id)) {
                    $(this).show();
                }
            })
        });
    </script>

        
<div id="header">
        <form id="quick-search" method="get" action="http://repo.openehealth.org/confluence/dosearchsite.action">
                <fieldset>
            <legend>Quick Search</legend>
            <input id="quick-search-query" type="search" accesskey="q" autocomplete="off" name="queryString" size="25" placeholder="search" results="10">
            <input id="quick-search-submit" type="submit" value="Search">
        </fieldset>
        <fieldset class="hidden parameters">
            <input type="hidden" id="quickSearchPlaceholder" value="Search">

            <input type="hidden" id="quickNavEnabled" value="true">
             <!-- Quick nav disabled. SettingsManager could not be found -->         </fieldset>
    </form>
    <ul id="header-menu-bar" class="ajs-menu-bar">
                    
        
            <li class="normal ajs-menu-item">
        <a id="browse-menu-link" class="browse trigger ajs-menu-title" href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#"><span><span>Browse</span></span></a>         <div class="ajs-drop-down hidden" hidden="" style="">
                        <ul id="browse-menu-link-leading" class="section-leading first">
                                        <li>
    
    <a id="space-pages-link" href="http://repo.openehealth.org/confluence/pages/listpages.action?key=ipf2" class="">
                   <span>Pages</span>            </a>
</li>
                                        <li>
    
    <a id="space-blogposts-link" href="http://repo.openehealth.org/confluence/pages/viewrecentblogposts.action?key=ipf2" class="">
                   <span>News</span>            </a>
</li>
                                        <li>
    
    <a id="space-labels-link" href="http://repo.openehealth.org/confluence/labels/listlabels-heatmap.action?key=ipf2" class="">
                   <span>Labels</span>            </a>
</li>
                                        <li>
    
    <a id="space-attachments-link" href="http://repo.openehealth.org/confluence/spaces/listattachmentsforspace.action?key=ipf2" class="">
                   <span>Attachments</span>            </a>
</li>
                                        <li>
    
    <a href="http://repo.openehealth.org/confluence/spaces/space-bookmarks.action?spaceKey=ipf2" class="">
                   <span>Bookmarks</span>            </a>
</li>
                                        <li>
    
    <a id="space-mail-link" href="http://repo.openehealth.org/confluence/spaces/viewmailarchive.action?key=ipf2" class="">
                   <span>Mail</span>            </a>
</li>
                                        <li>
    
    <a id="space-advanced-link" href="http://repo.openehealth.org/confluence/spaces/viewspacesummary.action?key=ipf2" class="">
                   <span>Advanced</span>            </a>
</li>
                                        <li>
    
    <a href="http://repo.openehealth.org/confluence/spaces/usage/report.action?key=ipf2" class="">
                   <span>Activity</span>            </a>
</li>
                            </ul>
                        <ul id="browse-menu-link-global" class="section-global">
                                        <li>
    
    <a id="people-directory-link" href="http://repo.openehealth.org/confluence/peopledirectory.action" class="">
                   <span>People Directory</span>            </a>
</li>
                            </ul>
                    </div>
    </li>
        
                                                         <li class="ajs-menu-item normal">
    
    <a id="login-link" href="http://repo.openehealth.org/confluence/login.action?os_destination=%2Fdisplay%2Fipf2%2FIPF%2Breference%2B-%2Bsingle" class="user-item login-link">
                   <span>Log In</span>            </a>
</li>
                            </ul>
    
    
    <ol id="breadcrumbs">
                    
        <li class="first"><span>
                                    <a href="http://repo.openehealth.org/confluence/dashboard.action">Dashboard</a>
                </span></li>
                    
        <li><span>
                                    <a href="http://repo.openehealth.org/confluence/display/ipf2">Open eHealth Integration Platform 2.x</a>
                </span></li>
                    
        <li><span>
                                    <a href="http://repo.openehealth.org/confluence/display/ipf2/Home">Home</a>
                </span></li>
                    
        <li><span>
                                    IPF reference - single
                </span></li>
        </ol>

</div>
<div id="main">
    
                <ul id="user-control-panel">
                                
            <li class="first"><a href="http://repo.openehealth.org/confluence/login.action?os_destination=%2Fdisplay%2Fipf2%2FIPF%2Breference%2B-%2Bsingle">Log In</a></li>

                                                        </ul>
        
    <div id="navigation" class="content-navigation view">
        <fieldset class="hidden parameters">
            <input type="hidden" id="pageId" value="3211298">
        </fieldset>
        <ul class="ajs-menu-bar">
                                
                        
            <li class="normal ajs-menu-item">
        <a id="action-menu-link" class="action trigger ajs-menu-title" href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#"><span><span>Tools</span></span></a>         <div class="ajs-drop-down hidden" hidden="" style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; right: 0px; ">
                        <ul id="action-menu-link-primary" class="section-primary first">
                                        <li>
    
    <a id="view-attachments-link" href="http://repo.openehealth.org/confluence/pages/viewpageattachments.action?pageId=3211298" class="action-view-attachments" accesskey="a">
                   <span><u>A</u>ttachments (0)</span>            </a>
</li>
                                        <li>
    
    <a id="action-view-history-link" href="http://repo.openehealth.org/confluence/pages/viewpreviousversions.action?pageId=3211298" class="action-view-history">
                   <span>History</span>            </a>
</li>
                            </ul>
                        <ul id="action-menu-link-secondary" class="section-secondary">
                                        <li>
    
    <a id="view-page-info-link" href="http://repo.openehealth.org/confluence/pages/viewinfo.action?pageId=3211298" class="action-view-info" accesskey="i">
                   <span><u>I</u>nfo</span>            </a>
</li>
                                        <li>
    
    <a id="action-view-source-link" href="http://repo.openehealth.org/confluence/pages/viewpagesrc.action?pageId=3211298" class="action-view-source popup-link">
                   <span>View Wiki Markup</span>            </a>
</li>
                            </ul>
                    </div>
    </li>
            </ul>
    </div>

    <h1 id="title-heading" class="pagetitle">
                    <a href="http://repo.openehealth.org/confluence/display/ipf2"><img class="logo space custom" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/ipf2" alt=""></a>        
		<span id="title-text">
					            <a href="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/IPF reference - single - Open eHealth Integration Platform 2.x - Confluence.htm">IPF reference - single</a>
    				</span>
    </h1>

    <!--
    Root decorator: this is a layer of abstraction that Confluence doesn't need. It will be removed eventually.
-->




    
    

    
    
        
    
    
                    
        
    

    


<div id="content" class="page view">
    
        
    
                                
        
    

                    

        
        <div class="page-metadata">
    <ul class="page-metadata-icons">
        </ul>
            Added by <a href="http://repo.openehealth.org/confluence/display/~martin.krasser">Martin Krasser</a>, last edited by <a href="http://repo.openehealth.org/confluence/display/~boris.stanojevic">Boris Stanojevic</a> on Feb 28, 2011
                            <span class="noprint">&nbsp;(<a href="http://repo.openehealth.org/confluence/pages/diffpages.action?pageId=3211298&originalId=4194848">view change</a>)</span>
                </div>        
        <div class="wiki-content">
           <!-- wiki content -->
            <div>
<ul>
    <li><span class="TOCOutline">1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Introduction">Introduction</a></li>
<ul>
    <li><span class="TOCOutline">1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Gettingstarted">Getting started</a></li>
<ul>
    <li><span class="TOCOutline">1.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Initialreading">Initial reading</a></li>
    <li><span class="TOCOutline">1.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Infrastructuresetup">Infrastructure setup</a></li>
    <li><span class="TOCOutline">1.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Firstproject">First project</a></li>
</ul>
    <li><span class="TOCOutline">1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFoverview">IPF overview</a></li>
    <li><span class="TOCOutline">1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFcoderepositories">IPF code repositories</a></li>
    <li><span class="TOCOutline">1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFsubprojects">IPF subprojects</a></li>
<ul>
    <li><span class="TOCOutline">1.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFTools">IPF Tools</a></li>
    <li><span class="TOCOutline">1.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFRuntime">IPF Runtime</a></li>
    <li><span class="TOCOutline">1.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFLab">IPF Lab</a></li>
</ul>
    <li><span class="TOCOutline">1.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFarchitecture">IPF architecture</a></li>
<ul>
    <li><span class="TOCOutline">1.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Componentarchitecture">Component architecture</a></li>
<ul>
    <li><span class="TOCOutline">1.5.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IHEcomponents">IHE components</a></li>
    <li><span class="TOCOutline">1.5.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFandOSGi">IPF and OSGi</a></li>
    <li><span class="TOCOutline">1.5.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Namespaceandcomponentdescriptions">Namespace and component descriptions</a></li>
</ul>
</ul>
</ul>
    <li><span class="TOCOutline">2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Scriptinglayer">Scripting layer</a></li>
<ul>
    <li><span class="TOCOutline">2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionmechanism">DSL extension mechanism</a></li>
<ul>
    <li><span class="TOCOutline">2.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Limitations">Limitations</a></li>
</ul>
    <li><span class="TOCOutline">2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-PredefinedDSLextensions">Predefined DSL extensions</a></li>
</ul>
    <li><span class="TOCOutline">3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Corefeatures">Core features</a></li>
<ul>
    <li><span class="TOCOutline">3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Moduleadapters">Module adapters</a></li>
    <li><span class="TOCOutline">3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensions">DSL extensions</a></li>
<ul>
    <li><span class="TOCOutline">3.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionforexistingCamelfeatures">DSL extension for existing Camel features</a></li>
<ul>
    <li><span class="TOCOutline">3.2.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Closuresupport">Closure support</a></li>
    <li><span class="TOCOutline">3.2.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Beanlookup">Bean lookup</a></li>
    <li><span class="TOCOutline">3.2.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Errorhandler">Error handler</a></li>
    <li><span class="TOCOutline">3.2.1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Interceptor">Interceptor</a></li>
</ul>
    <li><span class="TOCOutline">3.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsfor%7B%7BExpressionClause%7D%7D">DSL extensions for <tt>ExpressionClause</tt></a></li>
<ul>
    <li><span class="TOCOutline">3.2.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Exceptionobjectsandmessages">Exception objects and messages</a></li>
</ul>
    <li><span class="TOCOutline">3.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforcustomIPFprocessors">DSL extensions for custom IPF processors</a></li>
<ul>
    <li><span class="TOCOutline">3.2.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Contentenrichment">Content enrichment</a></li>
    <li><span class="TOCOutline">3.2.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validationprocess">Validation process</a></li>
    <li><span class="TOCOutline">3.2.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Splitter">Splitter</a></li>
</ul>
    <li><span class="TOCOutline">3.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforIPFmoduleadapters">DSL extensions for IPF module adapters</a></li>
<ul>
    <li><span class="TOCOutline">3.2.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifier">Transmogrifier</a></li>
<ul>
    <li><span class="TOCOutline">3.2.4.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Inclusionoptions">Inclusion options</a></li>
    <li><span class="TOCOutline">3.2.4.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifierinput">Transmogrifier input</a></li>
    <li><span class="TOCOutline">3.2.4.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifieroutput">Transmogrifier output</a></li>
    <li><span class="TOCOutline">3.2.4.1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifierimplementations">Transmogrifier implementations</a></li>
</ul>
    <li><span class="TOCOutline">3.2.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validator">Validator</a></li>
    <li><span class="TOCOutline">3.2.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parser">Parser</a></li>
<ul>
    <li><span class="TOCOutline">3.2.4.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UnmarshallingviaParser">Unmarshalling via Parser</a></li>
</ul>
    <li><span class="TOCOutline">3.2.4.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Renderer">Renderer</a></li>
<ul>
    <li><span class="TOCOutline">3.2.4.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MarshallingviaRenderer">Marshalling via Renderer</a></li>
</ul>
    <li><span class="TOCOutline">3.2.4.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Predicate">Predicate</a></li>
    <li><span class="TOCOutline">3.2.4.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Aggregator">Aggregator</a></li>
    <li><span class="TOCOutline">3.2.4.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Adapterextensionsummary">Adapter extension summary</a></li>
<ul>
    <li><span class="TOCOutline">3.2.4.7.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Relevanttypes">Relevant types</a></li>
    <li><span class="TOCOutline">3.2.4.7.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parametersandinput">Parameters and input</a></li>
    <li><span class="TOCOutline">3.2.4.7.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Closureprofiles">Closure profiles</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">3.2.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforGroovyXMLprocessing">DSL extensions for Groovy XML processing</a></li>
<ul>
    <li><span class="TOCOutline">3.2.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-XMLUnmarshallingwithGroovy%7B%7BXmlParser%7D%7D">XML Unmarshalling with Groovy <tt>XmlParser</tt></a></li>
    <li><span class="TOCOutline">3.2.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-XMLUnmarshallingwithGroovy%7B%7BXmlSlurper%7D%7D">XML Unmarshalling with Groovy <tt>XmlSlurper</tt></a></li>
    <li><span class="TOCOutline">3.2.5.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-XMLMarshallingwithGroovy%7B%7BXmlNodePrinter%7D%7D">XML Marshalling with Groovy <tt>XmlNodePrinter</tt></a></li>
    <li><span class="TOCOutline">3.2.5.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-XMLtransmogrifiers">XML transmogrifiers</a></li>
</ul>
</ul>
</ul>
    <li><span class="TOCOutline">4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MappingService">Mapping Service</a></li>
<ul>
    <li><span class="TOCOutline">4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Overview">Overview</a></li>
    <li><span class="TOCOutline">4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfiguringtheMappingService">Configuring the Mapping Service</a></li>
<ul>
    <li><span class="TOCOutline">4.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UsingtheBidiMappingServicebean">Using the BidiMappingService bean</a></li>
    <li><span class="TOCOutline">4.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UsingtheBidiMappingServiceConfigurerbean">Using the BidiMappingServiceConfigurer bean</a></li>
</ul>
    <li><span class="TOCOutline">4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DefinitionofMappings">Definition of Mappings</a></li>
</ul>
    <li><span class="TOCOutline">5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7v2Messaging">HL7 v2 Messaging</a></li>
<ul>
    <li><span class="TOCOutline">5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7v2MessagingOverview">HL7 v2 Messaging Overview</a></li>
    <li><span class="TOCOutline">5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Features">Features</a></li>
    <li><span class="TOCOutline">5.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfiguringHL7v2Messaging">Configuring HL7 v2 Messaging</a></li>
    <li><span class="TOCOutline">5.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7v2DSL">HL7 v2 DSL</a></li>
<ul>
    <li><span class="TOCOutline">5.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Construction">Construction</a></li>
    <li><span class="TOCOutline">5.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Navigation">Navigation</a></li>
<ul>
    <li><span class="TOCOutline">5.4.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Navigationtogroupsandsegments">Navigation to groups and segments</a></li>
    <li><span class="TOCOutline">5.4.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Navigationtofields">Navigation to fields</a></li>
    <li><span class="TOCOutline">5.4.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Fieldvalues">Field values</a></li>
    <li><span class="TOCOutline">5.4.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7NullValues">HL7 Null Values</a></li>
    <li><span class="TOCOutline">5.4.2.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Repetitions">Repetitions</a></li>
    <li><span class="TOCOutline">5.4.2.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Smartnavigation">Smart navigation</a></li>
    <li><span class="TOCOutline">5.4.2.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Accesstargetobjects">Access target objects</a></li>
    <li><span class="TOCOutline">5.4.2.8</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-GroupandSegmentemptyness%28asofIPF2.1%29">Group and Segment emptyness (as of IPF 2.1)</a></li>
    <li><span class="TOCOutline">5.4.2.9</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Iterativefunctions%28asofIPF2.1%29">Iterative functions (as of IPF 2.1)</a></li>
</ul>
    <li><span class="TOCOutline">5.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Manipulation">Manipulation</a></li>
<ul>
    <li><span class="TOCOutline">5.4.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Manipulatingsegments">Manipulating segments</a></li>
    <li><span class="TOCOutline">5.4.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Manipulatingfields">Manipulating fields</a></li>
    <li><span class="TOCOutline">5.4.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Addingrepetitions">Adding repetitions</a></li>
</ul>
    <li><span class="TOCOutline">5.4.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Rendering">Rendering</a></li>
</ul>
    <li><span class="TOCOutline">5.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-FunctionalExtensionstoHAPI">Functional Extensions to HAPI</a></li>
<ul>
    <li><span class="TOCOutline">5.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7PipeParserandcustomModelClassFactory">HL7 PipeParser and custom ModelClassFactory</a></li>
<ul>
    <li><span class="TOCOutline">5.5.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomModelClassFactory">CustomModelClassFactory</a></li>
    <li><span class="TOCOutline">5.5.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-GroovyCustomModelClassFactory">GroovyCustomModelClassFactory</a></li>
    <li><span class="TOCOutline">5.5.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomPipeParser">Custom PipeParser</a></li>
</ul>
    <li><span class="TOCOutline">5.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MethodsaddedtotheHAPIMessageinterface">Methods added to the HAPI Message interface</a></li>
<ul>
    <li><span class="TOCOutline">5.5.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-NewMessages">New Messages</a></li>
    <li><span class="TOCOutline">5.5.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AcknowledgementsandResponses">Acknowledgements and Responses</a></li>
    <li><span class="TOCOutline">5.5.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Messagechecks">Message checks</a></li>
    <li><span class="TOCOutline">5.5.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Messagedump">Message dump</a></li>
</ul>
    <li><span class="TOCOutline">5.5.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MethodsaddedtotheHAPIStructureinterface">Methods added to the HAPI Structure interface</a></li>
<ul>
    <li><span class="TOCOutline">5.5.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Newsegments">New segments</a></li>
    <li><span class="TOCOutline">5.5.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Printingstructures">Printing structures</a></li>
</ul>
    <li><span class="TOCOutline">5.5.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MethodsaddedtotheHAPITypeinterface">Methods added to the HAPI Type interface</a></li>
<ul>
    <li><span class="TOCOutline">5.5.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Newfields">New fields</a></li>
    <li><span class="TOCOutline">5.5.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Printingtypes">Printing types</a></li>
    <li><span class="TOCOutline">5.5.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MappingService">Mapping Service</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">5.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ExamplesforHL7Messaging">Examples for HL7 Messaging</a></li>
<ul>
    <li><span class="TOCOutline">5.6.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Createamessagefromscratch">Create a message from scratch</a></li>
    <li><span class="TOCOutline">5.6.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CreateaORUR01v2.5message">Create a ORU_R01 v2.5 message</a></li>
    <li><span class="TOCOutline">5.6.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Conclusion">Conclusion</a></li>
</ul>
    <li><span class="TOCOutline">5.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Languagereference">Language reference</a></li>
<ul>
    <li><span class="TOCOutline">5.7.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Messageelements">Message elements</a></li>
    <li><span class="TOCOutline">5.7.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Readaccessoperations">Read access operations</a></li>
<ul>
    <li><span class="TOCOutline">5.7.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Readaccessoperationsonnonrepeatingmessageelements">Read access operations on non-repeating message elements</a></li>
    <li><span class="TOCOutline">5.7.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Readaccessoperationsonrepeatingmessageelements">Read access operations on repeating message elements</a></li>
</ul>
    <li><span class="TOCOutline">5.7.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Writeaccessoperations">Write access operations</a></li>
<ul>
    <li><span class="TOCOutline">5.7.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Writeaccessoperationsonrepeatingmessageelements">Write access operations on repeating message elements</a></li>
<ul>
    <li><span class="TOCOutline">5.7.3.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Writeaccessoperationsonmessageelementsdefinedasseparatevariable">Write access operations on message elements defined as separate variable</a></li>
</ul>
    <li><span class="TOCOutline">5.7.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Methodandpropertydispatch">Method and property dispatch</a></li>
</ul>
    <li><span class="TOCOutline">5.7.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Accesstospecialobjects">Access to special objects</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7v2MessageValidation">HL7 v2 Message Validation</a></li>
<ul>
    <li><span class="TOCOutline">6.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Overview">Overview</a></li>
    <li><span class="TOCOutline">6.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ValidationBasics">Validation Basics</a></li>
<ul>
    <li><span class="TOCOutline">6.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validation">Validation</a></li>
    <li><span class="TOCOutline">6.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFHL7ValidationRules">IPF HL7 Validation Rules</a></li>
    <li><span class="TOCOutline">6.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ReusingaDefaultValidationContext">Reusing a DefaultValidationContext</a></li>
</ul>
    <li><span class="TOCOutline">6.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfiguringHL7v2Validation">Configuring HL7 v2 Validation</a></li>
    <li><span class="TOCOutline">6.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-PrimitiveTypeConstraints">Primitive Type Constraints</a></li>
    <li><span class="TOCOutline">6.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MessageConstraints">Message Constraints</a></li>
<ul>
    <li><span class="TOCOutline">6.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7AbstractMessageSyntax">HL7 Abstract Message Syntax</a></li>
    <li><span class="TOCOutline">6.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7ConformanceProfiles">HL7 Conformance Profiles</a></li>
    <li><span class="TOCOutline">6.5.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomMessageValidation">Custom Message Validation</a></li>
</ul>
    <li><span class="TOCOutline">6.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-EncodedMessageConstraints">Encoded Message Constraints</a></li>
</ul>
    <li><span class="TOCOutline">7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CamelDSLExtensionsforHL7v2">Camel DSL Extensions for HL7 v2</a></li>
<ul>
    <li><span class="TOCOutline">7.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfiguringCamelDSLExtensionsforHL7v2Messaging">Configuring Camel DSL Extensions for HL7 v2 Messaging</a></li>
    <li><span class="TOCOutline">7.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforHL7v2Messaging">DSL extensions for HL7 v2 Messaging</a></li>
<ul>
    <li><span class="TOCOutline">7.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7v2DSLMessageAdapter%28un%29marshalling">HL7 v2 DSL MessageAdapter (un)marshalling</a></li>
    <li><span class="TOCOutline">7.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%28Un%29marshalingoptions">(Un)marshaling options</a></li>
    <li><span class="TOCOutline">7.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7v2MessageValidation">HL7 v2 Message Validation</a></li>
</ul>
    <li><span class="TOCOutline">7.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CamelDSLExtensionsforHL7v2MessagingExample">Camel DSL Extensions for HL7 v2 Messaging Example</a></li>
</ul>
    <li><span class="TOCOutline">8</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFComponentsforIHEIntegrationProfiles">IPF Components for IHE Integration Profiles</a></li>
    <li><span class="TOCOutline">9</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-TranslationbetweenHL7v2andHL7v3messagemodels">Translation between HL7 v2 and HL7 v3 message models</a></li>
<ul>
    <li><span class="TOCOutline">9.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfigurationandUse">Configuration and Use</a></li>
<ul>
    <li><span class="TOCOutline">9.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Step1%3AConfiguringMavenDependencies">Step 1: Configuring Maven Dependencies</a></li>
    <li><span class="TOCOutline">9.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Step2%3AConfiguringMappingService">Step 2: Configuring Mapping Service</a></li>
    <li><span class="TOCOutline">9.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Step3%3AInstantiateTranslatoBeans">Step 3: Instantiate Translato Beans</a></li>
    <li><span class="TOCOutline">9.1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Step4%3AUsingtheTranslators">Step 4: Using the Translators</a></li>
</ul>
    <li><span class="TOCOutline">9.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDAsupport">CDA support</a></li>
<ul>
    <li><span class="TOCOutline">10.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ClinicalDocumentArchitectureabriefoverview">Clinical Document Architecture - a brief overview</a></li>
<ul>
    <li><span class="TOCOutline">10.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Supportfor%27vanilla%27CDA">Support for 'vanilla' CDA</a></li>
    <li><span class="TOCOutline">10.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-SupportforCDAcontentprofiles">Support for CDA content profiles</a></li>
</ul>
    <li><span class="TOCOutline">10.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-GenericCDAsupport">Generic CDA support</a></li>
<ul>
    <li><span class="TOCOutline">10.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
    <li><span class="TOCOutline">10.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CreatinggenericCDAdocuments">Creating generic CDA documents</a></li>
<ul>
    <li><span class="TOCOutline">10.2.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Groovybuilders">Groovy builders</a></li>
    <li><span class="TOCOutline">10.2.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDAHeader">CDA Header</a></li>
    <li><span class="TOCOutline">10.2.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDAbody">CDA body</a></li>
<ul>
    <li><span class="TOCOutline">10.2.2.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-NarrativeBlock">Narrative Block</a></li>
    <li><span class="TOCOutline">10.2.2.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Structuredpart">Structured part</a></li>
</ul>
    <li><span class="TOCOutline">10.2.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDAbuildertips">CDA builder tips</a></li>
<ul>
    <li><span class="TOCOutline">10.2.2.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Includingcompleteparts">Including complete parts</a></li>
    <li><span class="TOCOutline">10.2.2.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Variabletypedvalues">Variable-typed values</a></li>
    <li><span class="TOCOutline">10.2.2.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UsingregularGroovycodeinsideCDAbuilder">Using regular Groovy code inside CDA builder</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">10.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ParsingandRenderingofCDAdocuments">Parsing and Rendering of CDA documents</a></li>
<ul>
    <li><span class="TOCOutline">10.2.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parsing">Parsing</a></li>
    <li><span class="TOCOutline">10.2.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ExtractinginformationfromCDAdocuments">Extracting information from CDA documents</a></li>
    <li><span class="TOCOutline">10.2.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Rendering">Rendering</a></li>
</ul>
    <li><span class="TOCOutline">10.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ValidatingCDAdocuments">Validating CDA documents</a></li>
</ul>
    <li><span class="TOCOutline">10.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensions">DSL extensions</a></li>
<ul>
    <li><span class="TOCOutline">10.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
    <li><span class="TOCOutline">10.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDA%28un%29marshalling">CDA (un)marshalling</a></li>
    <li><span class="TOCOutline">10.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%28Un%29marshalingoptions">(Un)marshaling options</a></li>
    <li><span class="TOCOutline">10.3.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDAdocumentvalidation">CDA document validation</a></li>
</ul>
    <li><span class="TOCOutline">10.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDABuilderSyntaxReference">CDA Builder Syntax Reference</a></li>
<ul>
    <li><span class="TOCOutline">10.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-GeneralBuilderSyntax">General Builder Syntax</a></li>
    <li><span class="TOCOutline">10.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDASchemaNames">CDA Schema Names</a></li>
</ul>
    <li><span class="TOCOutline">10.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CDAprofilesupport">CDA profile support</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CCD">CCD</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
    <li><span class="TOCOutline">10.5.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Usage">Usage</a></li>
    <li><span class="TOCOutline">10.5.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Purposesection">Purpose section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Payerssection">Payers section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AdvanceDirectivessection">Advance Directives section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Supportsection">Support section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.6.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.6.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-FunctionalStatussection">Functional Status section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.7.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-FunctionalStatus">Functional Status</a></li>
    <li><span class="TOCOutline">10.5.1.7.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.8</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Problemssection">Problems section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.8.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.8.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.9</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-FamiliyHistorysection">Familiy History section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.9.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.9.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.10</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-SocialHistorysection">Social History section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.10.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.10.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.11</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Alertssection">Alerts section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.11.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.11.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.12</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Medicationssection">Medications section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.12.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.12.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.13</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-MedicalEquipmentsection">Medical Equipment section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.13.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.13.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.14</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Immunizationssection">Immunizations section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.14.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.14.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.15</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-VitalSignssection">Vital Signs section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.15.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.15.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.16</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Resultssection">Results section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.16.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.16.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.17</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Proceduressection">Procedures section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.17.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.17.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.18</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Encounterssection">Encounters section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.18.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.18.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
    <li><span class="TOCOutline">10.5.1.19</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-PlanofCaresection">Plan of Care section</a></li>
<ul>
    <li><span class="TOCOutline">10.5.1.19.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-BuilderElements">Builder Elements</a></li>
    <li><span class="TOCOutline">10.5.1.19.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
</ul>
</ul>
</ul>
</ul>
    <li><span class="TOCOutline">11</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Flowmanagement">Flow management</a></li>
<ul>
    <li><span class="TOCOutline">11.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Concept">Concept</a></li>
    <li><span class="TOCOutline">11.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JMXinterface">JMX interface</a></li>
<ul>
    <li><span class="TOCOutline">11.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Messagecontent">Message content</a></li>
    <li><span class="TOCOutline">11.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JConsoleextension">JConsole extension</a></li>
</ul>
    <li><span class="TOCOutline">11.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
<ul>
    <li><span class="TOCOutline">11.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Derbydatabase">Derby database</a></li>
    <li><span class="TOCOutline">11.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-OracleDatabase">Oracle Database</a></li>
</ul>
    <li><span class="TOCOutline">11.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensions">DSL extensions</a></li>
<ul>
    <li><span class="TOCOutline">11.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-The%7B%7BinitFlow%7D%7DDSLextension">The <tt>initFlow</tt> DSL extension</a></li>
<ul>
    <li><span class="TOCOutline">11.4.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parameterizationof%7B%7BinitFlow%7D%7D">Parameterization of <tt>initFlow</tt></a></li>
</ul>
    <li><span class="TOCOutline">11.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-The%7B%7BackFlow%7D%7DDSLextension">The <tt>ackFlow</tt> DSL extension</a></li>
<ul>
    <li><span class="TOCOutline">11.4.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parameterizationof%7B%7BackFlow%7D%7D">Parameterization of <tt>ackFlow</tt></a></li>
</ul>
    <li><span class="TOCOutline">11.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-The%7B%7BnakFlow%7D%7DDSLextension">The <tt>nakFlow</tt> DSL extension</a></li>
<ul>
    <li><span class="TOCOutline">11.4.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parameterizationof%7B%7BnakFlow%7D%7D">Parameterization of <tt>nakFlow</tt></a></li>
</ul>
    <li><span class="TOCOutline">11.4.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-The%7B%7Bdedupe%7D%7DDSLextension">The <tt>dedupe</tt> DSL extension</a></li>
</ul>
    <li><span class="TOCOutline">11.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Splitsandmulticasts">Splits and multicasts</a></li>
<ul>
    <li><span class="TOCOutline">11.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFversion%3C%3D1.6.0">IPF version &lt;= 1.6.0</a></li>
    <li><span class="TOCOutline">11.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFversion%3E1.6.0">IPF version &gt; 1.6.0</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">12</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Flowremoval">Flow removal</a></li>
<ul>
    <li><span class="TOCOutline">12.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JMXinterface">JMX interface</a></li>
    <li><span class="TOCOutline">12.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
</ul>
    <li><span class="TOCOutline">13</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eventinfrastructure">Event infrastructure</a></li>
<ul>
    <li><span class="TOCOutline">13.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Overview">Overview</a></li>
<ul>
    <li><span class="TOCOutline">13.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Architecture">Architecture</a></li>
    <li><span class="TOCOutline">13.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Terminology">Terminology</a></li>
    <li><span class="TOCOutline">13.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Usagesummary">Usage summary</a></li>
</ul>
    <li><span class="TOCOutline">13.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Details">Details</a></li>
<ul>
    <li><span class="TOCOutline">13.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-EventEngine">Event Engine</a></li>
    <li><span class="TOCOutline">13.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Events">Events</a></li>
    <li><span class="TOCOutline">13.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eventsources">Event sources</a></li>
<ul>
    <li><span class="TOCOutline">13.2.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-EventpublishingviatheDSL">Event publishing via the DSL </a></li>
    <li><span class="TOCOutline">13.2.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-EventpublishingviaAPI">Event publishing via API</a></li>
</ul>
    <li><span class="TOCOutline">13.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eventhandlersandfilters">Event handlers and filters</a></li>
    <li><span class="TOCOutline">13.2.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eventchannelsandadapters">Event channels and adapters</a></li>
<ul>
    <li><span class="TOCOutline">13.2.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UsingCamelroutesaschannels">Using Camel routes as channels</a></li>
</ul>
    <li><span class="TOCOutline">13.2.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Modularization">Modularization</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">14</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Largebinarysupport">Large binary support</a></li>
<ul>
    <li><span class="TOCOutline">14.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Concept">Concept</a></li>
    <li><span class="TOCOutline">14.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensions">DSL extensions</a></li>
    <li><span class="TOCOutline">14.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UsingtheLBS">Using the LBS</a></li>
<ul>
    <li><span class="TOCOutline">14.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfigureaprojecttousetheLBS">Configure a project to use the LBS</a></li>
    <li><span class="TOCOutline">14.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Setupadiskstore">Set up a disk store</a></li>
    <li><span class="TOCOutline">14.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AddingsupportfortheHTTPendpoint">Adding support for the HTTP endpoint</a></li>
<ul>
    <li><span class="TOCOutline">14.3.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Storingsinglepartuploads">Storing singlepart uploads</a></li>
    <li><span class="TOCOutline">14.3.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Storingmultipartuploads">Storing multipart uploads</a></li>
    <li><span class="TOCOutline">14.3.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Storingdownloads">Storing downloads</a></li>
    <li><span class="TOCOutline">14.3.3.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Uploadingstoredbinaries">Uploading stored binaries</a></li>
</ul>
    <li><span class="TOCOutline">14.3.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AddingsupportfortheCXFendpoint">Adding support for the CXF endpoint</a></li>
<ul>
    <li><span class="TOCOutline">14.3.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-StoringbinariesfromaSOAPrequest">Storing binaries from a SOAP request</a></li>
    <li><span class="TOCOutline">14.3.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-StoringbinariesfromaSOAPresponse">Storing binaries from a SOAP response</a></li>
    <li><span class="TOCOutline">14.3.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-PreparingaSOAPrequestwithstoredbinaries">Preparing a SOAP request with stored binaries</a></li>
</ul>
    <li><span class="TOCOutline">14.3.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AddingsupportfortheMINAendpoint">Adding support for the MINA endpoint</a></li>
<ul>
    <li><span class="TOCOutline">14.3.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ProcessingmessagesfromtheMINAendpointwiththeLBS">Processing messages from the MINA endpoint with the LBS</a></li>
    <li><span class="TOCOutline">14.3.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ReceivingHL7messagesfromtheMINAendpointwiththeLBS">Receiving HL7 messages from the MINA endpoint with the LBS</a></li>
    <li><span class="TOCOutline">14.3.5.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-SendingHL7messagestotheMINAendpointwiththeLBS">Sending HL7 messages to the MINA endpoint with the LBS</a></li>
</ul>
</ul>
</ul>
    <li><span class="TOCOutline">15</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Performancemeasurement">Performance measurement</a></li>
<ul>
    <li><span class="TOCOutline">15.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Performancequestionstobeanswered">Performance questions to be answered</a></li>
    <li><span class="TOCOutline">15.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Usageofthecomponent">Usage of the component</a></li>
<ul>
    <li><span class="TOCOutline">15.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Statisticalreportsgeneratedbythecomponent">Statistical reports generated by the component</a></li>
    <li><span class="TOCOutline">15.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
</ul>
    <li><span class="TOCOutline">15.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Singlenodedeploymentwithaperformancemeasurementserver">Single node deployment with a performance measurement server</a></li>
<ul>
    <li><span class="TOCOutline">15.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Statisticalreportsgeneratedbytheperformancemeasurementserver">Statistical reports generated by the performance measurement server</a></li>
    <li><span class="TOCOutline">15.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configurationoftheapplicationtouseaperformancemeasurementserver">Configuration of the application to use a performance measurement server</a></li>
    <li><span class="TOCOutline">15.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Deploymentandconfigurationoftheperformancemeasurementserver">Deployment and configuration of the performance measurement server</a></li>
</ul>
    <li><span class="TOCOutline">15.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Clusterdeploymentwithaperformancemeasurementserver">Cluster deployment with a performance measurement server</a></li>
    <li><span class="TOCOutline">15.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforperformancemeasurement">DSL extensions for performance measurement</a></li>
    <li><span class="TOCOutline">15.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HTTPinterfaceoftheperformancemeasurementcomponent">HTTP interface of the performance measurement component</a></li>
</ul>
    <li><span class="TOCOutline">16</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extensionmechanism">Extension mechanism</a></li>
<ul>
    <li><span class="TOCOutline">16.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Usingtheextensionmechanism">Using the extension mechanism</a></li>
<ul>
    <li><span class="TOCOutline">16.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Basicexample">Basic example</a></li>
<ul>
    <li><span class="TOCOutline">16.1.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Baseapplication">Base application</a></li>
    <li><span class="TOCOutline">16.1.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extensionpart">Extension part</a></li>
    <li><span class="TOCOutline">16.1.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Startingtheapplication">Starting the application</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">16.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configurationindetail">Configuration in detail</a></li>
<ul>
    <li><span class="TOCOutline">16.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Postprocessorsandconfigurersdefinition">Post processors and configurers definition</a></li>
    <li><span class="TOCOutline">16.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Custommappingsdefinition">Custom mappings definition</a></li>
    <li><span class="TOCOutline">16.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomHL7modelclassesdefinition">Custom HL7 model classes definition</a></li>
    <li><span class="TOCOutline">16.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomDSLextensionsdefinition">Custom DSL extensions definition</a></li>
    <li><span class="TOCOutline">16.2.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Customroutebuilders%2Finterceptors%2Fexceptionhandlersdefinition">Custom route builders/interceptors/exception handlers definition</a></li>
</ul>
    <li><span class="TOCOutline">16.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Design">Design</a></li>
<ul>
    <li><span class="TOCOutline">16.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configurers">Configurers</a></li>
    <li><span class="TOCOutline">16.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Postprocessors">Post processors</a></li>
    <li><span class="TOCOutline">16.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Nextsteps">Next steps</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">17</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Qualityofservice">Quality of service</a></li>
<ul>
    <li><span class="TOCOutline">17.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Recoverability">Recoverability</a></li>
<ul>
    <li><span class="TOCOutline">17.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transactionalmessaging">Transactional messaging</a></li>
<ul>
    <li><span class="TOCOutline">17.1.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Recoverfromprocessorfailures">Recover from processor failures</a></li>
    <li><span class="TOCOutline">17.1.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-RecoverfromJVMcrashes">Recover from JVM crashes</a></li>
    <li><span class="TOCOutline">17.1.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Recoverfromfaileddeliveries">Recover from failed deliveries</a></li>
    <li><span class="TOCOutline">17.1.1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Distributedtransactionprocessing">Distributed transaction processing</a></li>
    <li><span class="TOCOutline">17.1.1.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
    <li><span class="TOCOutline">17.1.1.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transactionalroutes">Transactional routes</a></li>
</ul>
    <li><span class="TOCOutline">17.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Flowmanagement">Flow management</a></li>
    <li><span class="TOCOutline">17.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Processmanagement">Process management</a></li>
</ul>
    <li><span class="TOCOutline">17.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Availability">Availability</a></li>
</ul>
    <li><span class="TOCOutline">18</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AppendixAIPFdevelopment">Appendix A - IPF development</a></li>
<ul>
    <li><span class="TOCOutline">18.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Environment">Environment</a></li>
<ul>
    <li><span class="TOCOutline">18.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Java">Java</a></li>
    <li><span class="TOCOutline">18.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Maven">Maven</a></li>
<ul>
    <li><span class="TOCOutline">18.1.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Initialsetup">Initial setup</a></li>
    <li><span class="TOCOutline">18.1.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectsetup%28examples%29">Project setup (examples)</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">18.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Sources">Sources</a></li>
<ul>
    <li><span class="TOCOutline">18.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Repository">Repository</a></li>
    <li><span class="TOCOutline">18.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Checkout">Checkout</a></li>
</ul>
    <li><span class="TOCOutline">18.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></li>
<ul>
<ul>
    <li><span class="TOCOutline">18.3.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Proxies">Proxies</a></li>
    <li><span class="TOCOutline">18.3.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Windows">Windows</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">18.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Building">Building</a></li>
    <li><span class="TOCOutline">18.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IDE">IDE</a></li>
<ul>
    <li><span class="TOCOutline">18.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IntelliJIDEA">IntelliJ IDEA</a></li>
    <li><span class="TOCOutline">18.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eclipse">Eclipse</a></li>
</ul>
    <li><span class="TOCOutline">18.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Archetypes">Archetypes</a></li>
<ul>
    <li><span class="TOCOutline">18.6.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Overview">Overview</a></li>
    <li><span class="TOCOutline">18.6.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Example">Example</a></li>
<ul>
    <li><span class="TOCOutline">18.6.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Createproject">Create project</a></li>
    <li><span class="TOCOutline">18.6.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Createassembly">Create assembly</a></li>
    <li><span class="TOCOutline">18.6.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eclipseimport">Eclipse import</a></li>
    <li><span class="TOCOutline">18.6.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IntelliJIDEA">IntelliJ IDEA</a></li>
</ul>
</ul>
</ul>
    <li><span class="TOCOutline">19</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AppendixBIPFtutorials">Appendix B - IPF tutorials</a></li>
<ul>
    <li><span class="TOCOutline">19.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Firststepstutorial">First steps tutorial</a></li>
<ul>
    <li><span class="TOCOutline">19.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Sourcecode">Source code</a></li>
    <li><span class="TOCOutline">19.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcreation">Project creation</a></li>
    <li><span class="TOCOutline">19.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedefinition">Route definition</a></li>
    <li><span class="TOCOutline">19.1.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routeextension">Route extension</a></li>
    <li><span class="TOCOutline">19.1.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projecttesting">Project testing</a></li>
<ul>
    <li><span class="TOCOutline">19.1.5.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Unittest">Unit test</a></li>
    <li><span class="TOCOutline">19.1.5.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Servertest">Server test</a></li>
</ul>
    <li><span class="TOCOutline">19.1.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Assemblyandinstallation">Assembly and installation</a></li>
    <li><span class="TOCOutline">19.1.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Startserver">Start server</a></li>
    <li><span class="TOCOutline">19.1.8</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Summary">Summary</a></li>
</ul>
    <li><span class="TOCOutline">19.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Firstdetailstutorial">First details tutorial</a></li>
<ul>
    <li><span class="TOCOutline">19.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Sourcecode">Source code</a></li>
    <li><span class="TOCOutline">19.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcreation">Project creation</a></li>
<ul>
    <li><span class="TOCOutline">19.2.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedefinition">Route definition</a></li>
    <li><span class="TOCOutline">19.2.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extensiondefinition">Extension definition</a></li>
    <li><span class="TOCOutline">19.2.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Applicationconfiguration">Application configuration</a></li>
    <li><span class="TOCOutline">19.2.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectdescriptor">Project descriptor</a></li>
    <li><span class="TOCOutline">19.2.2.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Assemblydescriptor">Assembly descriptor</a></li>
</ul>
    <li><span class="TOCOutline">19.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcustomization">Project customization</a></li>
    <li><span class="TOCOutline">19.2.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projecttesting">Project testing</a></li>
<ul>
    <li><span class="TOCOutline">19.2.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Unittest">Unit test</a></li>
    <li><span class="TOCOutline">19.2.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Servertest">Server test</a></li>
</ul>
    <li><span class="TOCOutline">19.2.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Assemblyandinstallation">Assembly and installation</a></li>
    <li><span class="TOCOutline">19.2.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Startserver">Start server</a></li>
</ul>
    <li><span class="TOCOutline">19.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7processingtutorial">HL7 processing tutorial</a></li>
<ul>
    <li><span class="TOCOutline">19.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validation">Validation</a></li>
    <li><span class="TOCOutline">19.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transformation">Transformation</a></li>
    <li><span class="TOCOutline">19.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedesign">Route design</a></li>
    <li><span class="TOCOutline">19.3.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Sourcecode">Source code</a></li>
    <li><span class="TOCOutline">19.3.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcreation">Project creation</a></li>
    <li><span class="TOCOutline">19.3.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extendprojectdescriptor">Extend project descriptor</a></li>
    <li><span class="TOCOutline">19.3.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extendapplicationcontext">Extend application context</a></li>
    <li><span class="TOCOutline">19.3.8</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedefinition">Route definition</a></li>
    <li><span class="TOCOutline">19.3.9</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Codemapping">Code mapping</a></li>
    <li><span class="TOCOutline">19.3.10</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routetesting">Route testing</a></li>
<ul>
    <li><span class="TOCOutline">19.3.10.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Automatedtest">Automated test</a></li>
    <li><span class="TOCOutline">19.3.10.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Manualtest">Manual test</a></li>
</ul>
    <li><span class="TOCOutline">19.3.11</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Assemblyandinstallation">Assembly and installation</a></li>
    <li><span class="TOCOutline">19.3.12</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Startserver">Start server</a></li>
</ul>
    <li><span class="TOCOutline">19.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-TutorialforroutingtoawebserviceviaHTTP">Tutorial for routing to a webservice via HTTP</a></li>
<ul>
    <li><span class="TOCOutline">19.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Sourcecode">Source code</a></li>
    <li><span class="TOCOutline">19.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CreateabasicprojectusingtheIPFandLBS">Create a basic project using the IPF and LBS</a></li>
    <li><span class="TOCOutline">19.4.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Createthewebservice">Create the webservice</a></li>
    <li><span class="TOCOutline">19.4.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Addtherouting">Add the routing</a></li>
</ul>
    <li><span class="TOCOutline">19.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Referenceapplication">Reference application</a></li>
    <li><span class="TOCOutline">19.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-XDSdemorepository">XDS demo repository</a></li>
<ul>
    <li><span class="TOCOutline">19.6.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Overview">Overview</a></li>
    <li><span class="TOCOutline">19.6.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-RunningXDSToolKittestsagainstthedemorepository">Running XDSToolKit tests against the demo repository</a></li>
    <li><span class="TOCOutline">19.6.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFXDSrelatedcodesnippets">IPF XDS related code snippets</a></li>
<ul>
    <li><span class="TOCOutline">19.6.3.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Basicconfiguration">Basic configuration</a></li>
    <li><span class="TOCOutline">19.6.3.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Exposingtheendpoints">Exposing the endpoints</a></li>
    <li><span class="TOCOutline">19.6.3.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validatingincomingmessages">Validating incoming messages</a></li>
    <li><span class="TOCOutline">19.6.3.4</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Usingthemetadataclasses">Using the meta data classes</a></li>
<ul>
    <li><span class="TOCOutline">19.6.3.4.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Evaluatingthequerytype">Evaluating the query type</a></li>
    <li><span class="TOCOutline">19.6.3.4.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Splittingforindividualentryprocessing">Splitting for individual entry processing</a></li>
</ul>
    <li><span class="TOCOutline">19.6.3.5</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Securetransport">Secure transport</a></li>
    <li><span class="TOCOutline">19.6.3.6</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Auditing">Auditing</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">19.7</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFextensionmechanismtutorial">IPF extension mechanism tutorial</a></li>
<ul>
    <li><span class="TOCOutline">19.7.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Sourcecode">Source code</a></li>
    <li><span class="TOCOutline">19.7.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectstructurebaseapplication">Project structure - base application</a></li>
<ul>
    <li><span class="TOCOutline">19.7.2.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedefinition">Route definition</a></li>
    <li><span class="TOCOutline">19.7.2.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Springbeansdefinition">Spring beans definition</a></li>
    <li><span class="TOCOutline">19.7.2.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Assemblyandinstallation">Assembly and installation</a></li>
</ul>
    <li><span class="TOCOutline">19.7.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extensionsdefinition">Extensions definition</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">20</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AppendixCIPFGuidelines">Appendix C - IPF Guidelines</a></li>
<ul>
    <li><span class="TOCOutline">20.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsguide">DSL extensions guide</a></li>
<ul>
    <li><span class="TOCOutline">20.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Processorwithcustomname">Processor with custom name</a></li>
    <li><span class="TOCOutline">20.1.2</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsusingamodelclass">DSL extensions using a model class</a></li>
    <li><span class="TOCOutline">20.1.3</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ParameterizedDSLextensions">Parameterized DSL extensions</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">21</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AppendixDIPFcontext">Appendix D - IPF context</a></li>
<ul>
    <li><span class="TOCOutline">21.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IHE">IHE</a></li>
<ul>
    <li><span class="TOCOutline">21.1.1</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Deploymentoptions">Deployment options</a></li>
</ul>
</ul>
    <li><span class="TOCOutline">22</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AppendixEKnowncamelissues">Appendix E - Known camel issues</a></li>
    <li><span class="TOCOutline">23</span> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AppendixFDSLextensionsindex">Appendix F - DSL extensions index</a></li>
</ul></div>


<h1><a name="IPFreference-single-Introduction"></a>Introduction</h1>

<h2><a name="IPFreference-single-Gettingstarted"></a>Getting started</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Prerequisites</b><br><table class="sectionMacro" border="0" cellpadding="5" cellspacing="0" width="100%"><tbody><tr>
<td class="confluenceTd" valign="top" width="15%">
<p><a href="http://activemq.apache.org/camel" rel="nofollow"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/camel.png" align="absmiddle" border="0"></a></p></td>
<td class="confluenceTd" valign="top">
<p>The Open eHealth Integration Platform (IPF) is based on <a href="http://activemq.apache.org/camel" rel="nofollow">Apache Camel</a>. It is therefore important that you have a good understanding how Camel works before continuing with the IPF documentation. For a general Camel overview go the project's <a href="http://camel.apache.org/" rel="nofollow">main page</a>. Camel tutorials can be found on a separate <a href="http://camel.apache.org/tutorials.html" rel="nofollow">tutorials page</a>. A recommended starting point is the <a href="http://camel.apache.org/tutorial-example-reportincident.html" rel="nofollow">tutorial introducing Camel steadily in a real life integration</a>.</p></td></tr></tbody></table>
<table class="sectionMacro" border="0" cellpadding="5" cellspacing="0" width="100%"><tbody><tr>
<td class="confluenceTd" valign="top" width="15%">
<p><a href="http://www.enterpriseintegrationpatterns.com/" rel="nofollow"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/eip.jpg" align="absmiddle" border="0"></a></p></td>
<td class="confluenceTd" valign="top">
<p>Application development on the Open eHealth Integration Platform (IPF) follows <a href="http://www.enterpriseintegrationpatterns.com/" rel="nofollow">Enterprise Integration Patterns</a>. Integration platforms or service buses won't help you unless you have a good understanding of the principles and concepts of messaging solutions. This book gives you excellent hints how to design messaging-based integration solutions.</p></td></tr></tbody></table></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-Initialreading"></a>Initial reading</h3>

<p>After you've learned some basics about <a href="http://activemq.apache.org/camel" rel="nofollow">Apache Camel</a> the best way to start with IPF is to read through the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFoverview">IPF overview</a> section. It will give you a high-level view of the features provided by IPF including some links to more detailed documentation. The <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFarchitecture">IPF architecture</a> section starts with diagrams of the physical components that make up IPF. A short description of the component namspaces and the individual components is given as well.</p>

<h3><a name="IPFreference-single-Infrastructuresetup"></a>Infrastructure setup</h3>

<p>Before you start working with IPF make sure that you've read the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development pages</a>. These will explain how to </p>

<ul>
	<li>Setup the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Environment">development environment</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Sources">Checkout</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Binaries">compile</a> the sources (optional).</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Projects">Import the IPF sources</a> into Eclipse (optional).</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">Create new projects</a> using archetypes (see also <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Tutorials" title="IPF Tutorials">IPF Tutorials</a>).</li>
</ul>


<h3><a name="IPFreference-single-Firstproject"></a>First project</h3>

<p>The <a href="http://repo.openehealth.org/confluence/display/ipf2/First+steps+tutorial" title="First steps tutorial">first steps</a> tutorial is a good starting point for creating your first IPF project. It demonstrates how to use IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">project archetypes</a> for creating a project and walks through the key project artifacts. A simple message processing example will introduce some core features of IPF. You can find further tutorials on the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Tutorials" title="IPF Tutorials">tutorials</a> page.</p>

<p><a name="IPFreference-single-IPFoverview"></a></p>
<h2><a name="IPFreference-single-IPFoverview"></a>IPF overview</h2>

<p>The Open eHealth Integration Platform (IPF) is an extension of the <a href="http://camel.apache.org/" rel="nofollow">Apache Camel</a> routing and mediation engine. It has an application programming layer based on the <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a> programming language and comes with comprehensive support for message processing and connecting systems in the eHealth domain. IPF provides domain-specific languages (DSLs) for implementing <a href="http://www.enterpriseintegrationpatterns.com/" rel="nofollow">Enterprise Integration Patterns</a> in general-purpose as well as healthcare-specific integration solutions. These DSLs are extensible via Groovy meta-programming. An example of an healthcare-related use case of IPF is the implementation of interfaces for transactions specified in <a href="http://www.ihe.net/" rel="nofollow">IHE</a> profiles, but you may also use it for developing integration solutions in other domains. IPF can be easily embedded into any Java application and additionally supports deployments inside OSGi environments. Failure recovery and high-availability features support application developers implementing non-functional requirements. The following table summarizes the IPF features.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Feature </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"><a href="http://camel.apache.org/" rel="nofollow">Apache Camel</a></td>
<td class="confluenceTd">IPF is based on Apache Camel. For an overview of Camel's rich feature set (which can be fully used in IPF applications) refer to the project's <a href="http://camel.apache.org/enterprise-integration-patterns.html" rel="nofollow">integration patterns</a> and <a href="http://camel.apache.org/components.html" rel="nofollow">integration components</a> pages.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">Groovy scripting layer</a> </td>
<td class="confluenceTd"> With IPF you define <a href="http://camel.apache.org/routes.html" rel="nofollow">integration routes</a> with the <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a> programming language. It is more than a mere usage of Camel's domain-specific language (internal DSL or fluent API) inside Groovy: Camel's native DSL <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-PredefinedDSLextensions">has been extended</a> to support e.g. the usage of closures (for inline definitions of message processors, routing rules etc.) and also provides a <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a> to define custom extensions to the Camel DSL. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a> </td>
<td class="confluenceTd"> The DSL extension mechanism is a Groovy meta-programming-based mechanism for defining new DSL elements to be used in integration routes. This is especially useful if you want to provide custom language elements for re-occurring message processing patterns or if you want to design a project-specific message processing DSL (e.g. one that is related to the HL7 domain). </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extensions+index" title="IPF extensions index">DSL extension index</a> </td>
<td class="confluenceTd"> An index of all <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-PredefinedDSLextensions">predefined DSL extensions</a> provided by IPF. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features" title="Core features">Core features</a> </td>
<td class="confluenceTd"> These are domain-neutral message processors and DSL extensions usable for general-purpose message processing. The core features also enhance existing Camel DSL elements for usage with Groovy-specific language elements such as <a href="http://groovy.codehaus.org/Closures" rel="nofollow">closures</a>. For <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensionsforGroovyXMLprocessing">XML message processing</a> there is special Groovy XML support. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing" title="HL7 processing">HL7 message processing</a> </td>
<td class="confluenceTd"> Basis for HL7 message processing is the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a>, the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+extensions" title="HAPI extensions">HAPI extensions</a> and the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+validation" title="HL7 validation">HL7 validation DSL</a>. These provides the basis for implementing <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-DSLextensions">HL7 message processing routes</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IHE+Support+aggregator+page" title="IHE Support aggregator page">IHE Support aggregator page</a></td>
<td class="confluenceTd"> A set of components for creating actor interfaces as specified in IHE profiles. IPF currently supports creation of actor interfaces for the IHE profiles XDS.a, XDS.b, PIX and PDQ.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/CDA+support" title="CDA support">CDA support</a></td>
<td class="confluenceTd"> A domain-specific language for building and navigating CDA documents. This DSL supports the creation of structurally correct CDA documents by enforcing CDA-relevant schema definitions but without dealing with low-level XML details.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">Flow management</a> </td>
<td class="confluenceTd"> A platform service to monitor, query, audit, replay and <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+removal" title="Flow removal">cleanup</a> message flows. The management interfaces are based on JMX.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support" title="OSGi support">OSGi support</a> </td>
<td class="confluenceTd"> Enables the deployment of IPF components (bundles) to OSGi platforms. IPF <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support#OSGisupport-Servicebundles">service bundles</a> register platform services at the OSGi service registry for consumption by IPF applications. <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support#OSGisupport-Extenderbundles">Extender bundles</a> control the activation of DSL extensions inside an OSGi environment. A reference implementation of IPF on top of Eclipse Equinox is available as <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support#OSGisupport-Downloadandinstallation">IPF runtime</a> in the <a href="http://repo.openehealth.org/confluence/display/ipftools/Home" title="Home">IPF Tools project</a>. This project also maintains the complete <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Runtime" title="IPF Runtime">IPF OSGi documentation</a>.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Event+infrastructure" title="Event infrastructure">Event infrastructure</a> </td>
<td class="confluenceTd"> An infrastructure for unified publishing of system-events and application-events. Subscriber components can be configured to translate application events to e.g. Atom/RSS feeds or log files to mention a few. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Performance+measurement" title="Performance measurement">Performance measurement</a> </td>
<td class="confluenceTd"> DSL and tools to determine the performance characteristics of IPF applications. These allow for measuring the processing time of messages for routes or route parts as well as the message throughput. Performance measurement results can be viewed with a web browser.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support" title="Large binary support">Large message support</a> </td>
<td class="confluenceTd"> Provides memory efficient processing of messages with large content sizes. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Quality+of+service" title="Quality of service">Quality of service</a> </td>
<td class="confluenceTd"> IPF provides extensions, guidance and solution blueprints (code examples) for implementing non-functional requirements. Covered topics are <a href="http://repo.openehealth.org/confluence/display/ipf2/Quality+of+service#Qualityofservice-Transactionalmessaging">transactional messaging</a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a>, load-balaning and high-availability. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Moduleadapters">Module adapters</a> </td>
<td class="confluenceTd"> An infrastructure for including platform-independent message processing libraries into platform-specific message processing routes. An alternative is Camel's <a href="http://activemq.apache.org/camel/bean-integration.html" rel="nofollow">bean integration</a> mechanism. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Tutorials" title="IPF Tutorials">Tutorials</a> </td>
<td class="confluenceTd"> A bunch of tutorials that help you get started with IPF. </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Guidelines" title="IPF Guidelines">Guidelines</a> </td>
<td class="confluenceTd"> Guidelines for IPF application development. For example, the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Guidelines#IPFGuidelines-DSLextensionsguide">DSL extensions guide</a> describes how to write you own DSL extensions.</td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">Project templates</a> </td>
<td class="confluenceTd"> Maven archetypes for most commonly used IPF project types, ranging from simple embedded integration solutions to cluster configurations supporting high-availability scenarios. Usage examples of IPF features are provided as well. </td>
</tr>
</tbody></table>

<h2><a name="IPFreference-single-IPFcoderepositories"></a>IPF code repositories</h2>

<p>The code repository of the IPF main project is located at</p>

<ul>
	<li><a href="http://github.com/krasserm/ipf" rel="nofollow">http://github.com/krasserm/ipf</a></li>
</ul>


<p>The code repositories of the IPF subprojects are located at </p>

<ul>
	<li><a href="http://github.com/krasserm/ipf-tools" rel="nofollow">http://github.com/krasserm/ipf-tools</a></li>
	<li><a href="http://github.com/krasserm/ipf-runtime" rel="nofollow">http://github.com/krasserm/ipf-runtime</a></li>
	<li><a href="http://github.com/krasserm/ipf-labs" rel="nofollow">http://github.com/krasserm/ipf-labs</a></li>
</ul>


<p><a name="IPFreference-single-IPFsubprojects"></a></p>
<h2><a name="IPFreference-single-IPFsubprojects"></a>IPF subprojects</h2>

<p>Since version 2.0 of IPF several existing components as well as newly developed components have been moved to IPF subprojects. There are currently two IPF subprojects which are described in the following subsections.</p>

<h3><a name="IPFreference-single-IPFTools"></a>IPF Tools</h3>

<p>This project provides Eclipse-based development, administration and monitoring tools for the <a href="http://repo.openehealth.org/confluence/display/ipf2/Home" title="Home">Open eHealth Integration Platform</a>.</p>

<ul>
	<li>The development tools support developers in creating, testing and packaging IPF applications within the Eclipse plugin development environment (PDE). IPF applications created with these tools can be deployed and operated on OSGi R4.1 platforms. Part of the development tools is the IPF Runtime - the OSGi edition of IPF.</li>
	<li>The administration and monitoring tools are Eclipse plugins for managing IPF platform and application resources. Examples are JMX-based system management clients or the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF platform manager</a>.</li>
</ul>


<p>Links:</p>

<ul>
	<li><a href="http://github.com/krasserm/ipf-tools" rel="nofollow">Repository</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager Wiki</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+IDE" title="IPF IDE">IPF IDE Wiki</a></li>
</ul>


<h3><a name="IPFreference-single-IPFRuntime"></a>IPF Runtime</h3>

<ul>
	<li>The IPF Runtime project provides an OSGi-based runtime environment for IPF applications. The IPF Runtime is an IPF distribution that is running on the Equinox OSGi platform. Find out more in the IPF Runtime Wiki.</li>
</ul>


<p>Links:</p>

<ul>
	<li><a href="http://github.com/krasserm/ipf-runtime" rel="nofollow">Repository</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Runtime" title="IPF Runtime">IPF Manager Wiki</a></li>
</ul>


<h3><a name="IPFreference-single-IPFLab"></a>IPF Lab</h3>

<p>This project is the incubation area for the projects <a href="http://repo.openehealth.org/confluence/display/ipf2/Home" title="Home">Open eHealth Integration Platform</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFTools">Open eHealth Integration Platform Tools</a>. Contributions of new features from the IPF community will be mainly done in this project. New features may come from existing IPF applications or are developed from scratch directly in the IPF Lab. This project also hosts components from current research activities such as integrating IPF into cloud-computing environments or into different web application frameworks. </p>

<p>Links:</p>

<ul>
	<li><a href="http://github.com/krasserm/ipf-labs" rel="nofollow">Repository</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipflab/Home" title="Home">IPF Manager Wiki</a></li>
</ul>


<p><a name="IPFreference-single-IPFarchitecture"></a></p>
<h2><a name="IPFreference-single-IPFarchitecture"></a>IPF architecture</h2>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>IPF architecture in OSGi environments described elsewhere</b><br><p>IPF's architecture in OSGi environments is described in the <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-Architecture">architecture</a> section of the <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support" title="OSGi support">OSGi support</a> page. It complements the information presented here.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-Componentarchitecture"></a>Component architecture</h3>

<p>The following figure gives an overview of the IPF components, their dependencies and their namespaces (abbreviated package names). The components of the <tt>ihe</tt> subpackages (white color) are shown in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IHEcomponents">next section</a>. The <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Namespaceandcomponentdescriptions">last subsection</a> describes the namespaces and components in more detail. The component names match the <tt>jar</tt> file names in the <a href="http://repo.openehealth.org/maven2/" rel="nofollow">Maven repository</a>. The IPF component architecture is also closely related to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Structure">project structure</a> in the code repository.</p>

<p><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Namespaceandcomponentdescriptions"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/component-architecture-ipf.jpg" align="absmiddle" border="0"></a></p>

<h4><a name="IPFreference-single-IHEcomponents"></a>IHE components</h4>

<p>The next figure shows the IPF IHE components. The Camel-independent components are contained in the <tt>ipf.commons.ihe</tt> package, Camel-specific IHE components are contained in the <tt>ipf.platform-camel.ihe</tt> package. IPF IHE components can be used to implement actor interfaces of IHE transactions. The transaction numbers (<tt>ITI</tt>) contained in the component name correspond to the transaction numbers in IHE specifications.</p>

<p><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Namespaceandcomponentdescriptions"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/component-architecture-ipf-ihe.jpg" align="absmiddle" border="0"></a></p>

<h4><a name="IPFreference-single-IPFandOSGi"></a>IPF and OSGi</h4>

<p>All IPF components have been designed to run on an OSGi R4 version 4.1 platform. The <tt>osgi</tt> package additionally containes specialized OSGi bundles such as <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-Extenderbundles">extender bundles</a> and configuration fragments (not shown). For a detailed description about IPF and OSGi refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support" title="OSGi support">OSGi support</a> section.</p>

<h4><a name="IPFreference-single-Namespaceandcomponentdescriptions"></a>Namespace and component descriptions</h4>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Namespace </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons</tt> </td>
<td class="confluenceTd"> Namespace for commonly used libraries. Components in this namespace are independent of Apache Camel and have no dependencies to <tt>platform-camel</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>modules</tt> </td>
<td class="confluenceTd"> Namespace for domain-specific (e.g. HL7) libraries and message processing components. Components in this namespace are independent of Apache Camel and have no dependencies to <tt>platform-camel</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi</tt> </td>
<td class="confluenceTd"> Namespace for IPF OSGi infrastructure and configuration bundles. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel</tt> </td>
<td class="confluenceTd"> Namespace for extensions to the <a href="http://activemq.apache.org/camel" rel="nofollow">Apache Camel</a> routing and mediation engine. These extensions together with Apache Camel are referred to as the Open eHealth Integration Platform (IPF) from a technical viewpoint. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Tutorials" title="IPF Tutorials">tutorials</a></tt> </td>
<td class="confluenceTd"> Namespace for tutorials demonstrating the features of the Open eHealth IPF (not shown in any of the figures). </td>
</tr>
<tr>
<td class="confluenceTd"> <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">archetypes</a></tt> </td>
<td class="confluenceTd"> Namespace for IPF project archetypes (not shown in any of the figures). </td>
</tr>
</tbody></table>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Component </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-core</tt> </td>
<td class="confluenceTd"> A library that defines the common message processing API to be implemented by components contained in the <tt>modules</tt> folder. <tt>platform-camel</tt> provides special integration points for components implementing this common API. The API was defined for implementing message processing components independent of a certain integration infrastructure like Apache Camel. This increases their re-usability and allows applications to implement light-weight message processing functionality without implementing an integration platform or enterprise service bus. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-flow</tt> </td>
<td class="confluenceTd"> A library implementing the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a> services. It is used to monitor, query, audit and replay message flows. The management interfaces are based on JMX. An integration into Apache Camel is provided by <tt>platform-camel-flow</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-ihe-atna</tt> </td>
<td class="confluenceTd"> A library used by other IPF IHE components to implement IHE ATNA. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-ihe-xds-*</tt> </td>
<td class="confluenceTd"> Libraries used to implements IHE XDS.a and XDS.b actor interfaces. The libraries are Camel-independent</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-map</tt> </td>
<td class="confluenceTd"> A code-mapping library. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-lbs</tt> </td>
<td class="confluenceTd"> A library providing storage for large binaries and <tt>javax.activation.DataSource</tt> implementations to represent stored binaries. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-event</tt> </td>
<td class="confluenceTd"> A library containing the Camel independent functionality of the <a href="http://repo.openehealth.org/confluence/display/ipf2/Event+infrastructure" title="Event infrastructure">Event infrastructure</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-test</tt> </td>
<td class="confluenceTd"> A library providing support for HTTP-based integration and performance tests. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>commons-xml</tt> </td>
<td class="confluenceTd"> An XML library with focus on <a href="http://www.schematron.com/" rel="nofollow">Schematron</a> validation. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/Generic+CDA+Support" title="Generic CDA Support">modules-cda</a></tt> </td>
<td class="confluenceTd"> A library for creating, parsing, navigating and rendering CDA documents. Also includes support for several CDA profiles.</td>
</tr>
<tr>
<td class="confluenceTd"> <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+extensions" title="HAPI extensions">modules-hl7</a></tt> </td>
<td class="confluenceTd"> A library that implements extensions to the <a href="http://hl7api.sourceforge.net/" rel="nofollow">HAPI</a> library. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">modules-hl7dsl</a></tt> </td>
<td class="confluenceTd"> A library that implements a DSL for manipulating <a href="http://hl7api.sourceforge.net/" rel="nofollow">HAPI</a> messages. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-commons</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-extender-basic</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-extender-spring</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-config-log</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-config-jms</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-config-flow-repository</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>osgi-config-flow-manager</tt> </td>
<td class="confluenceTd"> See <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-ipfbundletable">IPF bundle overview</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-core</tt> </td>
<td class="confluenceTd"> A component that is required by most other <tt>platform-camel</tt> component. It provides:
<ul>
	<li>Groovy-based <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">scripting layer</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensions">Core DSL extensions</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Moduleadapters">Adapters</a> to the <tt>commons-core</tt> modules API.</li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-flow</tt> </td>
<td class="confluenceTd"> A component that implements a <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management#Flowmanagement-DSLextensions">flow management DSL</a> for integrating <tt>commons-flow</tt> into Camel routes. The DSL was built with the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-event</tt> </td>
<td class="confluenceTd"> A component offering the <a href="http://repo.openehealth.org/confluence/display/ipf2/Event+infrastructure#Eventinfrastructure-EventpublishingviatheDSL">DSL extensions of the event infrastructure</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-hl7</tt> </td>
<td class="confluenceTd"> A component that implements an <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-DSLextensions">HL7 message processing DSL</a> for integrating <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+extensions" title="HAPI extensions">modules-hl7</a></tt> and <tt><a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">modules-hl7dsl</a></tt> into Camel routes. The DSL was built with the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-lbs-core</tt> </td>
<td class="confluenceTd"> A component offering the <a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support#Largebinarysupport-DSLextensions">DSL extensions of the large binary support mechanism</a> as well as the interface to adapt various endpoint technologies to the LBS. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-lbs-cxf</tt> </td>
<td class="confluenceTd"> A component with adaptor implementations for using CXF endpoints with the large binary support. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-lbs-http</tt> </td>
<td class="confluenceTd"> A component with adaptor implementations for using HTTP/Jetty endpoints with the large binary support. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-lbs-mina</tt> </td>
<td class="confluenceTd"> A component with adaptor implementations for using MINA/HL7 endpoints with the large binary support. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-ihe-mllp-*</tt> </td>
<td class="confluenceTd"> Provides MLLP-related functionality used by IPF PIX and PDQ components.</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-ihe-pix-*</tt> </td>
<td class="confluenceTd"> Components to implement actor interfaces of IHE PIX transactions. See <a href="http://repo.openehealth.org/confluence/display/ipf2/IHE+Support+aggregator+page" title="IHE Support aggregator page">IHE Support aggregator page</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-ihe-pdq-*</tt> </td>
<td class="confluenceTd"> Components to implement actor interfaces of IHE PDQ transactions. See <a href="http://repo.openehealth.org/confluence/display/ipf2/IHE+Support+aggregator+page" title="IHE Support aggregator page">IHE Support aggregator page</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-ihe-xds-*</tt> </td>
<td class="confluenceTd"> Components to implement actor interfaces of IHE XDS.a and XDS.b transactions. See <a href="http://repo.openehealth.org/confluence/display/ipf2/IHE+Support+aggregator+page" title="IHE Support aggregator page">IHE Support aggregator page</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-test</tt> </td>
<td class="confluenceTd"> A component for measuring the performance characteristics of IPF applications. It provides DSL extensions used to measure processing time of messages (for route parts and whole routes) and the message throughput. Performance measurement reports can be created as well.</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-basic</tt> </td>
<td class="confluenceTd"> A <em>Hello World</em>-level tutorial for getting started with <tt>platform-camel</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-flow</tt> </td>
<td class="confluenceTd"> A tutorial demonstrating IPF flow management features. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-hl7</tt> </td>
<td class="confluenceTd"> A tutorial demonstrating HL7 message processing features. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-lbs</tt> </td>
<td class="confluenceTd"> A tutorial demonstrating the use of the LBS with CXF and HTTP endpoints. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-osgi-*</tt> </td>
<td class="confluenceTd"> A tutorial demonstrating how to write IPF OSGi applications. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-ref</tt> </td>
<td class="confluenceTd"> A complete reference application that may be used as blueprint for production-ready IPF applications. The reference application is a comprehensive demonstration of IPF features.</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>tutorials-xds</tt> </td>
<td class="confluenceTd"> A tutorial that demonstrates how to use IPF XDS components. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>ipf-archetype-*</tt> </td>
<td class="confluenceTd"> Archetypes for creating IPF integration projects with a ready-to-use Maven 2 and Eclipse configuration plus an example route and unit tests.</td>
</tr>
</tbody></table>
<p><a name="IPFreference-single-scriptinglayer"></a></p>
<h1><a name="IPFreference-single-Scriptinglayer"></a>Scripting layer</h1>

<p>IPF message processing routes are written with a domain-specific language (DSL) which is based on the Apache Camel DSL. Any DSL feature from Apache Camel is also available within IPF. One important design goal of IPF was to provide healthcare-specific message processing capabilities as extensions to the Camel DSL. For example, implementing an HL7 message validator should be as easy as implementing a XSD validator. To make DSL extensions possible IPF provides a <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionmechanism">DSL extension mechanism</a> which is based on <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a> <a href="http://groovy.codehaus.org/Dynamic+Groovy" rel="nofollow">meta-programming</a>. A meta-programming based approach was chosen because Camel currently doesn't provide an interface for extending its DSL. Consequently, for using the IPF DSL (i.e. the Camel DSL plus IPF DSL extensions) message processing routes must be written in the Groovy programming language. This doesn't mean that all parts of your program must be written in Groovy e.g. custom message transformers can still be implemented in Java (or any other JVM language). It is only important that <a href="http://camel.apache.org/routes.html" rel="nofollow">route definitions</a> (i.e the route builder) are written in Groovy.</p>

<p>All <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-PredefinedDSLextensions">predefined DSL extensions</a> provided by IPF have been implemented using this extensions mechansim. One important aspect of the extension mechanism is that it can also be used by IPF application to implement application-specific DSL extensions. There is a separate <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Guidelines#IPFGuidelines-DSLextensionsguide">DSL extensions guide</a> that explains how to. This makes application-specific message processing routes more readable and allows other projects to reuse these extensions. DSL extensions may also be based on other DSL extensions i.e. composition of DSL extensions is supported as well. </p>

<p>The DSL extension mechanism including all DSL extensions contributed by individual IPF components are referred to as the IPF scripting layer. The feature set of the IPF DSL therefore depends on which IPF components have been deployed. In other words, the DSL extension mechanism supports <b>modularization of DSL extensions</b>. An overview of all predefined IPF DSL extensions is given in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extensions+index" title="IPF extensions index">IPF extensions index</a>. The following subsection exaplains the DSL extension mechanism in more detail. </p>

<h2><a name="IPFreference-single-DSLextensionmechanism"></a>DSL extension mechanism</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>DSL extensions guide and tutorials</b><br><p>The example presented here is explained in much more detail in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Guidelines#IPFGuidelines-DSLextensionsguide">DSL extensions guide</a>. Furthermore, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Tutorials" title="IPF Tutorials">all tutorials</a> make use of the DSL extension mechanism and the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-PredefinedDSLextensions">predefined DSL extensions</a>.</p></td></tr></tbody></table></div>

<p>The easiest way to learn the DSL extension mechanism is to start with a simple example. Let's say we want to introduce a new <tt>translate</tt> DSL element that translates a message from one language into another. To keep the examle simple we assume that the translation magic is done inside a single <tt>Translator</tt> processor.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Translator.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example;

<span class="code-keyword">import</span> org.apache.camel.Exchange;
<span class="code-keyword">import</span> org.apache.camel.Processor;

<span class="code-keyword">public</span> class Translator <span class="code-keyword">implements</span> Processor {

    <span class="code-keyword">public</span> void process(Exchange exchange) <span class="code-keyword">throws</span> Exception {
        <span class="code-comment">// <span class="code-keyword">do</span> language translation here ...
</span>    }

}
</pre>
</div></div>

<p>Without using DSL extensions such a processor can be included into route definitions like in the following example.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('direct:input')
        .process(<span class="code-keyword">new</span> Translator())
        .to('direct:output')

    }

}
</pre>
</div></div>

<p>The goal however is to introduce a <tt>translate</tt> DSL extension that makes use of this processor. The result should look like.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('direct:input')
        .translate()
        .to('direct:output')

    }

}
</pre>
</div></div>

<p>To be able to use the <tt>translate()</tt> method in our route definitions we need to add that method into the corresponding DSL model class which is <tt>org.apache.camel.model.ProcessorDefinition</tt> in our example. Adding the method is done via Groovy meta-programming inside an <tt>extensions</tt> block.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.model.ProcessorDefinition

class MyExtension {

    <span class="code-keyword">static</span> extensions = {

        ProcessorDefinition.metaClass.translate = {-&gt;
            delegate.process(<span class="code-keyword">new</span> Translator())
        }

    }

}
</pre>
</div></div>

<p>You can add an <tt>extensions</tt> block to any class you like. To make the example work, the DSL extension, the route builder and the infrastructure components of the DSL extension mechanism must be wired together within a Spring application context.</p>

<p><a name="IPFreference-single-extensionconfiguration"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>        
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>
    
    &lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"example.MyRouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>
    
    &lt;bean id=<span class="code-quote">"exampleModelExtension"</span>
        class=<span class="code-quote">"example.MyExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>
    
    &lt;bean id=<span class="code-quote">"coreModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>
    
    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"exampleModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>The above example also shows how to include the predefined DSL extensions provided by <tt>platform-camel-core</tt>. Please note that this is <b>not</b> required to make our example work. It's only an example how to combine predefined DSL extensions with custom DSL extensions.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>DSL extensions and OSGi</b><br><p>In an OSGi environment DSL extensions are automatically detected by IPF-specific <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support#OSGisupport-Extenderbundles">extender bundles</a>, so there is no need to add them to a Spring application context.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-Limitations"></a>Limitations</h3>

<p>There are some limitations you should be aware of when using the IPF extension mechanism. DSL extensions defined in Groovy are not available for Camel's <a href="http://camel.apache.org/dsl.html" rel="nofollow">Java DSL</a> or for the <a href="http://camel.apache.org/xml-configuration.html" rel="nofollow">Spring-based XML configuration</a>. Also, DSL extensions currently do not show up for code completion in IDEs such as the Groovy plugins for <a href="http://www.eclipse.org/" rel="nofollow">Eclipse</a> or <a href="http://www.jetbrains.com/idea/" rel="nofollow">IntelliJ IDEA</a>. However, we are currently working on a solution for the code-completion problem. </p>

<h2><a name="IPFreference-single-PredefinedDSLextensions"></a>Predefined DSL extensions</h2>

<p>Predefined DSL extensions are provided by the following IPF components.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Component </th>
<th class="confluenceTh"> Extension class </th>
<th class="confluenceTh"> Documentation </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-core</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensions">Core features DSL</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-flow</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.flow.extend.FlowModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management#Flowmanagement-DSLextensions">Flow management DSL</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-hl7</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.hl7.extend.Hl7ModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-DSLextensions">HL7 processing DSL</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-lbs</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.lbs.core.extend.LbsModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support#Largebinarysupport-DSLextensions">LBS processing DSL</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-event</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.event.extend.EventModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Event+infrastructure#Eventinfrastructure-DSLextensions">Event processing DSL</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-ihe-xds</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.ihe.xds.core.extend.XDSModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IHE+Support+aggregator+page" title="IHE Support aggregator page">IHE Support aggregator page</a> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-camel-test</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.test.performance.extend.PerformanceModelExtension</tt> </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Performance+measurement" title="Performance measurement">Performance measurement</a> </td>
</tr>
</tbody></table>

<p>A description of these components is given on the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Architecture#IPFArchitecture-Namespaceandcomponentdescriptions">IPF architecture</a> page. For a detailed description of the extensions follow the links in the <em>Documentation</em> column. The <em>extension classes</em> can be combined as shown in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-extensionconfiguration">configuration example</a> above.</p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>DSL extensions index</b><br><p>A summary of all predefined DSL extensions is given in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extensions+index" title="IPF extensions index">DSL extensions index</a>.</p></td></tr></tbody></table></div>
<h1><a name="IPFreference-single-Corefeatures"></a>Core features</h1>

<p>The content of this page describes the features provided by the <tt>platform-camel-core</tt> component. These are the the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Moduleadapters">module adapters</a> and the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensions">core DSL extensions</a>. For an overview how <tt>platform-camel-core</tt> fits into its architectural context refer to the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Architecture" title="IPF Architecture">architecture page</a>.</p>

<p><a name="IPFreference-single-moduleadapters"></a></p>
<h2><a name="IPFreference-single-Moduleadapters"></a>Module adapters</h2>

<p>Module adapters integrate components of the <tt>modules</tt> (and partly the <tt>commons</tt>) <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Architecture#IPFArchitecture-Namespaceandcomponentdescriptions">namespace</a> into Camel routes. Components defined in these namespaces implement interfaces defined in the <tt>org.openehealth.ipf.commons.core.modules.api</tt> package which is part of the <tt>commons-core</tt> component. These interfaces represent message processors like <tt>Validator</tt>, <tt>Aggregator</tt> or <tt>Transmogrifer</tt> (a transformer), to mention a few. The intention of these interfaces was to define message processors that are independent of integration infrastructures like Apache Camel in order to increase their reusability in other contexts. The integration of these message processors into IPF routes is done via generic module adapters. They translate from Camel-specific interfaces to <tt>org.openehealth.ipf.commons.core.modules.api.*</tt> interfaces and are provided by the <tt>platform-camel-core</tt> component. The following UML diagram gives an overview (some of the relevant interfaces and adapters have been omitted). For details how to use module adapters in IPF routes refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforIPFmoduleadapters">DSL extensions for IPF module adapters</a> section.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/adapters.jpg" align="absmiddle" border="0"></p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Module adapter alternatives</b><br><p>An alternative to module adapters is Camel's <a href="http://activemq.apache.org/camel/bean-integration.html" rel="nofollow">bean integration</a> mechanism.</p></td></tr></tbody></table></div>

<h2><a name="IPFreference-single-DSLextensions"></a>DSL extensions</h2>

<h3><a name="IPFreference-single-DSLextensionforexistingCamelfeatures"></a>DSL extension for existing Camel features</h3>

<h4><a name="IPFreference-single-Closuresupport"></a>Closure support</h4>

<p>Several Camel DSL elements have been extended to accept closures as arguments. For example, the following processor closure reverses the string contained in the input message body.</p>

<p><a name="IPFreference-single-processclosure"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'processor' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .process {exchange -&gt;
        exchange.in.body = exchange.in.body.reverse()
    }
    .to('mock:output')
</pre>
</div></div>
<p>The closure parameter is the <tt>org.apache.camel.Exchange</tt> to be processed. </p>

<p><a name="IPFreference-single-filterclosure"></a><br>
A filter closure is a closure that evaluates an <tt>org.apache.camel.Exchange</tt> and returns either <tt>true</tt> or <tt>false</tt> i.e. a filter closure is a predicate:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'filter' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .filter {exchange -&gt;
        exchange.in.body == 'blah'
    }
    .to('mock:output')
</pre>
</div></div>
<p>Here, the filter closure returns <tt>true</tt> if the in-message body equals <tt>'blah'</tt>. If <tt>true</tt> is returned the filter forwards the message to the next processor, otherwise, the message is filtered out.</p>

<p><a name="IPFreference-single-setHeaderclosure"></a><br>
Closures can also be used for setting message headers. In the following example the <tt>foo</tt>-header is assigned the in-message's body.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'setHeader' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .setHeader('foo') {exchange -&gt;
        exchange.in.body
    }
    .to('mock:output')
</pre>
</div></div>
<p>The header name is given as first <tt>setHeader</tt> argument. The header value is the return value of the closure. You can also use closures with <tt>setOutHeader</tt> and <tt>setFaultHeader</tt>. </p>

<p><a name="IPFreference-single-setPropertyclosure"></a><br>
To set an exchange property you can use a <tt>setProperty</tt>-closure.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'setProperty' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .setProperty('foo') {exchange -&gt;
        exchange.in.body
    }
    .to('mock:output')
</pre>
</div></div>

<p><a name="IPFreference-single-setBodyclosure"></a><br>
You can also set the in-message body with a closure. In the following example the in-message body is set to the value of the in-message <tt>foo</tt>-header.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'setBody' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .setBody {exchange -&gt;
        exchange.in.headers.foo
    }
    .to('mock:output')
</pre>
</div></div>

<p><a name="IPFreference-single-transformclosure"></a><br>
The <tt>transform</tt> DSL element also supports expression closures. For example, to reverse a string contained in the in-message body and write the result to the out-message body use:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transform' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .transform {exchange -&gt;
        exchange.in.body.reverse()
    }
</pre>
</div></div>

<p><a name="IPFreference-single-whenclosure"></a><br>
Closure support was also added for content-based routing:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'when' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .choice()
    .when { it.in.body == 'a'}
        .to('mock:output1')
    .when { it.in.body == 'b'}
        .to('mock:output2')
</pre>
</div></div>
<p><tt>when</tt>-closures implement routing decisions and return either <tt>true</tt> or <tt>false</tt>. In our example: If the in-message body equals <tt>a</tt> the message is forwarded to endpoint <tt>mock:endpoint1</tt>. If the in-message body equals <tt>b</tt> the message is forwarded to endpoint <tt>mock:endpoint2</tt>.</p>

<p><a name="IPFreference-single-onwhenclosure"></a><br>
The <tt>onWhen</tt> DSL element allows for finer-grained <a href="http://camel.apache.org/exception-clause.html" rel="nofollow">exception handling</a>. With IPF you can implement <tt>onWhen</tt> predicates with closures. The following example tries to match the in-message body with a regular expression.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'onWhen' closure</b></div><div class="codeContent panelContent">
<pre class="code-java">onException(Exception.class)
  .onWhen {it.in.body ==~ /u.w/}
  .to('direct:error')
</pre>
</div></div>

<h4><a name="IPFreference-single-Beanlookup"></a>Bean lookup</h4>

<p><a name="IPFreference-single-processbean"></a><br>
The <tt>process</tt> DSL element can also be used in combination with a bean name. The following route definition references a bean named <tt>sampleProcessor</tt> from the application context. The bean must implement the <tt>org.apache.camel.Processor</tt> interface. This is equivalent to Camel's <tt>processRef(String)</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Processor bean</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .process('sampleProcessor')
    .to('mock:output')
</pre>
</div></div>

<h4><a name="IPFreference-single-Errorhandler"></a>Error handler</h4>

<p><a name="IPFreference-single-unhandled"></a><br>
Another convenience DSL extension provided by IPF is the <tt>unhandled</tt> DSL element. It replaces the verbose <tt>errorHandler(noErrorHandler())</tt> statement in route definitions i.e. it drops the error handler from a route.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'unhandled' extension</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .unhandled()
    <span class="code-comment">// further processing here ...
</span>    .to('mock:output')
</pre>
</div></div>
<p>The <tt>unhandled</tt> extension currently cannot be used globally for all routes i.e. a <tt>builder.unhandled()</tt> call is not supported yet.</p>

<h4><a name="IPFreference-single-Interceptor"></a>Interceptor</h4>

<p>Camel's 1.x support for the <tt>intercept</tt> DSL element has been removed in Camel 2.0. For backwards compatibility-reasons, IPF re-introduces <tt>intercept</tt> as DSL extension. Valid argument types are <tt>org.apache.camel.DelegateProcessor</tt> and <tt>groovy.lang.Closure</tt>.</p>

<p><a name="IPFreference-single-interceptdelegateprocessor"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'intercept' extension using a delegate processor</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .intercept(<span class="code-keyword">new</span> MyDelegateProcessor())
    .to('mock:output')
</pre>
</div></div>

<p><a name="IPFreference-single-interceptclosure"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'intercept' extension using a closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .intercept {exchange, next -&gt;
        <span class="code-comment">// <span class="code-keyword">do</span> some pre-processing work
</span>        <span class="code-comment">// ...
</span>
        <span class="code-comment">// proceed with the next processor
</span>        next.proceed(exchange)

        <span class="code-comment">// <span class="code-keyword">do</span> some post-processing work ...
</span>        <span class="code-comment">// ...
</span>    }
    .to('mock:output')
</pre>
</div></div>

<p>The <tt>intercept</tt> closure is passed a second argument (called <tt>next</tt> in our example) on which the <tt>proceed()</tt> method must be called. This method continues processing with the next processor and returns after down-stream processing has been done.</p>

<p><a name="IPFreference-single-interceptbean"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'intercept' extension using a bean</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .intercept('InterceptorBean')
    .to('mock:output')
</pre>
</div></div>

<p>The bean must implement the interface <tt>org.openehealth.ipf.platform.camel.core.process.Interceptor</tt>, e.g.:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'Implementation of an interceptor'</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.apache.camel.Exchange;
<span class="code-keyword">import</span> org.apache.camel.Processor;

<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.core.process.Interceptor;

<span class="code-keyword">public</span> class MyInterceptor <span class="code-keyword">implements</span> Interceptor {
    @Override
    <span class="code-keyword">public</span> void process(Exchange exchange, Processor next) <span class="code-keyword">throws</span> Exception {
        exchange.getIn().setBody(<span class="code-quote">"before"</span>);        <span class="code-comment">// Do something before
</span>        next.process(exchange);                    <span class="code-comment">// Call the intercepted processor
</span>        exchange.getOut().setBody(<span class="code-quote">"after"</span>);        <span class="code-comment">// Do something afterwards
</span>    }
}
</pre>
</div></div>

<h3><a name="IPFreference-single-DSLextensionsfor%7B%7BExpressionClause%7D%7D"></a>DSL extensions for <tt>ExpressionClause</tt></h3>

<h4><a name="IPFreference-single-Exceptionobjectsandmessages"></a>Exception objects and messages</h4>

<p>The model class <tt>org.apache.camel.builder.ExpressionClause</tt> has been extended with expressions to access the exception object or the exception message of an exchange. The corresponding DSL extensions are <tt>exceptionMessage</tt> and <tt>exceptionObject</tt>. For example,</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'exceptionMessage' extension</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .onException(ValidationException.class).setBody().exceptionMessage().to('mock:error').end()
    <span class="code-comment">// ... ValidationException thrown here ...
</span>    .to('mock:output')
</pre>
</div></div>

<p>sets the detail message of the <tt>ValidationException</tt> (obtained via <tt>ValidationException.getMessage</tt>) to the in-message body of the exchange. This extensions is particularly useful in exception routes because there you don't have access to the exception object via <tt>Exchange.getException()</tt>. In the next example we set the exception object on a custom header.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'exceptionObject' extension</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
   .onException(ValidationException.class).setHeader('foo').exceptionObject().to('mock:error').end()
    <span class="code-comment">// ... ValidationException thrown here ...
</span>    .to('mock:output')
</pre>
</div></div>

<p>Here, the in-message that arrives at <tt>mock:error</tt> has a <tt>foo</tt> header with the <tt>ValidationException</tt> object.</p>

<h3><a name="IPFreference-single-DSLextensionsforcustomIPFprocessors"></a>DSL extensions for custom IPF processors</h3>

<p>IPF provides message processors that have been developed on top of Apache Camel. Initially, they were included into route definitions via the default extension points provided by Camel (e.g. the <tt>org.apache.camel.Processor</tt> or <tt>org.apache.camel.Predicate</tt> interfaces). With the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">IPF scripting layer</a>, they are now available as first-class DSL elements. This section presents those DSL extensions that are independent of the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ModuleAdapters">IPF module adapters</a>. The <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforIPFmoduleadapters">next section</a> is about module-adapter-related DSL extensions.</p>

<h4><a name="IPFreference-single-Contentenrichment"></a>Content enrichment</h4>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Content enricher contributed to Camel</b><br><p>The IPF content enricher has been <a href="https://issues.apache.org/activemq/browse/CAMEL-209" rel="nofollow">contributed to Camel</a> and is available there since version 2.0-m1. We will drop the content enricher from the IPF code base as soon as we upgraded to Camel 2.0. However, we will continue to support merge closures (see below). The contributed content enricher is also <a href="http://camel.apache.org/content-enricher.html" rel="nofollow">documented in the Camel Wiki</a>.</p></td></tr></tbody></table></div>

<p>The content enricher creates an additional message exchange from the original exchange for communicating with a so-called resource endpoint. This endpoint is used to obtain additional data to enrich the original exchange. The response from the resource endpoint is merged into the original message exchange using a configurable merge logic. In the following example the merge logic is defined by a closure:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'enrich' extension using a merge closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .enrich('direct:resource') {originalExchange, resourceExchange -&gt;
        originalExchange.in.body += ':' + resourceExchange.out.body
        <span class="code-comment">// <span class="code-keyword">return</span> value is optional <span class="code-keyword">if</span> originalExchange
</span>        <span class="code-comment">// shall be returned as merge result, otherwise
</span>        <span class="code-comment">// it must be returned explicitly.
</span>        originalExchange
    }
    .to('mock:output')
</pre>
</div></div>

<p>In this example, the enricher obtains additional data from the <tt>direct:resource</tt> endpoint and passes the <tt>originalExchange</tt> and <tt>resourceExchange</tt> to a closure that merges data from the <tt>resourceExchange</tt> into <tt>originalExchange</tt>. The message exchange containing the merge result is returned by the closure. Returning an exchange is optional if the <tt>originalExchange</tt> object contains the merge result. Instead of providing merge logic via a closure you may also provide an <tt>org.apache.camel.processor.aggregate.AggregationStrategy</tt> instance.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'enrich' extension using an AggregationStrategy object</b></div><div class="codeContent panelContent">
<pre class="code-java">AggregationStrategy strategy = <span class="code-keyword">new</span> MyCleverAggregationStrategy()

from('direct:input')
    .enrich('direct:resource', strategy)
    .to('mock:output')
</pre>
</div></div>

<h4><a name="IPFreference-single-Validationprocess"></a>Validation process</h4>

<p>The <tt>validation</tt> DSL extension implements a simple validation process that delegates the actual message validation to a validator which can be an endpoint or an object that implements validation logic. If validation succeeds the message is forwarded to the next processor defined in the route, otherwise, the message is dropped. In both cases the response generated by the validator is returned to the sender of the original message exchange.</p>

<p><a name="IPFreference-single-validationendpoint"></a><br>
In the following example the validation process delegates message validation to the <tt>direct:validator</tt> endpoint.  If validation succeeds the message is forwarded as in-only exchange to <tt>mock:output</tt> otherwise it is dropped. The response returned from <tt>direct:validator</tt> is returned to the <tt>direct:input</tt> endpoint.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'validation' extension using an endpoint</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .validation('direct:validator')
    .to('mock:output')
</pre>
</div></div>
<p>The validation process interprets a message exchange as failed if any of the following conditions is true:</p>
<ul>
	<li>an exception was thrown</li>
	<li>the message exchange contains an exception</li>
	<li>the message exchange contains a fault message (i.e. an out message marked as fault)</li>
</ul>


<p><a name="IPFreference-single-validationclosure"></a><br>
Instead of providing an endpoint you may also provide validator logic using a closure.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'validation' extension using a closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    <span class="code-comment">// generate a 'success' validation response
</span>    .validation {exchange -&gt; exchange.out.body = 'success'}
    .to('mock:output')

from('direct:input2')
    <span class="code-comment">// generate a 'failure' validation fault
</span>    .validation {exchange -&gt; exchange.out.body = 'failed'; exchange.out.fault = <span class="code-keyword">true</span>}
    .to('mock:output')

from('direct:input3')
    <span class="code-comment">// <span class="code-keyword">throw</span> a validation exception
</span>    .validation {<span class="code-keyword">throw</span> <span class="code-keyword">new</span> ValidationException('input sucks in any <span class="code-keyword">case</span>')}
    .to('mock:output')
</pre>
</div></div>
<p><a name="IPFreference-single-validationprocessor"></a><br>
You may also provide an <tt>org.apache.camel.Processor</tt> instance for validation</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'validation' extension using a processor</b></div><div class="codeContent panelContent">
<pre class="code-java">Processor validator = <span class="code-keyword">new</span> MyFamousValidator()

from('direct:input')
    .validation(validator)
    .to('mock:output')
</pre>
</div></div>

<h4><a name="IPFreference-single-Splitter"></a>Splitter</h4>

<p>The <tt>Splitter</tt> is used to split a message into multiple messages. You specify a split rule that defines the way the splitting is performed. Each message generated by the Splitter is send to the next processor defined in the route. The results of this processing are aggregated into the original message using a configurable aggregation strategy.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>IPF and Camel splitters</b><br><p>The splitter implemented by IPF differs from Camel's splitter. To choose between these two implementation use <tt>.split()</tt> for Camel's splitter and <tt>ipf().split()</tt> for IPF's splitter.</p></td></tr></tbody></table></div>

<p><a name="IPFreference-single-splitclosure"></a><br>
The following shows a <tt>String</tt>-based example of the Splitter that splits a comma-separated string coming from <tt>direct:input</tt> and passes the parts on to the <tt>mock:output</tt> endpoint. If you send the body "hello,world,!" to <tt>direct:input</tt>, the <tt>mock:output</tt> will receive three messages with "hello", "world" and "!" in the body.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'split' extension using a closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input')
    .ipf().split { Exchange exchange -&gt; exchange.in.body.split(',') }
    .to('mock:output')
</pre>
</div></div>

<p><a name="IPFreference-single-splitexpression"></a><br>
The split rule can also be defined via <tt>org.apache.camel.Expression</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'split' extension using an expression</b></div><div class="codeContent panelContent">
<pre class="code-java">Expression splitExpression = <span class="code-keyword">new</span> MyCommaSplittingExpression()

from('direct:input')
    .split(splitExpression)
    .to('mock:output')
</pre>
</div></div>

<p>No matter how the split rule is defined, the aggregation of all results is by default performed using the <tt>UseLatestAggregationStrategy</tt>. This strategy simply uses the result of the last message generated by the split. In the above example, "!" is returned to the sender, because it is the last message that was split off.</p>

<p>You can specify a different strategy using <tt>aggregationStrategy</tt> after the <tt>split</tt> processor. The following example extends the previous one generating an output containing the parts reassembled and separated by a ':'. Therefore, the sender will get the result "hello:world:!".<br>
<a name="IPFreference-single-splitaggregate"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'split' extension using an explicit aggregation strategy</b></div><div class="codeContent panelContent">
<pre class="code-java">
from('direct:input')
    .ipf().split { Exchange exchange -&gt; exchange.in.body.split(',') }
    .aggregationStrategy { oldExchange, newExchange -&gt;
          <span class="code-object">String</span> oldContent = oldExchange.in.body
          <span class="code-object">String</span> newContent = newExchange.in.body
          Exchange aggregate = oldExchange.copy()
          aggregate.in.body = oldContent + <span class="code-quote">":"</span> + newContent
          aggregate
    }
    .to('mock:output')
</pre>
</div></div>
<p>The aggregation strategy is called only if the split resulted in multiple messages. If no messages were generated, the result is the original message. If only one message was split off, this message is used as the result. In the above example, the aggregation strategy is called twice with the following messages as parameters:</p>

<p>First call: oldExchange = "hello", newExchange = "world" -&gt; returns "hello:world"<br>
Second call: oldExchange = "hello:world", newExchange = "!" -&gt; returns "hello:world:!"</p>

<h3><a name="IPFreference-single-DSLextensionsforIPFmoduleadapters"></a>DSL extensions for IPF module adapters</h3>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>How this section is organized</b><br><p>This section is organized in the following way.</p>

<ul>
	<li>Detailed description of the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifier"><tt>transmogrify</tt></a> extension. Many concepts described here also apply to other module adapter extensions.</li>
	<li>Overview of the remaining module adapter extensions. This overview only covers topics that haven't been discussed for the <tt>transmogrify</tt> extension.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Adapterextensionsummary">Comprehensive summary</a> of all module adapter extensions. A complete reference for module adapter extensions in tabular form (without detailed examples).</li>
</ul>
</td></tr></tbody></table></div>

<h4><a name="IPFreference-single-Transmogrifier"></a>Transmogrifier</h4>

<p>The easiest way to describe the DSL extensions for IPF module adapters is to start with an example. Let's use the <tt>org.openehealth.ipf.commons.core.modules.api.Transmogrifier</tt> interface for that purpose. Inspired by <a href="http://en.wikipedia.org/wiki/Calvin_hobbes" rel="nofollow">Calvin and Hobbes</a>, a <a href="http://repo.openehealth.org/confluence/download/attachments/3211270/transmogrifier.png?version=1">transmogrifier</a> converts anything into whatever you like. Transmogrification is accompanied by a loud <em>zap</em>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Transmogrifier.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">interface</span> Transmogrifier&lt;S, T&gt; {

    T zap(S object, <span class="code-object">Object</span>... params);

}
</pre>
</div></div>

<p>Implementations of <tt>Transmogrifier</tt> are often used for message transformation. Transformation input is given by the <tt>object</tt> parameter and optionally some additional <tt>params</tt>. The transformation result is the return value of the <tt>zap</tt> method. To include a <tt>Transmogrifier</tt> instance into a Camel route we use the <tt>transmogrify</tt> DSL extension:</p>

<p><a name="IPFreference-single-transmogrifytransmogrifier"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' extension using a transmogrifier object</b></div><div class="codeContent panelContent">
<pre class="code-java">org.openehealth.ipf.commons.core.modules.api.Transmogrifier transmogrifier = <span class="code-keyword">new</span> MyTransmogrifier()
from('direct:input') 
    .transmogrify(transmogrifier)
    .to('mock:output')
</pre>
</div></div>

<p>Behind the scenes the <tt>transmogrify</tt> element creates an <tt>org.openehealth.ipf.platform.camel.core.adapter.TransmogrifierAdapter</tt> as described in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Moduleadapters">module adapters</a> section. This adapter adapts the <tt>org.openehealth.ipf.commons.core.modules.api.Transmogrifier</tt> interface to an <tt>org.apache.camel.Processor</tt> interface. The adapter (processor) is included into the Camel route at the position where the <tt>transmogrify</tt> extension is used. During message processing the adapter accepts an <tt>org.apache.camel.Exchange</tt>, extracts the input from that exchange, delegates message processing to the adapted transmogrifier instance and populates the exchange with the transformation result. </p>

<h5><a name="IPFreference-single-Inclusionoptions"></a>Inclusion options</h5>

<p>There are three different ways of including a transmogrifier into a Camel route.</p>

<ol>
	<li>Pass a transmogrifier object as argument to the <tt>transmogrify()</tt> method. This has already been shown in the example route above.</li>
	<li>Pass the name of a transmogrifier bean as argument to the <tt>transmogrify</tt> method (see below). A bean with that name must exist in the Spring application context.</li>
	<li>Define a transmogrifier logic <em>inline</em> using a closure (see below). This is comparable to implement an anonymous <tt>Transmogrifier</tt> class.</li>
</ol>


<p><a name="IPFreference-single-transmogrifybean"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' extension using a transmogrifier bean</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input') 
    .transmogrify('myTransmogrifierBean')
    .to('mock:output')
</pre>
</div></div>

<p><a name="IPFreference-single-transmogrifyclosure"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' extension using a closure</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input') 
    .transmogrify { body, headers -&gt;
        def result = ... <span class="code-comment">// create result from input body and headers
</span>        <span class="code-keyword">return</span> result    <span class="code-comment">// <span class="code-keyword">return</span> the transformation result
</span>    }
    .to('mock:output')
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Inclusion pattern</b><br><p>This is a pattern that also applies to all other DSL extensions for IPF module adapters: <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validator"><tt>validate</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parser"><tt>parse</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Renderer"><tt>render</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Predicate"><tt>predicate</tt></a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Aggregator"><tt>aggregationStrategy</tt></a>. The adapted object can either be included into a Camel route directly as object, indirectly via a Spring bean name or defined (inline) with a closure. Closures are not supported for <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parser"><tt>parse</tt></a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Renderer"><tt>render</tt></a>.</p></td></tr></tbody></table></div>


<h5><a name="IPFreference-single-Transmogrifierinput"></a>Transmogrifier input</h5>

<p>Default arguments to the <tt>Transmogrifier.zap(S object, Object... params)</tt> method are:</p>

<ul>
	<li>The in-message body for the <tt>object</tt> parameter.</li>
	<li>The in-message headers for the <tt>params</tt> parameter.</li>
</ul>


<p>A <tt>transmogrify</tt> closure may define a one or two parameters. </p>

<ul>
	<li>The first parameters corresponds to the <tt>object</tt> parameter.</li>
	<li>The second parameter corresponds to the <tt>params</tt> parameter.</li>
</ul>


<p>of the <tt>zap</tt> method. </p>

<ul>
	<li>The default argument to the first closure parameter is the in-message body.</li>
	<li>The default argument to the second closure parameter are the in-message headers (a <tt>java.util.Map</tt>).</li>
</ul>


<p>Input to the <tt>zap</tt> method as well as the <tt>transmogrify</tt> closure can be customized via the</p>

<ul>
	<li><tt>input</tt></li>
	<li><tt>params</tt> and</li>
	<li><tt>staticParams</tt></li>
</ul>


<p>DSL extensions. <tt>input</tt> and <tt>params</tt> either accept an <tt>org.apache.camel.Expression</tt> as argument or an expression closure. In both cases an <tt>org.apache.camel.Exchange</tt> is evaluated. The evaluation result will be used as transmogrifier input. The following snippet causes the transmogrifier's <tt>zap</tt> method to be called with the in-message's <tt>foo</tt>-header as first argument and the in-messages <tt>bar</tt>-header as the second argument</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' parameterization with input and params</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input') 
    .transmogrify('myTransmogrifierBean')
    .input { exchange -&gt; exchange.in.headers.foo }
    .params { exchange -&gt; exchange.in.headers.bar }
    .to('mock:output')
</pre>
</div></div>

<p>The same rules apply for the <tt>transmogrify</tt> closure parameters.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' parameterization with input and params</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input') 
    .transmogrify { fooHeader, barHeader -&gt;
        <span class="code-comment">// ...
</span>    }
    .input { it.in.headers.foo }
    .params { it.in.headers.bar }
    .to('mock:output')
</pre>
</div></div>

<p>The <tt>params</tt> DSL extension also supports predefined expressions. These are accessible by calling <tt>params</tt> with no arguments. The following predefined expressions are currently supported as part of the DSL.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Predefined expressions for 'params'</b></div><div class="codeContent panelContent">
<pre class="code-java">    ...
    .params().headers()           <span class="code-comment">// in-message headers (<span class="code-keyword">default</span> <span class="code-keyword">for</span> transmogrifiers)
</span>    ...
    .params().header('foo')       <span class="code-comment">// in-message foo-header
</span>    ...
    .params().builder()           <span class="code-comment">// a Groovy XML builder
</span>    ...
    .params().headersAndBuilder() <span class="code-comment">// in-message headers and a Groovy XML builder (params array of length 2)
</span>    ...
</pre>
</div></div>

<p>These predefined expressions are implemented by the <tt>org.openehealth.ipf.platform.camel.core.model.ParamsDefinition</tt> model class. The <tt>builder</tt> and <tt>headersAndBuilder</tt> extensions are described in section <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-DSLextensionsforGroovyXMLprocessing">DSL extensions for Groovy XML processing</a>.</p>

<p>The <tt>staticParams</tt> extension can be used to pass constant values to the transmogrifier or transmogrifier closure. This extension method defines a variable argument parameter. For example to pass a String array with elements 'a', 'b' and 'c' via the <tt>params</tt> parameter or via the second closure parameter you could use</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' parameterization with staticParams</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input') 
    .transmogrify('myTransmogrifierBean')
    .staticParams('a', 'b', 'c')
    .to('mock:output')
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'transmogrify' parameterization with staticParams</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input') 
    .transmogrify { body, stringArray -&gt;
        <span class="code-comment">// ...
</span>    }
    .staticParams('a', 'b', 'c')
    .to('mock:output')
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Input customization for other adapter extensions</b><br><ul>
	<li>The <tt>input</tt> extension is also applicable to <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Validator"><tt>validate</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parser"><tt>parse</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Renderer"><tt>render</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Predicate"><tt>predicate</tt></a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Aggregator"><tt>aggregationStrategy</tt></a>.</li>
	<li>The <tt>params</tt> and <tt>staticParams</tt> extensions are also applicable to <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parser"><tt>parse</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Renderer"><tt>render</tt></a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Predicate"><tt>predicate</tt></a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Aggregator"><tt>aggregationStrategy</tt></a>.</li>
</ul>
</td></tr></tbody></table></div>

<h5><a name="IPFreference-single-Transmogrifieroutput"></a>Transmogrifier output</h5>

<p>The return value of the <tt>Transmogrifier.zap(S object, Object... params)</tt> method or the return value of the <tt>transmogrify</tt> closure is written to the <tt>org.apache.camel.Exchange</tt> object from which the input was taken. It depends on the exchange pattern to which exchange message the result is written. If the exchange is out-capable (i.e. <tt>exchange.getPattern().isOutCapable()</tt> returns <tt>true</tt>) then the result is written to the exchange's out-message body, otherwise, it is written to the in-message body. Furthermore, if the exchange is out-capable, the in-message is copied onto the out-message before the result is written (this is useful e.g. for preserving message headers along a precessing chain).</p>

<p><a name="IPFreference-single-TransmogrifierImpls"></a></p>
<h5><a name="IPFreference-single-Transmogrifierimplementations"></a>Transmogrifier implementations </h5>

<p>IPF provides two <tt>Transmogrifier</tt> implementations out of the box:</p>

<ul>
	<li><tt>org.openehealth.ipf.commons.xml.XsltTransmogrifier</tt> for transforming XML documents</li>
	<li><tt>org.openehealth.ipf.commons.xml.SchematronTransmogrifier</tt> for creating Schematron validation reports from XML documents</li>
</ul>


<p>These implementations are "by-products" for <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-schematronvalidation">Schematron validation</a>, but you can use them independently as well. Compared to Camel's <tt>xslt</tt> endpoint (<a href="http://camel.apache.org/xslt.html" rel="nofollow">http://camel.apache.org/xslt.html</a>), the IPF counterpart</p>

<ul>
	<li>can use variable stylesheets</li>
	<li>caches XSLT templates for better performance</li>
	<li>accepts explicit XSLT parameters (not just as Camel message header)</li>
</ul>


<p>The input is automatically converted into a <tt>StreamSource</tt>. By default, all Camel headers are added as parameters which are available in the stylesheet unless you define parameters by either using <tt>params(...)</tt> or <tt>staticParams(...)</tt>.</p>

<p>Example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>IPF transmogrifiers</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1') 
    .transmogrify().xslt().staticParams('path/to/stylesheet') <span class="code-comment">// <span class="code-keyword">static</span> stylesheet
</span>    .to('mock:output')

from('direct:input1') 
    .transmogrify().xslt().staticParams('path/to/stylesheet', parameterMap) <span class="code-comment">// <span class="code-keyword">static</span> stylesheet with parameters
</span>    .to('mock:output')

from('direct:input3')
    .setHeader('stylesheet', constant('path/to/stylesheet')) 
    .transmogrify().xslt().params().header('stylesheet') <span class="code-comment">// dynamic stylesheet
</span>    .to('mock:output')

<span class="code-comment">// In most cases you will need the SchematronValidator, which scans the Schematron report
</span><span class="code-comment">// <span class="code-keyword">for</span> failed assertions. Use only <span class="code-keyword">if</span> you require custom processing of the report in the
</span><span class="code-comment">// route.
</span>
from('direct:input3') 
    .transmogrify().schematron().staticParams('path/to/rules', options ) <span class="code-comment">// <span class="code-keyword">static</span> rules
</span>    .to('mock:output')

from('direct:input4') 
    .setHeader('rules', constant('path/to/rules')) 
    .transmogrify('schematron').params().header('rules') <span class="code-comment">// dynamic rules
</span>    .to('mock:output')
</pre>
</div></div>

<p>Please refer to <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-schematronvalidation">Schematron validation</a> for a description of the available Schematron <tt>options</tt>.</p>

<p>By default, XSLT transformations return a <tt>javax.xml.transform.Result</tt> object, which is, however, not very useful for further processing. IPF's XSLT-related transmogrifiers therefore return a <tt>String</tt> by default. You can influence the returned type using a <tt>Class</tt> parameter to the xslt()/schematron() extensions or with a subsequent call to <tt>convertBodyTo(Class)</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>IPF transmogrifiers with output type</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1') 
    .transmogrify().xslt(InputStream.class).staticParams('path/to/stylesheet') 
    .to('mock:output')

from('direct:input2') 
    .transmogrify().xslt().staticParams('path/to/stylesheet') 
    .convertBodyTo(InputStream.class)
    .to('mock:output')

</pre>
</div></div>

<h4><a name="IPFreference-single-Validator"></a>Validator</h4>

<p>The modules API defines an <tt>org.openehealth.ipf.commons.core.modules.api.Validator</tt> interface for message validation. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Validator.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">interface</span> Validator&lt;S, P&gt; {

    void validate(<span class="code-keyword">final</span> S message, <span class="code-keyword">final</span> P profile);

}
</pre>
</div></div>

<p>It defines a single <tt>validate</tt> method that validates a <tt>message</tt> against a profile. If validation fails an <tt>org.openehealth.ipf.commons.core.modules.api.ValidationException</tt> is thrown. The validator is included into Camel routes via the <tt>validate</tt> DSL extension. The <tt>validate</tt> extension accepts either a validator object, a validator bean name or a validator closure as argument. If a closure is used, a failed validation is either indicated by throwing an <tt>org.openehealth.ipf.commons.core.modules.api.ValidationException</tt> or by returning <tt>false</tt>. If <tt>false</tt> is returned IPF internally generates a <tt>ValidationException</tt>. Here are some examples.</p>

<p><a name="IPFreference-single-validate"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'validate' extension</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-comment">// route 1
</span>from('direct:input1') 
     .validate {body -&gt; body == 'blah'}  
     .to('mock:output')

<span class="code-comment">// route 2
</span>from('direct:input2') 
     .validate {<span class="code-keyword">throw</span> <span class="code-keyword">new</span> ValidationException('always fail')}  
     .to('mock:output')

<span class="code-comment">// route 3
</span>from('direct:input3') 
     .validate {body, profile -&gt; 
         body == profile
     }
     .staticProfile('blah')
     .to('mock:output')

<span class="code-comment">// route 4
</span>from('direct:input4') 
     .validate {fooHeader, profile -&gt; 
         fooHeader == profile
     }
     .input {it.in.headers.foo}
     .staticProfile('abcd')
     .to('mock:output')

<span class="code-comment">// route 5
</span>from('direct:input5') 
     .validate(...)
     .input(...)
     .profile {exchange -&gt;        
         exchange.in.headers.customProfile
     }                         
     .to('mock:output')

<span class="code-comment">// you may also use validator objects
</span>     ...
     .validate(<span class="code-keyword">new</span> MyCustomValidator())
     ...

<span class="code-comment">// you may also use validator beans
</span>     ...
     .validate('myValidatorBean')
     ...
</pre>
</div></div>

<ul>
	<li>In route 1 validation will fail if the in-message body doesn't equal <tt>'blah'</tt>. In this case <tt>false</tt> is returned which causes IPF to throw a <tt>ValidationException</tt>.</li>
	<li>In route 2 validation will fail because a <tt>ValidationException</tt> is thrown directly (regardless of the message content).</li>
	<li>In route 3 we define a closure with a second parameter for passing a validation profile. By default it is <tt>null</tt> but it can be customized via the <tt>staticProfile</tt> DSL extension *). As in route 1 the validation will fail if the in-message body doesn't equal <tt>'blah'</tt>.</li>
	<li>In route 4 we see how <tt>input</tt> is used to pass the in-message's <tt>foo</tt>-header as first argument to the validation closure. If the <tt>foo</tt>-header doesn't equal <tt>'abcd'</tt> validation will fail.</li>
	<li>In route 5 a validation profile is obtained from the in-messages's <tt>customProfile</tt> header using the <tt>profile()</tt> DSL extension and a closure. Instead of the closure one can also use an <tt>org.apache.camel.Expression</tt> instance.</li>
</ul>


<p>*) In this example we could have hard-coded this profile directly inside the closure as well. Using the <tt>profile</tt> extension makes more sense when using validator objects or beans like in <tt>validate(myValidator)</tt> or <tt>validate('myValidatorBean')</tt>.</p>

<p><a name="IPFreference-single-validators"></a><br>
As of version 1.7, IPF provides a Validator implementation that validates an XML Source against an <em>W3C XML Schema</em>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'xsd' extension</b></div><div class="codeContent panelContent">
<pre class="code-java">
from('direct:input1') 
     .validate().xsd().staticProfile('schema location')
     .to('mock:output')
</pre>
</div></div>

<p>The schema location value can be either a URL or a non-URL string, in the latter case the classpath is searched for the schema resource.</p>

<p><a name="IPFreference-single-schematronvalidation"></a><br>
As of version 1.7, IPF also provides a Validator implementation that validates an XML Source against a set of <em>Schematron</em> rules.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'schematron' extension</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.openehealth.ipf.commons.xml.SchematronProfile;
...
from('direct:input1') 
     .validate().schematron().staticProfile(<span class="code-keyword">new</span> SchematronProfile('rules location', options))
     .to('mock:output')

</pre>
</div></div>

<p>Note that you have to provide an instance of <tt>SchematronProfile</tt>, not just the plain Schematron rules location. The rules location value can be either a URL or a non-URL string, in the latter case the classpath is searched for the schema resource.<br>
The <tt>options</tt> parameter is optional. If present, it must be of type <tt>Map&lt;String, Object&gt;</tt> Its purpose is to configure Schematron's validation process. Please refer to the Schematron website <a href="http://www.schematron.com/" rel="nofollow">http://www.schematron.com</a> for more details.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> key </th>
<th class="confluenceTh"> description </th>
<th class="confluenceTh"> values </th>
<th class="confluenceTh"> default </th>
</tr>
<tr>
<td class="confluenceTd"> phase </td>
<td class="confluenceTd"> Select the phase for validation. Schematron allows for staged validation by assigning phases to validation rules. </td>
<td class="confluenceTd"> <tt>NMTOKEN</tt> | <tt>#ALL</tt> </td>
<td class="confluenceTd"> <tt>#ALL</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> allow-foreign </td>
<td class="confluenceTd"> Pass non-Schematron elements and rich markup to the generated stylesheet </td>
<td class="confluenceTd"> 'true' | 'false' </td>
<td class="confluenceTd"> 'false' </td>
</tr>
<tr>
<td class="confluenceTd"> diagnose </td>
<td class="confluenceTd"> Add the diagnostics to the assertion test in reports </td>
<td class="confluenceTd"> 'true' | 'false' </td>
<td class="confluenceTd"> 'true' </td>
</tr>
<tr>
<td class="confluenceTd"> property </td>
<td class="confluenceTd"> Experimental: Add properties to the assertion test in reports </td>
<td class="confluenceTd"> 'true' | 'false' </td>
<td class="confluenceTd"> 'true' </td>
</tr>
<tr>
<td class="confluenceTd"> generate-paths </td>
<td class="confluenceTd"> Generate the @location attribute with XPaths </td>
<td class="confluenceTd"> 'true' | 'false' </td>
<td class="confluenceTd"> 'true' </td>
</tr>
<tr>
<td class="confluenceTd"> sch.exslt.imports </td>
<td class="confluenceTd"> semi-colon delimited string of filenames for some EXSLT implementations </td>
<td class="confluenceTd"> <tt>string</tt> </td>
<td class="confluenceTd"> '' </td>
</tr>
<tr>
<td class="confluenceTd"> optimize </td>
<td class="confluenceTd"> Use only when the schema has no attributes as the context nodes </td>
<td class="confluenceTd"> 'visit-no-attributes' </td>
<td class="confluenceTd"> '' </td>
</tr>
<tr>
<td class="confluenceTd"> generate-fired-rule </td>
<td class="confluenceTd"> Generate fired-rule elements. Significantly increases report size </td>
<td class="confluenceTd"> 'true' | 'false' </td>
<td class="confluenceTd"> 'true' </td>
</tr>
</tbody></table>


<h4><a name="IPFreference-single-Parser"></a>Parser</h4>

<p>The modules API <tt>org.openehealth.ipf.commons.core.modules.api.Parser</tt> interface declares methods for parsing an external representation of information into an internal model.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Parser.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">interface</span> Parser&lt;S&gt; {

    S parse(<span class="code-object">String</span> message, <span class="code-object">Object</span>... params);
    S parse(InputStream message, <span class="code-object">Object</span>... params) <span class="code-keyword">throws</span> IOException;
    S parse(Source source, <span class="code-object">Object</span>... params) <span class="code-keyword">throws</span> IOException;
    S parse(Reader reader, <span class="code-object">Object</span>... params) <span class="code-keyword">throws</span> IOException;

}
</pre>
</div></div>

<p>The external representation can be obtained from a <tt>java.io.InputStream</tt>, a <tt>java.io.Reader</tt>, a <tt>javax.xml.transform.Source</tt> or directly from a <tt>java.lang.String</tt>. These options are represented by the four <tt>parse</tt> methods. A parser is included into Camel routes via the <tt>parse</tt> DSL extension. IPF selects the appropriate method depending on the type of input data. The return value is the parse result and is written to the <tt>org.apache.camel.Exchange</tt> object from which the input was taken. It depends on the exchange pattern to which exchange message the result is written. If the exchange is out-capable (i.e. <tt>exchange.getPattern().isOutCapable()</tt> returns <tt>true</tt>) then the result is written to the exchange's out-message body, otherwise, it is written to the in-message body. Furthermore, if the exchange is out-capable, the in-message is copied onto the out-message before the result is written (this is useful e.g. for preserving message headers along a precessing chain). Here are some examples. </p>

<p><a name="IPFreference-single-parse"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'parse' extension</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-comment">// route 1
</span>from('direct:input1')
    .parse(<span class="code-keyword">new</span> MyParser())
    .to('mock:output')

<span class="code-comment">// route 2
</span>from('direct:input2')
    .parse('myParserBean')
    .input { it.in.headers.foo }
    .params { it.in.headers.bar }
    .to('mock:output')
</pre>
</div></div>

<ul>
	<li>In route 1 we directly include a <tt>MyParser</tt> object into the Camel route. Here, the parser input data are taken from the in-message body, the parser <tt>params</tt> are <tt>null</tt>.</li>
	<li>In route 2 we include a Spring bean with name 'myParserBean' into the Camel route. Here, the parser's input data are taken from the in-message's <tt>foo</tt>-header, the parser <tt>params</tt> from the <tt>bar</tt>-header.</li>
</ul>


<p>Closures for <tt>parse</tt> are currently not suppported.</p>

<h5><a name="IPFreference-single-UnmarshallingviaParser"></a>Unmarshalling via Parser</h5>

<p>IPF also provides an <tt>org.apache.camel.spi.DataFormat</tt> implementation that delegates <tt>unmarshal</tt> work to a parser.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'parse' extension for unmarshalling</b></div><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"direct:input1"</span>)
    .unmarshal().parse(<span class="code-keyword">new</span> MyParser())
    ...

from(<span class="code-quote">"direct:input2"</span>)
    .unmarshal().parse('myParserBean')
    ...
</pre>
</div></div>

<p>However, using <tt>parse</tt> for unmarshalling currently doesn't allow input customization via <tt>input</tt>, <tt>params</tt> or <tt>staticParams</tt>.</p>

<h4><a name="IPFreference-single-Renderer"></a>Renderer</h4>

<p>The modules API <tt>org.openehealth.ipf.commons.core.modules.api.Renderer</tt> interface declares methods for creating an external representation of an internal model.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Renderer.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">interface</span> Renderer&lt;T&gt; {

    Result render(<span class="code-keyword">final</span> T model, Result result, <span class="code-keyword">final</span> <span class="code-object">Object</span>... params) <span class="code-keyword">throws</span> IOException;
    OutputStream render(<span class="code-keyword">final</span> T model, OutputStream result, <span class="code-keyword">final</span> <span class="code-object">Object</span>... params) <span class="code-keyword">throws</span> IOException;
    Writer render(<span class="code-keyword">final</span> T model, Writer result, <span class="code-keyword">final</span> <span class="code-object">Object</span>... params) <span class="code-keyword">throws</span> IOException;
    <span class="code-object">String</span> render(<span class="code-keyword">final</span> T model, <span class="code-keyword">final</span> <span class="code-object">Object</span>... params);

}
</pre>
</div></div>

<p>Currently, only the last method i.e. the one that returns a <tt>java.lang.String</tt> is used by IPF. A renderer is included into Camel routes via the <tt>render</tt> DSL extension. IPF selects the appropriate method depending on the type of input data. The return value is the rendering result and is written to the <tt>org.apache.camel.Exchange</tt> object from which the input was taken. It depends on the exchange pattern to which exchange message the result is written. If the exchange is out-capable (i.e. <tt>exchange.getPattern().isOutCapable()</tt> returns <tt>true</tt>) then the result is written to the exchange's out-message body, otherwise, it is written to the in-message body. Furthermore, if the exchange is out-capable, the in-message is copied onto the out-message before the result is written (this is useful e.g. for preserving message headers along a precessing chain). Here are some examples.</p>

<p><a name="IPFreference-single-render"></a></p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'render' extension</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-comment">// route 1
</span>from('direct:input1')
    .render(<span class="code-keyword">new</span> MyRenderer())
    .to('mock:output')

<span class="code-comment">// route 2
</span>from('direct:input2')
    .render('myRendererBean')
    .input { it.in.body[0] }
    .params { it.in.headers.bar }
    .to('mock:output')
</pre>
</div></div>

<ul>
	<li>In route 1 we directly include a <tt>MyRenderer</tt> object into the Camel route. Here, the renderer input data are taken from the in-message body, the renderer <tt>params</tt> are <tt>null</tt>.</li>
	<li>In route 2 we include a Spring bean with name 'myRendererBean' into the Camel route. Here, the renderer's input data are taken from the first element of a list that is contained in the in-message's body. The renderer <tt>params</tt> are taken from the in-messages <tt>bar</tt>-header.</li>
</ul>


<p>Closures for <tt>render</tt> are currently not suppported.</p>

<h5><a name="IPFreference-single-MarshallingviaRenderer"></a>Marshalling via Renderer</h5>

<p>IPF also provides an <tt>org.apache.camel.spi.DataFormat</tt> implementation that delegates <tt>marshal</tt> work to a renderer.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'render' extension for marshalling</b></div><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"direct:input1"</span>)
    .marshal().render(<span class="code-keyword">new</span> MyRenderer())
    ...

from(<span class="code-quote">"direct:input2"</span>)
    .unmarshal().render('myRendererBean')
    ...
</pre>
</div></div>

<p>However, using <tt>render</tt> for marshalling currently doesn't allow input customization via <tt>input</tt>, <tt>params</tt> or <tt>staticParams</tt>.</p>

<h4><a name="IPFreference-single-Predicate"></a>Predicate</h4>

<p>The <tt>org.openehealth.ipf.commons.core.modules.api.Predicate</tt> interface declares a <tt>matches</tt> method for evaluating a binary predicate on a <tt>source</tt> object.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'Predicate'</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">interface</span> Predicate&lt;T&gt; {

    <span class="code-object">boolean</span> matches(T source, <span class="code-object">Object</span>... params);

}
</pre>
</div></div>

<p><a name="IPFreference-single-predicateextension"></a><br>
The <tt>predicate</tt> DSL extension can be used to include these predicates into Camel routes. It is implemented with the <tt>org.openehealth.ipf.platform.camel.core.adapter.PredicateAdapter</tt> that translates between <tt>org.openehealth.ipf.commons.core.modules.api.Predicate</tt> and <tt>org.apache.camel.Predicate</tt>. The <tt>predicate</tt> extension supports a predicate object, a bean name or a closure as argument. The created Camel predicate can then be used with e.g. <tt>filter</tt> or other DSL elements that expect an <tt>org.apache.camel.Predicate</tt>. The <tt>predicate</tt> extension is provided by an IPF extension to <tt>org.apache.camel.spring.SpringRouteBuilder</tt>. Here are some examples:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'predicate' extension</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder
<span class="code-keyword">import</span> org.openehealth.ipf.commons.core.modules.api.Predicate
...

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
    void configure() {
        Predicate myPredicate = <span class="code-keyword">new</span> MyPredicate()

        def predicate1 = predicate(myPredicate)
        def predicate2 = predicate('myPredicateBean') 
        def predicate3 = predicate { body -&gt; body == 'test'}

        from('direct:input1').filter(predicate1).to('mock:output')
        from('direct:input2').filter(predicate2).to('mock:output')
        from('direct:input3').filter(predicate3).to('mock:output')
...
</pre>
</div></div>

<p>Input to the <tt>org.openehealth.ipf.commons.core.modules.api.Predicate.matches()</tt> method can be customized via the <tt>input</tt>, <tt>params</tt> or <tt>staticParams</tt> DSL extensions.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'predicate' extension with input customization</b></div><div class="codeContent panelContent">
<pre class="code-java">def predicate4 = 
    predicate { fooHeader, barHeader -&gt; ... }
        .input { it.in.headers.foo }
        .params { it.in.headers.bar }
</pre>
</div></div>

<h4><a name="IPFreference-single-Aggregator"></a>Aggregator</h4>

<p>The <tt>org.openehealth.ipf.commons.core.modules.api.Aggregator</tt> interface is a <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifier">transmogrifier</a> that combines/aggregates a collection of input object into a result object. The result object is the return value of the <tt>zap</tt> method.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Aggregator.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">interface</span> Transmogrifier&lt;S, T&gt; {
    T zap(S object, <span class="code-object">Object</span>... params);
}

<span class="code-keyword">public</span> <span class="code-keyword">interface</span> Aggregator&lt;S, T&gt; <span class="code-keyword">extends</span> Transmogrifier&lt;Collection&lt;S&gt;, T&gt;
</pre>
</div></div>

<p>{anchor:aggregationStrategy}}<br>
The <tt>aggregationStrategy</tt> DSL extension can be used to include an <tt>Aggregator</tt> into Camel routes. It is implemented with the <tt>org.openehealth.ipf.platform.camel.core.adapter.AggregatorAdapter</tt> that translates between <tt>org.openehealth.ipf.commons.core.modules.api.Aggregator</tt> and <tt>org.apache.camel.processor.aggregate.AggregationStrategy</tt>. The <tt>aggregationStrategy</tt> extension supports an aggregator object, a bean name or a closure as argument. The created Camel <tt>AggregationStrategy</tt> can then be used with e.g. <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Contentenrichment"><tt>enrich</tt></a> or other DSL elements that expect an <tt>org.apache.camel.processor.aggregate.AggregationStrategy</tt>. The <tt>aggregationStrategy</tt> extension is provided by an IPF extension of the <tt>org.apache.camel.spring.SpringRouteBuilder</tt>. Here are some examples:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'aggregationStrategy' extension</b></div><div class="codeContent panelContent">
<pre class="code-java">def aggregationStrategy1 = aggregationStrategy(<span class="code-keyword">new</span> TestAggregator())
def aggregationStrategy2 = aggregationStrategy('sampleAggregator') 
def aggregationStrategy3 = aggregationStrategy {originalInBody, resourceOutBody -&gt; 
    originalInBody + ':' + resourceOutBody
} 
def aggregationStrategy4 = aggregationStrategy {originalInBody, resourceOutBody, fooHeader -&gt; 
    originalInBody + ':' + resourceOutBody  + ':' + fooHeader
}
.input            {originalExchange -&gt; originalExchange.in.body}        <span class="code-comment">// relates to 1st parameter
</span>.aggregationInput {resourceExchange -&gt; resourceExchange.out.body}       <span class="code-comment">// relates to 2nd parameter
</span>.params           {originalExchange -&gt; originalExchange.in.headers.foo} <span class="code-comment">// relates to 3rd parameter
</span>
from('direct:input1').enrich('direct:resource', aggregationStrategy1).to('mock:output')
from('direct:input2').enrich('direct:resource', aggregationStrategy2).to('mock:output')
from('direct:input3').enrich('direct:resource', aggregationStrategy3).to('mock:output')
from('direct:input4').enrich('direct:resource', aggregationStrategy4).to('mock:output')
</pre>
</div></div>

<p>The collection passed to the <tt>org.openehealth.ipf.commons.core.modules.api.Aggregator.zap</tt> method is a list of two objects - objects that have been derived from the arguments to the <tt>org.apache.camel.processor.aggregate.AggregationStrategy.aggregate</tt> method. If you use a closure you must define at least two parameters that correspond to the parameters of <tt>org.apache.camel.processor.aggregate.AggregationStrategy.aggregate</tt>. An optional third parameters corresponds to the <tt>params</tt> parameter that is common to all modules interfaces. Input can be customized via the <tt>input</tt>, <tt>params</tt> or <tt>staticParams</tt> DSL extensions. Input for the second object in the input list or the second closure parameter can be customized via the <tt>aggregationInput</tt> DSL extension (see <tt>aggregationStrategy4</tt> in the example above).</p>

<h4><a name="IPFreference-single-Adapterextensionsummary"></a>Adapter extension summary</h4>

<h5><a name="IPFreference-single-Relevanttypes"></a>Relevant types</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">DSL extension</th>
<th class="confluenceTh">Modules Interface *)</th>
<th class="confluenceTh">Adapter class **)</th>
<th class="confluenceTh">Extended model class</th>
</tr>
<tr>
<td class="confluenceTd"><tt>transmogrify</tt></td>
<td class="confluenceTd"><tt>Transmogrifier</tt></td>
<td class="confluenceTd"><tt>TransmogrifierAdapter</tt></td>
<td class="confluenceTd"><tt>org.apache.camel.model.ProcessorDefinition</tt></td>
</tr>
<tr>
<td class="confluenceTd"><tt>validate</tt></td>
<td class="confluenceTd"><tt>Validator</tt></td>
<td class="confluenceTd"><tt>ValidatorAdapter</tt></td>
<td class="confluenceTd"><tt>org.apache.camel.model.ProcessorDefinition</tt></td>
</tr>
<tr>
<td class="confluenceTd"><tt>parse</tt></td>
<td class="confluenceTd"><tt>Parser</tt></td>
<td class="confluenceTd"><tt>ParserAdapter</tt></td>
<td class="confluenceTd"><tt>org.apache.camel.model.ProcessorDefinition</tt> <br clear="all"> <tt>org.apache.camel.builder.DataFormatClause</tt></td>
</tr>
<tr>
<td class="confluenceTd"><tt>render</tt></td>
<td class="confluenceTd"><tt>Renderer</tt></td>
<td class="confluenceTd"><tt>RendererAdapter</tt></td>
<td class="confluenceTd"><tt>org.apache.camel.model.ProcessorDefinition</tt> <br clear="all"> <tt>org.apache.camel.builder.DataFormatClause</tt></td>
</tr>
<tr>
<td class="confluenceTd"><tt>predicate</tt></td>
<td class="confluenceTd"><tt>Predicate</tt></td>
<td class="confluenceTd"><tt>PredicateAdapter</tt></td>
<td class="confluenceTd"><tt>org.apache.camel.spring.SpringRouteBuilder</tt></td>
</tr>
<tr>
<td class="confluenceTd"><tt>aggregationStrategy</tt></td>
<td class="confluenceTd"><tt>Aggregator</tt></td>
<td class="confluenceTd"><tt>AggregatorAdapter</tt></td>
<td class="confluenceTd"><tt>org.apache.camel.spring.SpringRouteBuilder</tt></td>
</tr>
</tbody></table>

<p>*) in package <tt>org.openehealth.ipf.commons.core.modules.api</tt><br>
**) in package <tt>org.openehealth.ipf.platform.camel.core.adapter</tt></p>

<h5><a name="IPFreference-single-Parametersandinput"></a>Parameters and input</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">DSL extension</th>
<th class="confluenceTh">Parameter types</th>
<th class="confluenceTh">Input customization</th>
</tr>
<tr>
<td class="confluenceTd"><tt>transmogrify</tt></td>
<td class="confluenceTd"><ul>
	<li><tt>Transmogrifier</tt></li>
	<li><tt>java.lang.String</tt> (bean name)</li>
	<li><tt>groovy.lang.Closure</tt></li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li><tt>input</tt></li>
	<li><tt>params</tt></li>
	<li><tt>staticParams</tt></li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"><tt>validate</tt></td>
<td class="confluenceTd"><ul>
	<li><tt>Validator</tt></li>
	<li><tt>java.lang.String</tt> (bean name)</li>
	<li><tt>groovy.lang.Closure</tt></li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li><tt>input</tt></li>
	<li><tt>profile</tt></li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"><tt>parse</tt></td>
<td class="confluenceTd"><ul>
	<li><tt>Parser</tt></li>
	<li><tt>java.lang.String</tt> (bean name)</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li><tt>input</tt></li>
	<li><tt>params</tt></li>
	<li><tt>staticParams</tt></li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"><tt>render</tt></td>
<td class="confluenceTd"><ul>
	<li><tt>Renderer</tt></li>
	<li><tt>java.lang.String</tt> (bean name)</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li><tt>input</tt></li>
	<li><tt>params</tt></li>
	<li><tt>staticParams</tt></li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"><tt>predicate</tt></td>
<td class="confluenceTd"><ul>
	<li><tt>Predicate</tt></li>
	<li><tt>java.lang.String</tt> (bean name)</li>
	<li><tt>groovy.lang.Closure</tt></li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li><tt>input</tt></li>
	<li><tt>params</tt></li>
	<li><tt>staticParams</tt></li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"><tt>aggregationStrategy</tt></td>
<td class="confluenceTd"><ul>
	<li><tt>Aggregator</tt></li>
	<li><tt>java.lang.String</tt> (bean name)</li>
	<li><tt>groovy.lang.Closure</tt></li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li><tt>input</tt></li>
	<li><tt>aggregationInput</tt></li>
	<li><tt>params</tt></li>
	<li><tt>staticParams</tt></li>
</ul>
</td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Closureprofiles"></a>Closure profiles</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">DSL extension</th>
<th class="confluenceTh">Parameter 1</th>
<th class="confluenceTh">Parameter 2</th>
<th class="confluenceTh">Parameter 3</th>
<th class="confluenceTh">Return value</th>
</tr>
<tr>
<td class="confluenceTd"><tt>transmogrify</tt></td>
<td class="confluenceTd"><ul>
	<li>Default value: in-message body</li>
	<li>Customization via: <tt>input</tt></li>
	<li>Mandatory: true</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li>Default value: in-message headers</li>
	<li>Customization via: <tt>params</tt>, <tt>staticParams</tt></li>
	<li>Mandatory: false</li>
</ul>
</td>
<td class="confluenceTd">-</td>
<td class="confluenceTd">Transformation result (any type)</td>
</tr>
<tr>
<td class="confluenceTd"><tt>validate</tt></td>
<td class="confluenceTd"><ul>
	<li>Default value: in-message body</li>
	<li>Customization via: <tt>input</tt></li>
	<li>Mandatory: true</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li>Default value: <tt>null</tt></li>
	<li>Customization via: <tt>profile</tt>, <tt>staticProfile</tt></li>
	<li>Mandatory: false</li>
</ul>
</td>
<td class="confluenceTd">-</td>
<td class="confluenceTd">boolean or throws <tt>ValidationException</tt></td>
</tr>
<tr>
<td class="confluenceTd"><tt>predicate</tt></td>
<td class="confluenceTd"><ul>
	<li>Default value: in-message body</li>
	<li>Customization via: <tt>input</tt></li>
	<li>Mandatory: true</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li>Default value: <tt>null</tt></li>
	<li>Customization via: <tt>params</tt>, <tt>staticParams</tt></li>
	<li>Mandatory: false</li>
</ul>
</td>
<td class="confluenceTd">-</td>
<td class="confluenceTd">boolean</td>
</tr>
<tr>
<td class="confluenceTd"><tt>aggregationStrategy</tt></td>
<td class="confluenceTd"><ul>
	<li>Default value: in-message body of <tt>oldExchange</tt></li>
	<li>Customization via: <tt>input</tt></li>
	<li>Mandatory: true</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li>Default value: out-message body of <tt>newExchange</tt></li>
	<li>Customization via: <tt>aggregationInput</tt></li>
	<li>Mandatory: true</li>
</ul>
</td>
<td class="confluenceTd"><ul>
	<li>Default value: <tt>null</tt></li>
	<li>Customization via: <tt>params</tt>, <tt>staticParams</tt></li>
	<li>Mandatory: false</li>
</ul>
</td>
<td class="confluenceTd">aggregation result (any type)</td>
</tr>
</tbody></table>

<h3><a name="IPFreference-single-DSLextensionsforGroovyXMLprocessing"></a>DSL extensions for Groovy XML processing</h3>

<p>IPF provides support for Groovy XML processing within Camel routes. Here's a summary of features</p>

<ul>
	<li>Unmarshal an XML stream or string into a <a href="http://groovy.codehaus.org/api/groovy/util/Node.html" rel="nofollow">groovy.util.Node</a> using <a href="http://groovy.codehaus.org/api/groovy/util/XmlParser.html" rel="nofollow">groovy.util.XmlParser</a></li>
	<li>Unmarshal an XML stream or string into a <a href="http://groovy.codehaus.org/api/groovy/util/slurpersupport/GPathResult.html" rel="nofollow">groovy.util.slurpersupport.GPathResult</a> using <a href="http://groovy.codehaus.org/api/groovy/util/XmlSlurper.html" rel="nofollow">groovy.util.XmlSlurper</a></li>
	<li>Marshal a <a href="http://groovy.codehaus.org/api/groovy/util/Node.html" rel="nofollow">groovy.util.Node</a> to an output stream.</li>
	<li>Marshal a <a href="http://groovy.codehaus.org/api/groovy/util/slurpersupport/GPathResult.html" rel="nofollow">groovy.util.slurpersupport.GPathResult</a> to an output stream (currently not supported).</li>
	<li>Groovy XML builders are injected into <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transmogrifier">transmogrifer</a> objects or closures for creating XML results.</li>
</ul>


<p><a name="IPFreference-single-gnode"></a></p>
<h4><a name="IPFreference-single-XMLUnmarshallingwithGroovy%7B%7BXmlParser%7D%7D"></a>XML Unmarshalling with Groovy <tt>XmlParser</tt></h4>

<p>To unmarshal an XML stream or string using a <a href="http://groovy.codehaus.org/api/groovy/util/XmlParser.html" rel="nofollow">groovy.util.XmlParser</a> use Camel's <tt>unmarshal</tt> method with IPF's <tt>gnode</tt> extension.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gnode' extension for unmarshalling (namespace-aware)</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .unmarshal().gnode()
    .transmogrify { node -&gt;
        <span class="code-comment">// process XML ...
</span>    }
</pre>
</div></div>

<p>This puts the parser result into the message body which can then be used in subsequent processors. By default, <tt>gnode</tt> is namespace-aware. To disable namespace-awareness use <tt>gnode(false)</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gnode' extension for unmarshalling (namespace-unaware)</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .unmarshal().gnode(<span class="code-keyword">false</span>)
    .transmogrify { node -&gt;
        <span class="code-comment">// process XML ...
</span>    }
</pre>
</div></div>

<p>As of IPF 1.7, in order to add XML schema validation, simply add a schema location parameter. The value can be either a URL or a non-URL string, in the latter case the classpath is searched for the schema resource:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gnode' extension for unmarshalling (namespace- and schema-aware)</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    <span class="code-comment">// will <span class="code-keyword">throw</span> an Exception <span class="code-keyword">if</span> XML does not validate against the schema
</span>    .unmarshal().gnode('path/to/schema.xsd', <span class="code-keyword">true</span>) 
    .transmogrify { node -&gt;
        <span class="code-comment">// process XML ...
</span>    }
</pre>
</div></div>


<p><a name="IPFreference-single-gpath"></a></p>
<h4><a name="IPFreference-single-XMLUnmarshallingwithGroovy%7B%7BXmlSlurper%7D%7D"></a>XML Unmarshalling with Groovy <tt>XmlSlurper</tt></h4>

<p>To unmarshal an XML stream or string using a <a href="http://groovy.codehaus.org/api/groovy/util/XmlSlurper.html" rel="nofollow">groovy.util.XmlSlurper</a> use Camel's <tt>unmarshal</tt> method with IPF's <tt>gpath</tt> extension.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gpath' extension for unmarshalling (namespace-aware)</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .unmarshal().gpath()
    .transmogrify { gpathResult -&gt;
        <span class="code-comment">// process XML ...
</span>    }
</pre>
</div></div>

<p>This puts the slurper result into the message body which can then be used in subsequent processors. By default, <tt>gpath</tt> is namespace-aware. To disable namespace-awareness use <tt>gpath(false)</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gpath' extension for unmarshalling (namespace-unaware)</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .unmarshal().gpath(<span class="code-keyword">false</span>)
    .transmogrify { gpathResult -&gt;
        <span class="code-comment">// process XML ...
</span>    }
</pre>
</div></div>

<p>As of IPF 1.7, in order to add XML schema validation, simply add a schema location parameter. The value can be either a URL or a non-URL string, in the latter case the classpath is searched for the schema resource:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gpath' extension for unmarshalling (namespace- and schema-aware)</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    <span class="code-comment">// will <span class="code-keyword">throw</span> an Exception <span class="code-keyword">if</span> XML does not validate against the schema
</span>    .unmarshal().gpath('path/to/schema.xsd', <span class="code-keyword">true</span>) 
    .transmogrify { node -&gt;
        <span class="code-comment">// process XML ...
</span>    }
</pre>
</div></div>

<h4><a name="IPFreference-single-XMLMarshallingwithGroovy%7B%7BXmlNodePrinter%7D%7D"></a>XML Marshalling with Groovy <tt>XmlNodePrinter</tt></h4>

<p>The reverse operations to <tt>unmarshal().gnode()</tt> and <tt>unmarshal().gpath()</tt> are <tt>marshal().gnode()</tt> and <tt>marshal().gpath()</tt>, respectively. Currently only <tt>marshal().gnode()</tt> is supported. This writes a <a href="http://groovy.codehaus.org/api/groovy/util/Node.html" rel="nofollow">groovy.util.Node</a> to an output stream using Groovy's <a href="http://groovy.codehaus.org/api/groovy/util/XmlNodePrinter.html" rel="nofollow">groovy.util.XmlNodePrinter</a></p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gnode' extension for marshalling (namespace-aware)</b></div><div class="codeContent panelContent">
<pre class="code-java">    ...
    .marshal().gnode()
    .to('mock:mock')
</pre>
</div></div>

<p>This makes the printer result available as byte array in the message body. By default <tt>gnode</tt> is namespace-aware. To disable namespace-awareness use <tt>gnode(false)</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'gnode' extension for marshalling (namespace-unaware)</b></div><div class="codeContent panelContent">
<pre class="code-java">    ...
    .marshal().gnode(<span class="code-keyword">false</span>)
    .to('mock:mock')
</pre>
</div></div>

<h4><a name="IPFreference-single-XMLtransmogrifiers"></a>XML transmogrifiers</h4>

<p>IPF provides an easy way to make Groovy XML markup builders available inside transmogrifiers or transmogrifier closures. Here's how it works for transmogrifier closures.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>XML transmogrifier</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .transmogrify { body, xmlBuilder -&gt;
        <span class="code-comment">// use xmlBuilder to create XML
</span>        ...
        <span class="code-comment">// <span class="code-keyword">return</span> xmlBuilder result
</span>        xmlBuilder.result
    }
    .params().builder()
</pre>
</div></div>

<p>The <tt>params().builder()</tt> call makes the builder available via the second closure parameter. A new instance of the builder is passed with every call, so using that builder is thread-safe. If you want to have both, the in-message headers and the builder, for the second closure parameter then use the predefined <tt>headersAndBuilder()</tt> extension. This extension creates an array of length 2 where the first array element is the in-message headers and the second element is the XML builder. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>XML transmogrifier</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .transmogrify { body, params -&gt;
        def msgHeaders = params[0]
        def xmlBuilder = params[1]
        <span class="code-comment">// use builder to create XML
</span>        ...
        <span class="code-comment">// <span class="code-keyword">return</span> builder result
</span>        xmlBuilder.result
    }
    .params().headersAndBuilder()
</pre>
</div></div>

<p>The <tt>xmlBuilder.result</tt> property was added by a class that subclasses <a href="http://groovy.codehaus.org/api/groovy/xml/MarkupBuilder.html" rel="nofollow">groovy.xml.MarkupBuilder</a>. It contains the result XML document as <tt>String</tt>. </p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>XML message transmformations</b><br><p>By combining <tt>params().builder()</tt> with <tt>unmarshal().gnode()</tt> or <tt>unmarshal().gpath()</tt> transmogrifiers can implement XML message transformations based on Groovy's XML support. Transformation logic usually extracts content from an XML source document and includes that content into a result document. Navigation and content extraction from source documents is done via <a href="http://groovy.codehaus.org/GPath" rel="nofollow">GPath</a> expressions. Creation of result documents is done with Groovy's XML markup builder. The following example shows how an XML transformation route can be set up. </p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>from(...)
    .unmarshal().gpath()
    .transmogrify { gpathResult, xmlBuilder -&gt;
        // use gpathResult to read from source XML
        // use xmlBuilder to create result XML
        ...
        // return builder result
        xmlBuilder.result
    }
    .params().builder()
    .to(...)
{code}
</pre>
</div></div></td></tr></tbody></table></div>

<p>In most cases creating a result document using an XML builder goes over a large number of lines of code and you probably want to factor that code out to a <tt>Transmogrifier</tt> that is implemented in Groovy. Here's an example.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyTransmogrifier.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class MyTransmogrifier <span class="code-keyword">implements</span> Transmogrifier {

     <span class="code-object">Object</span> zap(<span class="code-object">Object</span> input, <span class="code-object">Object</span>... params) {
         <span class="code-comment">// obtain builder from params
</span>         def builder = params[0]
         <span class="code-comment">// create XML document using builder
</span>         ...
         <span class="code-comment">// <span class="code-keyword">return</span> result
</span>         builder.result
     }

}
</pre>
</div></div>

<p>Such a <tt>Transmogrifier</tt> implementation can then be included into Camel routes either directly as transmogrifier object or via a Spring bean name.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>XML transmogrifier object</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .transmogrify(<span class="code-keyword">new</span> MyTransmogrifier())
    .params().builder()
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>XML transmogrifier bean</b></div><div class="codeContent panelContent">
<pre class="code-java">from('direct:input1')
    .transmogrify('myTransmogrifierBean')
    .params().builder()
</pre>
</div></div>
<h1><a name="IPFreference-single-MappingService"></a>Mapping Service</h1>

<h2><a name="IPFreference-single-Overview"></a>Overview</h2>

<p>The <tt>org.openehealth.ipf.commons.map.MappingService</tt> interface deals with the requirement that message processing often involves mapping between code systems, i.e. from one set of codes into a corresponding set of codes. For example, HL7 version 2 to HL7 version 3 use different code systems for most coded values like message type, gender, clinical encounter type, marital status codes, address and telecommunication use codes, just to mention a few. <tt>MappingService</tt> implementations provide the mapping logic, which can be a simple <tt>java.util.Map</tt>, but can also be a facade for a remote terminology service.<br>
The <tt>commons-map</tt> component extends the <tt>java.lang.String</tt> and <tt>java.util.Collection</tt> classes with methods targeted at mapping.</p>

<p>The <tt>commons-map</tt> library provides one MappingService implementation (<tt>org.openehealth.ipf.commons.map.BidiMappingService</tt>), which implements</p>
<ul>
	<li>bidirectional mapping</li>
	<li>mapping of arbitrary objects</li>
	<li>definitions of mappings using external Groovy Scripts</li>
</ul>


<h2><a name="IPFreference-single-ConfiguringtheMappingService"></a>Configuring the Mapping Service</h2>

<p>This section explains how to configure IPF's BidiMappingService. </p>

<h3><a name="IPFreference-single-UsingtheBidiMappingServicebean"></a>Using the BidiMappingService bean</h3>

<ol>
	<li>Add the necessary dependencies to your project's Maven 2 descriptor.
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for accessing and manipulating HL7 v2 structures --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.commons<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>commons-map<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
...
</pre>
</div></div>
<p><br clear="all"></p></li>
	<li>To use <tt>BidiMappingService</tt>, define a Spring bean and initialize it with the external Groovy resource:
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

...
<span class="code-tag"><span class="code-comment">&lt;!-- Groovy class that provides the operations on the mappings --&gt;</span></span>
<span class="code-tag">&lt;bean id=<span class="code-quote">"myMappingService"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span>&gt;</span>
   <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScript"</span> value=<span class="code-quote">"classpath:example.groovy"</span>/&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div></li>
	<li>Register the Mapping Service extensions in the Spring Application Context of your application
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">
...

    <span class="code-tag"><span class="code-comment">&lt;!-- Mapping extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"mappingExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.extend.MappingExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"myMappingService"</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Register the extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                ...
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"mappingExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    ...

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div></li>
</ol>


<h3><a name="IPFreference-single-UsingtheBidiMappingServiceConfigurerbean"></a>Using the BidiMappingServiceConfigurer bean</h3>

<p>The <tt>BidiMappingServiceConfigurer</tt> supports distributed configurations of a <tt>BidiMappingService</tt> instance. This is useful when several components want to contribute mappings to a shared mapping service. Each component defines a <tt>BidiMappingServiceConfigurer</tt> bean in its application context that references the shared mapping service.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-main.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;bean id=<span class="code-quote">"sharedMappingService"</span> 
    class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span>&gt;
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-component1.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;bean id=<span class="code-quote">"bidiMappingServiceConfigurer1"</span> 
    class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingServiceConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"sharedMappingService"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScript"</span> value=<span class="code-quote">"configurer1.map"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-component2.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;bean id=<span class="code-quote">"bidiMappingServiceConfigurer2"</span> 
    class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingServiceConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"sharedMappingService"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScripts"</span>&gt;</span>
        <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>configurer2.map<span class="code-tag">&lt;/value&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>configurer3.map<span class="code-tag">&lt;/value&gt;</span>
        <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>From IPF version 2.3.0 the <tt>BidiMappingServiceConfigurer</tt> is marked as deprecated. The application developers are encouraged to use the new <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extension+mechanism" title="IPF extension mechanism">IPF extension mechanism</a> instead.</p></td></tr></tbody></table></div>

<h2><a name="IPFreference-single-DefinitionofMappings"></a>Definition of Mappings</h2>

<p>A mapping example is displayed below. The example maps a couple of codes from HL7-related code systems (see <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Messaging" title="HL7 Messaging">HL7 Messaging</a> for more details on IPF's HL7 support).</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>example.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">mappings = {
   encounterType(['2.16.840.1.113883.12.4','2.16.840.1.113883.5.4'],
      E : 'EMER',
      I : 'IMP',
      O : 'AMB'
)

   vip(['2.16.840.1.113883.12.99','2.16.840.1.113883.5.1075'],
      Y : 'VIP',
      (ELSE) : { it }
)

   messageType(
      'ADT^A01' : 'PRPA_IN402001'
     (ELSE) : { <span class="code-keyword">throw</span> <span class="code-keyword">new</span> HL7Exception(<span class="code-quote">"Invalid message type"</span>, 207) }
   )
}
</pre>
</div></div>

<p>This defines three mappings (<tt>encounterType</tt>, <tt>vip</tt>, and <tt>messageType</tt>), having an optional definition for ISO Object Identifiers (OIDs) to identify key and value code systems. The <tt>encounterType</tt> mapping has three entries, while the <tt>vip</tt> and <tt>messageType</tt> mappings have only one.</p>

<p>You can use the mappingService directly, or you can take advantage of the <tt>MappingExtension</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>example.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">   def x = mappingService.get('encounterType', 'E') <span class="code-comment">// using the service bean reference
</span>   def y = 'E'.map('encounterType')   <span class="code-comment">// more concise: using the dynamic map method
</span>   def z = 'E'.mapEncounterType()     <span class="code-comment">// even more concise
</span>   <span class="code-comment">// x == y == z == 'EMER'</span>
</pre>
</div></div>


<p>The ELSE entry is called on MappingService.get() request with unknown keys. ELSE can be</p>
<ul>
	<li>a Closure, which takes the key as parameter and is then executed</li>
	<li>any other Object o, which will <tt>return o.toString()</tt>.</li>
</ul>


<p>In the example above,</p>
<ul>
	<li>for the <tt>vip</tt> mapping the key is returned, so that <tt>mappingService.get('vip', 'X') == 'X'</tt></li>
	<li>for the <tt>messageType</tt> mapping, an Exception is thrown.</li>
</ul>


<p>The services also allow mapping in the backward direction:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>example.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">   def x = mappingService.getKey('vip', 'VIP')  <span class="code-comment">// Y
</span>   def y = 'VIP'.mapReverse('vip')              <span class="code-comment">// Y
</span>   def z = 'VIP'.mapReverseVip()                <span class="code-comment">// Y</span>
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Ambiguous mappings</b><br><p>In case that a mapping definition maps more than one key to the same value (e.g. A-&gt;C and B-&gt;C), the backward mapping only contains the last entry, i.e. C-&gt;B.</p></td></tr></tbody></table></div>

<p><tt>BidiMappingService</tt> also can be initialized using a list of mapping files:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
&lt;!-- Groovy class that provides the operations on the mappings --&gt;
&lt;bean id=<span class="code-quote">"myMappingService"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span>&gt;
  &lt;property name=<span class="code-quote">"mappingScripts"</span>&gt;
    &lt;list&gt;
      &lt;value&gt;classpath:example1.groovy&lt;/value&gt;
      &lt;value&gt;classpath:example2.groovy&lt;/value&gt;
    &lt;/list&gt;
  &lt;/property&gt;
&lt;/bean&gt;
...
</pre>
</div></div>

<p>Conflicting mappings are overridden by later list entries, i.e. mappings defined in <tt>example2.groovy</tt> override existing mappings defined in <tt>example1.groovy</tt>.</p>

<p>Furthermore, <tt>BidiMappingService</tt> supports default reverse mappings, i.e. you can specify an ELSE mapping also from the reverse direction:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>example2.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">mappings = {
  reverseMapping(
    key            : 'value',
    (ELSE)         : 'unknownKey',
    'unknownValue' : (ELSE)
  )

  reverseMappingWithClosures(
    key       : 'value',
    (ELSE)    : 'unknownKey',
    { 'key' } : (ELSE)
  )
}
</pre>
</div></div>

<p>The <tt>reverseMappingWithClosures</tt> mapping also demonstrates how to use a closure in order to return a default key that is already defined as key for a regular mapping.</p>
<h1><a name="IPFreference-single-HL7v2Messaging"></a>HL7 v2 Messaging</h1>

<p>This chapter describes how IPF facilitates HL7 v2 messaging.</p>
<hr>

<h2><a name="IPFreference-single-HL7v2MessagingOverview"></a>HL7 v2 Messaging Overview</h2>

<p>HL7's Version 2.x messaging standard is the workhorse of electronic data exchange in the clinical domain and arguably the most widely implemented standard for healthcare in the world. There have been seven releases of the Version 2.x Standard to date.</p>

<p>The HL7 Standard covers messages that exchange information in the general areas of Patient Demographics, Patient Charges and Accounting, Clinical Observations, Medical Records Document Management, and many more.</p>

<p>HL7 Version 2.6 represents HL7's latest development efforts to the line of Version 2 Standards that date back to 1989.</p>
<h2><a name="IPFreference-single-Features"></a>Features</h2>

<p>IPF's HL7 v2 support does not reinvent the wheel. It leverages HAPI (<a href="http://hl7api.sourceforge.net/" rel="nofollow">http://hl7api.sourceforge.net</a>), one of the most proven HL7 v2 Java libraries. It provides, however, features on top of HAPI that adds a lot of convenience compared to the original API, and retrofits some missing items.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Feature </th>
<th class="confluenceTh"> Functionality </th>
<th class="confluenceTh"> See </th>
</tr>
<tr>
<td class="confluenceTd"> HL7v2 DSL </td>
<td class="confluenceTd"> A domain specific language based on the Groovy programming language for manipulating HL7 messages. HL7 message processing in IPF applications becomes almost trivial. </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+DSL" title="HL7 DSL">HL7 DSL</a> </td>
</tr>
<tr>
<td class="confluenceTd"> Extended HL7 Parser classes and Factories </td>
<td class="confluenceTd"> For more flexibility in defining valid sets of HL7 structures </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Extensions+to+HAPI" title="Extensions to HAPI">Extensions to HAPI</a> </td>
</tr>
<tr>
<td class="confluenceTd"> Convenient creation of HL7 messages </td>
<td class="confluenceTd"> API for creating new messages and responses, in particular HL7 acknowledgements. </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Extensions+to+HAPI" title="Extensions to HAPI">Extensions to HAPI</a> </td>
</tr>
<tr>
<td class="confluenceTd"> HL7 v2 Validation API </td>
<td class="confluenceTd"> A specialized DSL dedicated to defining validation rules for HL7 messages </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Message+Validation" title="HL7 Message Validation">HL7 Message Validation</a> </td>
</tr>
<tr>
<td class="confluenceTd"> Camel adapters </td>
<td class="confluenceTd"> Camel data types for using the HL7 v2 DSL and Validation inside Camel integration routes. </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/Camel+DSL+Extensions+for+HL7" title="Camel DSL Extensions for HL7">Camel DSL Extensions for HL7</a> </td>
</tr>
</tbody></table>
<h2><a name="IPFreference-single-ConfiguringHL7v2Messaging"></a>Configuring HL7 v2 Messaging</h2>

<p>This section explains how to configure IPF's HL7 messaging support. </p>

<p>Make sure you already have correctly set up</p>
<ul>
	<li>Maven 2.0.9 or better</li>
	<li>a possibly empty IPF project</li>
</ul>


<p>After configuration you will be able to use the HL7 v2 related DSLs in a standalone scenario.</p>

<ol>
	<li>Add the necessary dependencies to your project's Maven 2 descriptor.
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml for standalone scenario</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for accessing and manipulating HL7 v2 structures --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.modules<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>modules-hl7dsl<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>

<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for extending the API of the HAPI HL7 library --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.modules<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>modules-hl7<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
...
</pre>
</div></div>
<p><br clear="all"></p></li>
	<li>Depending on the HL7 v2 versions, add the corresponding dependencies to the HAPI library. HAPI supports versions 2.2 through 2.6.
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for HL7 v2.5 --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>ca.uhn.hapi<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>hapi-structures-v25<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>1.0.1<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>

<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for HL7 v2.5.1 --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>ca.uhn.hapi<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>hapi-structures-v251<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>1.0.1<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
...
</pre>
</div></div>
<p><br clear="all"></p></li>
	<li>Register the HL7 extensions in the Spring Application Context of your application
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

    <span class="code-tag"><span class="code-comment">&lt;!-- Setting up the Camel context --&gt;</span></span>

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
       <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span> /&gt;</span>
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>

    <span class="code-tag">&lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span> class=<span class="code-quote">"..."</span> /&gt;</span>

    ...

    <span class="code-tag"><span class="code-comment">&lt;!-- HAPI extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"hapiModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.extend.HapiModelExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"..."</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Register the extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                ...
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"hapiModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    ...

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div></li>
</ol>

<h2><a name="IPFreference-single-HL7v2DSL"></a>HL7 v2 DSL</h2>

<p>This section gives a detailed introduction to the Groovy-based HL7 v2 domain specific language.</p>

<p>The HL7 v2 DSL provides a unique programming interface for handling HL7 messages. Its API aligns very closely with natural language and the syntax of HL7 v2 as often seen in specifications and requirements. You don't need to translate anymore from the language of the "HL7 world" into the language of the "developer's world".<br>
The DSL can be subdivided into the following groups of functionality:</p>

<ul>
	<li>Construction: copying or loading messages from file or a plain string</li>
	<li>Navigation: accessing HL7 v2 substructures like groups, segments, or fields</li>
	<li>Manipulation: assigning new values to HL7 structures</li>
	<li>Rendering: writing a message or parts thereof to their external representation</li>
</ul>


<p>For the purpose of demonstrating the DSL, a <tt>ORU_R01</tt> message of HL7 v2.5 is taken as example.</p>

<h3><a name="IPFreference-single-Construction"></a>Construction</h3>

<p>Use <tt>load</tt> to construct a message from an HL7 file on the classpath or from an <tt>InputStream</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> <span class="code-keyword">static</span> org.openehealth.ipf.modules.hl7dsl.MessageAdapters.*

def message = load('oru-r01-25.hl7')
</pre>
</div></div>

<p>Alternatively, the message can be created from a string representation of a message directly:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> <span class="code-keyword">static</span> org.openehealth.ipf.modules.hl7dsl.MessageAdapters.*

def messageString = ... <span class="code-comment">// an HL7 message string
</span>def message = make(messageString)
</pre>
</div></div>

<p>You can easily create a message as a copy of an existing message:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def messageCopy = message.copy()
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Anonymous types</b><br><p>Groovy doesn't require to specify the exact <em>type</em> of a variable, instead you can use the <tt>def</tt> keyword. For HL7 v2 processing, this is a very convenient feature that saves you many explicit type checks and type casts.</p></td></tr></tbody></table></div> 

<p>The message object that is constructed is a <tt>org.openehealth.ipf.modules.hl7dsl.MessageAdapter</tt> object that wraps the original HAPI message object. The complete HL7 v2 DSL only works with <tt>MessageAdapter</tt> objects. If you have a native HAPI message object, you can wrap it manually:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">ca.uhn.hl7v2.model.Message hapiMessage = ....
MessageAdapter message = <span class="code-keyword">new</span> MessageAdapter(hapiMessage)
</pre>
</div></div>


<h3><a name="IPFreference-single-Navigation"></a>Navigation</h3>

<p>The DSL offers a position-based navigation of HL7 structures and fields. It's all valid Groovy Syntax, accomplished by operator overloading and metaclass programming, so you don't need a intermediate step that parses the expressions (cf. the <tt>Terser</tt> class in HAPI.)</p>

<h4><a name="IPFreference-single-Navigationtogroupsandsegments"></a>Navigation to groups and segments</h4>

<p>Groups and Segments can be accessed by name like an object property. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def msh   = message.MSH               <span class="code-comment">// Obtain the Message Header Segment
</span>
def group = message.PATIENT_RESULT(0) <span class="code-comment">// Obtain the first PATIENT_RESULT group
</span>def pid   = group.PATIENT.PID         <span class="code-comment">// Obtain the PID segment contained inside the PATIENT group.            </span>
</pre>
</div></div>

<p>Note that although the HL7 DSL hides much of the technical details and APIs, you still require profound knowledge of the HL7 specifications when working with HL7 messages. In the example above, e.g. you need to know that for <tt>ORU_R01</tt> structures the PID segment is nested inside two groups.</p>

<h4><a name="IPFreference-single-Navigationtofields"></a>Navigation to fields</h4>

<p>Obtaining fields is similar to obtaining structures except that fields are often referred to by number instead of by name. Fields are accessed like an array field; components in a composite field are accessed like a two-dimension array:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def composite = message.MSH[3]     <span class="code-comment">// MSH-3 = sending application composite field
</span>def primitive = message.MSH[3][2]  <span class="code-comment">// MSH-3-2 = universal ID primitive field</span>
</pre>
</div></div>

<p>It's also possible to navigate by specifying the field names instead of the number.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def primitive = message.MSH.sendingApplication.universalIDType
</pre>
</div></div>

<p>Take care, however, that along with the change of internal message structures, individual field names change between HL7 versions although they refer to the same position of the field in a segment. If you don't know the version of the HL7 message in advance, better use the more concise index notation. Example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def messageType = message.MSH.messageType.messageType <span class="code-comment">// only works <span class="code-keyword">for</span> HL7 v2.2 and 2.3 messages
</span>messageType = message.MSH.messageType.messageCode     <span class="code-comment">// only works <span class="code-keyword">for</span> HL7 v2.4\+ messages
</span>messageType = message.MSH[9][1]                       <span class="code-comment">// works <span class="code-keyword">for</span> all HL7 versions</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Fieldvalues"></a>Field values</h4>

<p>Field variables render to their string encoding e.g. when printed, by implementing an appropriate <tt>toString()</tt> method. However, for literal comparison or variable assignment you<br>
use the <tt>value</tt> property to obtain the value of a primitive field.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-object">String</span> primitiveValue = message.MSH[3][2].value
primitiveValue = message.MSH[3][2].toString()
<span class="code-keyword">if</span> (<span class="code-quote">"xyz"</span>.equals(message.MSH[3][2].value)) {
   ...
}
</pre>
</div></div>

<h4><a name="IPFreference-single-HL7NullValues"></a>HL7 Null Values</h4>

<p>The HL7 DSL treats explicit HL7 null values (two double quotes <tt>""</tt>, cf. HL7 2.5, Final, Section 2.5.3) in a special way.</p>

<ul>
	<li><tt>value</tt> will convert <tt>""</tt> into an empty string</li>
	<li><tt>originalValue</tt> returns the double quotes</li>
	<li><tt>isNullValue()</tt> returns <tt>true</tt>, if the original value of the field was <tt>""</tt>.</li>
</ul>


<p>Therefore, if <tt>PID[11](0)[1][1]</tt> (first Street or Mailing Address) was <tt>""</tt>, the following assertions are true:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">assertEquals ''  , pid[11](0)[1][1].value
assertEquals '""', pid[11](0)[1][1].originalValue
assertTrue pid[11](0)[1][1].isNullValue()
</pre>
</div></div>

<h4><a name="IPFreference-single-Repetitions"></a>Repetitions</h4>

<p>Groups, Segments and Fields may repeat. Use parentheses like with regular method calls in order to obtain a certain element of a repeating structure. The next example shows how to navigate in a nested repetitive structure.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def group = message.PATIENT_RESULT(0).PATIENT  <span class="code-comment">// access first PATIENT_RESULT group
</span>def nk1   = group.NK1(0)                       <span class="code-comment">// access first NK1 segment
</span>def phone = nk1[5](0)                          <span class="code-comment">// access first NK1-5 field (phone)</span>
</pre>
</div></div>

<p>To get a <em>list</em> of elements of a repeating structure, simply omit the index so that it looks like a method call without parameters.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def phones = nk1[5]()  <span class="code-comment">// returns a list of phone elements</span>
</pre>
</div></div>

<p>Furthermore, repetitions can be counted:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def count = nk1.count(5)      <span class="code-comment">// returns size of the phone number list</span>
</pre>
</div></div>


<h4><a name="IPFreference-single-Smartnavigation"></a>Smart navigation</h4>

<p>Navigating HL7 messages as described above usually requires knowledge about the specified message structure, which is often not visible by looking at the printed message:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def nk1 = message.PATIENT_RESULT(0).PATIENT.NK1(0) <span class="code-comment">// Repetitions of groups or segments:
</span>def phoneNumber = nk1[5](0)[1]                     <span class="code-comment">// Repetition of fields
</span>def familyName  = nk1[2][1][1]                     <span class="code-comment">// Name is first component of FN composite type</span>
</pre>
</div></div>

<p>To make things worse, the internal structure changes between HL7 versions. In higher versions, primitive fields are sometimes replaced with composite fields, having the so far used primitive as first component. This appears to be backwards compatible on printed messages, but requires different DSL expressions when obtaining field values.</p>

<p><em>Smart navigation</em> resolves these problems by assuming reasonable defaults when repetitions or component operators are omitted:</p>

<ul>
	<li>If a repetition operator <tt>()</tt> is omitted, the first repetition of a group, segment or field is assumed</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">assert</span> message.PATIENT_RESULT(0).PATIENT == message.PATIENT_RESULT.PATIENT <span class="code-comment">// group
</span><span class="code-keyword">assert</span> group.NK1(0)[5](0)[1].value == group.NK1[5](0)[1].value             <span class="code-comment">// segment
</span><span class="code-keyword">assert</span> group.NK1(0)[5](0)[1].value == group.NK1[5][1].value                <span class="code-comment">// field</span>
</pre>
</div></div>

<ul>
	<li>If a component is omitted, the first component or subcomponent of a composite is assumed</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">assert</span> group.NK1(0)[5](0)[1].value == group.NK1[5].value
<span class="code-keyword">assert</span> group.NK1(0)[2][1][1].value == message.NK1[2].value
</pre>
</div></div>

<ul>
	<li>Consequently, Smart Navigation also works with HL7 Null values:</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">assertEquals ''  , pid[11][1][1].value           <span class="code-comment">// 'full' expression
</span>assertEquals '""', pid[11][1][1].originalValue
assertTrue pid[11][1][1].isNullValue()
assertEquals ''  , pid[11].value                 <span class="code-comment">// 'smart' expression
</span>assertEquals '""', pid[11].originalValue
assertTrue pid[11].isNullValue()
</pre>
</div></div>

<p>Using smart navigation, the navigation expressions are usually shorter and less error-prone. Furthermore, in many cases the same expressions can be used for different HL7 versions that define new structures in a backward-compatible way.</p>


<h4><a name="IPFreference-single-Accesstargetobjects"></a>Access target objects</h4>

<p>Objects of the HAPI DSL layer internally reference objects defined in the HAPI <tt><a href="http://hl7api.sourceforge.net/apidocs/ca/uhn/hl7v2/model/package-summary.html" rel="nofollow">ca.uhn.hl7v2.model</a></tt> package. These can be accessed via the <tt>target</tt> property.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">ca.uhn.hl7v2.model.Segment hapiSegment = nk1.target
</pre>
</div></div>

<p>However, this is usually not needed because any property access or method call not applicable to HAPI DSL model objects is forwarded to target objects. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-object">int</span> cardinality1 = message.NK1(0).target.getMaxCardinality(3)
<span class="code-object">int</span> cardinality2 = message.NK1(0).getMaxCardinality(3)         <span class="code-comment">// equivalent
</span><span class="code-object">String</span> segmentName1 = message.NK1(0).target.name
<span class="code-object">String</span> segmentName2 = message.NK1(0).name                      <span class="code-comment">// equivalent</span>
</pre>
</div></div>

<p>Typically you need to reference the <tt>target</tt> object e.g. when passing control to code that is unaware of the HL7 DSL or explicitly requires HAPI classes.</p>

<h4><a name="IPFreference-single-GroupandSegmentemptyness%28asofIPF2.1%29"></a>Group and Segment emptyness (as of IPF 2.1)</h4>

<p><em>Emptyness</em> for segments and groups is defined as follows:</p>

<ul>
	<li>a segment is empty if all fields are empty</li>
	<li>a group is empty if all contained groups and segments are empty</li>
</ul>


<p>For brevity, the <tt>GroupAdapter</tt> and <tt>SegmentAdapter</tt> classes both implement an <tt>isEmpty()</tt> method.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">assert</span> msg1.PATIENT_RESULT.PATIENT.PV1.isEmpty() == <span class="code-keyword">false</span> <span class="code-comment">// not empty because some fields are filled
</span><span class="code-keyword">assert</span> msg1.PATIENT_RESULT.PATIENT.PV2.isEmpty() == <span class="code-keyword">true</span>  <span class="code-comment">// empty because all fields are empty
</span><span class="code-keyword">assert</span> msg1.PATIENT_RESULT.isEmpty() == <span class="code-keyword">false</span>             <span class="code-comment">// non empty because it contains a non-empty group</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Iterativefunctions%28asofIPF2.1%29"></a>Iterative functions (as of IPF 2.1)</h4>

<p>As HL7 messages are compound structures, you can imagine to iterate over them. Thus, the HL7 DSL implements iterators for HL7 messages and groups. Due to their nested structures, iteration is implemented as a depth first traversal over all non-empty substructures, i.e. non-empty groups and segments (see previous section). </p>

<p>An <tt>iterator()</tt> function is defined for the <tt>GroupAdapter</tt> and <tt>MessageAdapter</tt> classes. You seldomly will use <tt>iterator()</tt> directly, however, a lot of Groovy's iterative functions only rely on the existence of an iterator function. As a consequence, you can e.g. use the following Groovy functions on HL7 messages and groups:</p>

<ul>
	<li>each</li>
	<li>eachWithIndex</li>
	<li>every</li>
	<li>any</li>
	<li>collect</li>
	<li>find</li>
	<li>findAll</li>
	<li>split</li>
	<li>for statement</li>
	<li>the spread operator</li>
</ul>


<p>Some examples:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-comment">// Count the number of substructures
</span><span class="code-object">int</span> numberOfStructures = 0
msg1.each { numberOfStructures++ }
println <span class="code-quote">"The message has $numberOfStructures substructures"</span>

<span class="code-comment">// Check <span class="code-keyword">if</span> there are any groups
</span><span class="code-object">boolean</span> hasGroups = msg1.any { it <span class="code-keyword">instanceof</span> GroupAdapter }

<span class="code-comment">// A list of the names of all substructures
</span>def names = msg1*.name

<span class="code-comment">// For loop
</span><span class="code-keyword">for</span> (def structure in msg1) {
  <span class="code-comment">// <span class="code-keyword">do</span> something with structure
</span>}

<span class="code-comment">// Find the first nested OBX segment
</span>def obx = msg1.find { it.name == 'OBX' }
obx = msg1.findOBX() <span class="code-comment">// shortcut notation
</span>
<span class="code-comment">// Find all nested OBX segments
</span>def obxList = msg1.findAll { it.name == 'OBX' }
obxList = msg1.findAllOBX() <span class="code-comment">// shortcut notation</span>
</pre>
</div></div>

<p>The find/findAll methods are handy in the following use cases:</p>
<ul>
	<li>accessing data in a deeply nested message structure that is not visible in the pipe-encoded representation.</li>
	<li>uniformly accessing corresponding fields in messages with different structure</li>
	<li>messages that have a group structure in a newer HL7 version while having a flat structure in previous versions.</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def patientName = msg1.PATIENT_RESULT(0).PATIENT.PID[5][1].value
patientName = msg1.findPID()[5][1].value  <span class="code-comment">// equivalent, shorter, and group-structure-agnostic</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Manipulation"></a>Manipulation</h3>

<p>Message manipulation is as straightforward as navigation. You navigate to a segment or field and assign it a new object.</p>

<h4><a name="IPFreference-single-Manipulatingsegments"></a>Manipulating segments</h4>

<p>Currently you can change segments only, assignment to groups isn't supported yet.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">msg1.EVN = msg2.EVN     <span class="code-comment">// copy over EVN segment from msg2 to msg1
</span>msg1.EVN.from(msg2.EVN) <span class="code-comment">// equivalent</span>
</pre>
</div></div>

<p>There's a dedicated method <tt>nrp(index)</tt> available for adding a repetitions to a repeating field</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def newField = message.PATIENT_RESULT(0).PATIENT.NK1(0).nrp(5) <span class="code-comment">// Adds a repetition to NK1[5]</span>
</pre>
</div></div>

<p>There are two caveats:</p>

<p>First, segments are copied with the assignment (i.e. <tt>=</tt>) operator only if the assignment operator follows a property read-access operation (via <tt>.<em>property</em></tt> or ['<em>property</em>']). If you make an assignment directly to a segment <em>variable</em>, you assign object references.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def mySegment = ...
message.EVN = mySegment          <span class="code-comment">// mySegment copied into message.EVN
</span>
def targetSegment = message.EVN
targetSegment = mySegment        <span class="code-comment">// message.EVN remains unchanged, 
</span>                                 <span class="code-comment">// targetSegment and mySegment reference the
</span>                                 <span class="code-comment">// same object</span>
</pre>
</div></div>

<p>Second, when you obtain a segment from a repetition using using the <tt>()</tt> operator (method call) then you cannot assign directly because this will break Groovy/Java syntax. In this case, you must use the <tt>from</tt> method instead.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def mySegment = ...              <span class="code-comment">// assignment to another NK1 segment instance
</span>def group = message.PATIENT_RESULT(0).PATIENT
group.NK1(0) = 'abc'             <span class="code-comment">// syntax error!
</span>msg1.NK1(0) = mySegment          <span class="code-comment">// syntax error!
</span>msg1.NK1(0).from(mySegment)      <span class="code-comment">// works!</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Manipulatingfields"></a>Manipulating fields</h4>

<p>To change a field value, navigate to the field (either by name or index, as shown above) and either assign it a string value or another field. Fields may also be changed by using the <tt>from()</tt> method.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def nk1      = message.PATIENT_RESULT(0).PATIENT.NK1(0)
def otherNk1 = message.PATIENT_RESULT(0).PATIENT.NK1(0)
nk1[4]       = otherNk1[4]       <span class="code-comment">// copy address
</span>nk1[4][4]    = otherNk1[4][4]    <span class="code-comment">// copy state or province only
</span>nk1[4][4].from(otherNk1[4][4])   <span class="code-comment">// equivalent
</span>
nk1[4][4]    = 'NY'              <span class="code-comment">// set state or province directly</span>
</pre>
</div></div>

<p>There are the same caveats with manipulating fields as with manipulating segments:<br>
First, Composites are copied with the assignment (i.e. <tt>=</tt>) operator only if the assignment operator follows a subscript (i.e. <tt>[]</tt>) operation. If you make an assignment to a composite variable directly you assign the respective object references</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def otherXad = ...      <span class="code-comment">// a contact address = HL7 composite type XAD
</span>def nk1 = group.NK1(0)
nk1[4] = otherXad       <span class="code-comment">// otherXad copied into nk1[4]
</span>
def xad = nk1[4]
xad = otherXad          <span class="code-comment">// nk1[4] remains unchanged, xad and otherXad reference 
</span>                        <span class="code-comment">// the same object</span>
</pre>
</div></div>

<p>Second, when you obtain a field from a repetition using using the <tt>()</tt> operator (method call) then you cannot assign directly because this will break Groovy/Java syntax. In this case, you must use the <tt>from</tt> method instead.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def field = ...                <span class="code-comment">// a primitive or composite field
</span>def other = ...                <span class="code-comment">// a primitive or composite field to be assigned
</span>field(0) = 'abc'               <span class="code-comment">// syntax error!
</span>field(0) = other               <span class="code-comment">// syntax error!
</span>field(0).from(other)           <span class="code-comment">// works <span class="code-keyword">for</span> primitives and composites
</span>field(0).value = 'abc'         <span class="code-comment">// works <span class="code-keyword">for</span> primitives only</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Addingrepetitions"></a>Adding repetitions</h4>

<p>Repetitions occur in HL7 groups, segments and fields. When creating a new message or manipulating an parsed message, it may become necessary to add a repeating element. A good example is the <tt>ORU_R01</tt> message in HL7 v2.5, which includes nested repeatable groups, which in return contain repeatable segments that have repeatable fields.</p>

<p>There are two ways to add a repeating element: explicitly and implicitly.<br>
Explicitly calling nrp() (for "new repetition") adds an element and returns it to the caller. The argument is of type <tt>String</tt> for repeating structures or <tt>int</tt> for repeating fields:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def message       = <span class="code-keyword">new</span> MessageAdapter(<span class="code-keyword">new</span> ORU_R01())
def patientResult = message.nrp('PATIENT_RESULT')          <span class="code-comment">// add a PATIENT_RESULT group
</span>def order         = patientResult.nrp('ORDER_OBSERVATION') <span class="code-comment">// add a ORDER_OBSERVATION group
</span>def observation   = order.nrp('OBSERVATION')               <span class="code-comment">// add a OBSERVATION group
</span>def obx5          = observation.OBX.nrp(5)                 <span class="code-comment">// add a OBX-5 field</span>
</pre>
</div></div>

<p>For consistency with HAPI, an element is also added if you access a repetition that does not exist yet.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def message       = <span class="code-keyword">new</span> MessageAdapter(<span class="code-keyword">new</span> ORU_R01())
def patientResult = message.PATIENT_RESULT(0)          <span class="code-comment">// add a PATIENT_RESULT group
</span>def order         = patientResult.ORDER_OBSERVATION(0) <span class="code-comment">// add a ORDER_OBSERVATION group
</span>def observation   = order.OBSERVATION(0)               <span class="code-comment">// add a OBSERVATION group
</span>def obx5          = observation.OBX[5](0)              <span class="code-comment">// add a OBX-5 field</span>
</pre>
</div></div>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Index out of bounds!</b><br><p>The DSL does not distinguish whether the new repetition would be the next one to be created or not. If there's no PATIENT_RESULT group in the message, then <tt>msg.PATIENT_RESULT(8)</tt> does not silently add seven empty groups and returns the eighth! Instead only one group is added and returned, i.e. you actually obtain <tt>msg.PATIENT_RESULT(0)</tt>.</p></td></tr></tbody></table></div> 

<p>Together with the Smart Navigation feature, it is particularly convenient that accessing a repeated element without index does a default to its first repetition. Hence, the code above can be condensed to:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def message = <span class="code-keyword">new</span> MessageAdapter(<span class="code-keyword">new</span> ORU_R01())
def obx5    = message.PATIENT_RESULT.ORDER_OBSERVATION.OBSERVATION.OBX[5]
</pre>
</div></div>


<h3><a name="IPFreference-single-Rendering"></a>Rendering</h3>

<p>Rendering writes the internal representation of a HL7 v2 message to its external representation, which is usually the ER7-encoded form with pipe field seperators.</p>

<p>To write a message to <tt>stdout</tt>, messages can be written to stream using the left-shift (<tt>&lt;&lt;</tt>) operator. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-object">System</span>.out &lt;&lt; message
</pre>
</div></div>

<p>Otherwise, using the message variable in a string context or explicitly calling <tt>toString()</tt> does the same job:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">assert</span> message.toString() == <span class="code-quote">"${message}"</span>
</pre>
</div></div>

<h2><a name="IPFreference-single-FunctionalExtensionstoHAPI"></a>Functional Extensions to HAPI</h2>

<p>While the HL7 v2 DSL has its focus on providing a domain-specific syntax to navigate in HL7 messages and changing fields within messages, the functional extensions retrofit a couple of convenient functions on top of HAPI. By means of Groovy metaprogramming, however, it looks like these extensions are part of the HAPI API, i.e. you can call the methods on both the raw HAPI objects and the wrapper objects invisibly added by the HL7 v2 DSL.</p>

<p>It's important to note that the HL7 v2 DSL and the functional extensions do not depend on each other - you can employ any one or both feature sets as you like.</p>

<h3><a name="IPFreference-single-HL7PipeParserandcustomModelClassFactory"></a>HL7 PipeParser and custom ModelClassFactory</h3>

<p>In order to instantiate concrete implementations of Message, Group, Segment etc, the HAPI Parsers use a <tt>ModelClassFactory</tt> member object that looks up classes for these model components. The default implementation provides access to model components as specified in the HL7 specs.<br>
In real world HL7 projects you frequently need to deal with non-standard HL7 "dialects" which are not covered by the specification and causes the parser to fail or generate "generic" model classes when used out-of-the-box. Although it's possible to implement a custom <tt>ModelClassFactory</tt>, there remains a lack of flexibility, e.g. it's not possible to use two distinct sets of "dialects" within one Java process. The HAPI extension library offers a solution for this limitation.</p>

<h4><a name="IPFreference-single-CustomModelClassFactory"></a>CustomModelClassFactory</h4>

<p>The factory implementation <tt>org.openehealth.ipf.modules.hl7.parser.CustomModelClassFactory</tt> can be configured to map a HL7 version to a list of package names in which the HAPI model classes are looked up. If it fails to find the requested class, the call is delegated to HAPI's default implementation. Example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def customModelClasses = ['2.5' : 
                            ['com.mycompany.profile1.hl7def.v25',
                             'com.mycompany.profile2.hl7def.v25']]
def customFactory = <span class="code-keyword">new</span> CustomModelClassFactory(customModelClasses)
</pre>
</div></div>

<p>The following subpackages are looked up for the respective model classes:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> model interface </th>
<th class="confluenceTh"> package </th>
</tr>
<tr>
<td class="confluenceTd"> Message </td>
<td class="confluenceTd"> X.message </td>
</tr>
<tr>
<td class="confluenceTd"> Group </td>
<td class="confluenceTd"> X.group </td>
</tr>
<tr>
<td class="confluenceTd"> Segment </td>
<td class="confluenceTd"> X.segment </td>
</tr>
<tr>
<td class="confluenceTd"> Type </td>
<td class="confluenceTd"> X.datatype </td>
</tr>
</tbody></table>

<p>Note that the value side of the map is always a <tt>List</tt>. In the example above, the Message classes for version 2.5 are looked up in the following order:</p>

<ol>
	<li><tt>com.mycompany.profile1.hl7def.v25.message</tt></li>
	<li><tt>com.mycompany.profile2.hl7def.v25.message</tt></li>
	<li><tt>ca.uhn.hl7v2.model.v25.message</tt> (the default)</li>
</ol>


<p>If you use a custom model class factory, it's strongly recommended to provide the factory instance to the <tt>HapiModelExtension</tt> extension class. This ensures that the various extensions that create HL7 message or structures (see below for details) use this factory to create the HL7 objects.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...

    <span class="code-tag"><span class="code-comment">&lt;!-- A custom model for HL7 v2.5 message --&gt;</span></span>
    <span class="code-tag">&lt;bean id=<span class="code-quote">"myModelClassFactory"</span> class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.parser.CustomModelClassFactory"</span>&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"customModelClasses"</span>&gt;</span>
            <span class="code-tag">&lt;map&gt;</span>
                <span class="code-tag">&lt;entry key=<span class="code-quote">"2.5"</span>&gt;</span>
                    <span class="code-tag">&lt;list&gt;</span>
                        <span class="code-tag">&lt;value&gt;</span>com.mycompany.profile1.hl7def.v25<span class="code-tag">&lt;/value&gt;</span>
                        <span class="code-tag">&lt;value&gt;</span>com.mycompany.profile2.hl7def.v25<span class="code-tag">&lt;/value&gt;</span>
                    <span class="code-tag">&lt;/list&gt;</span>
                <span class="code-tag">&lt;/entry&gt;</span>
                ....
            <span class="code-tag">&lt;/map&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

...

    <span class="code-tag"><span class="code-comment">&lt;!-- HAPI extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"hapiModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.extend.HapiModelExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"..."</span> /&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"factory"</span> ref=<span class="code-quote">"myModelClassFactory"</span>/&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

...

</pre>
</div></div>

<p>Assume that a custom <tt>ADT_A01</tt> message containing a custom <tt>ZBE</tt> segment shall be defined. The code typically looks like this:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>ADT_A01.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> com.mycompany.profile1.hl7def.v25.message;

<span class="code-keyword">import</span> com.mycompany.profile1.hl7def.v25.segment.ZBE;

<span class="code-keyword">import</span> ca.uhn.hl7v2.HL7Exception;
<span class="code-keyword">import</span> ca.uhn.hl7v2.parser.ModelClassFactory;
<span class="code-keyword">import</span> ca.uhn.log.HapiLogFactory;

@SuppressWarnings(<span class="code-quote">"serial"</span>)
<span class="code-keyword">public</span> class ADT_A01 <span class="code-keyword">extends</span> ca.uhn.hl7v2.model.v25.message.ADT_A01 {

    <span class="code-keyword">public</span> ADT_T01() {
        <span class="code-keyword">super</span>();
    }

    <span class="code-keyword">public</span> ADT_T01(ModelClassFactory factory) {
        <span class="code-keyword">super</span>(factory);
        init(factory);
    }

    /**
     * Add the ZBE segment at the end of the structure
     * 
     * @param factory
     */
    <span class="code-keyword">private</span> void init(ModelClassFactory factory) {
        <span class="code-keyword">try</span> {
            add(ZBE.class, <span class="code-keyword">false</span>, <span class="code-keyword">false</span>);
        } <span class="code-keyword">catch</span> (HL7Exception e) {
            HapiLogFactory.getHapiLog(<span class="code-keyword">this</span>.getClass()).error(
                    <span class="code-quote">"Unexpected error creating message structure"</span>, e);
        }
    }

    <span class="code-keyword">public</span> ZBE getZBE() {
        <span class="code-keyword">try</span> {
            <span class="code-keyword">return</span> (ZBE) get(<span class="code-quote">"ZBE"</span>);
        } <span class="code-keyword">catch</span> (HL7Exception e) {
            <span class="code-keyword">throw</span> <span class="code-keyword">new</span> RuntimeException(e);
        }
    }

}
</pre>
</div></div>

<p>And here's an example for the custom <tt>ZBE</tt> segment class</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>ZBE.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> com.mycompany.profile1.hl7def.v25.segment;

<span class="code-keyword">import</span> java.util.Collection;

<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.model.AbstractSegment;


<span class="code-keyword">import</span> ca.uhn.hl7v2.HL7Exception;
<span class="code-keyword">import</span> ca.uhn.hl7v2.model.Group;
<span class="code-keyword">import</span> ca.uhn.hl7v2.model.Message;
<span class="code-keyword">import</span> ca.uhn.hl7v2.model.v25.datatype.*;
<span class="code-keyword">import</span> ca.uhn.hl7v2.parser.ModelClassFactory;
<span class="code-keyword">import</span> ca.uhn.log.HapiLogFactory;

/**
 * The ZBE segment is intended to be used <span class="code-keyword">for</span> information that details ADT
 * movement information. Each ADT event (i.e. admission, discharge, transfer,
 * visit) has a unique identifier to allow <span class="code-keyword">for</span> updates at a later point in time.
 * Furthermore, other medical information like diagnoses or documents can refer
 * to <span class="code-keyword">this</span> movement using the identifier as reference.
 */
@SuppressWarnings(<span class="code-quote">"serial"</span>)
<span class="code-keyword">public</span> class ZBE <span class="code-keyword">extends</span> AbstractSegment {

    /**
     * @param parent
     * @param factory
     */
    <span class="code-keyword">public</span> ZBE(Group parent, ModelClassFactory factory) {
        <span class="code-keyword">super</span>(parent, factory);
        Message message = getMessage();
        <span class="code-keyword">try</span> {
            add(EI.class, <span class="code-keyword">true</span>, 0, 999, <span class="code-keyword">new</span> <span class="code-object">Object</span>[] { message }, <span class="code-keyword">null</span>);
            add(TS.class, <span class="code-keyword">true</span>, 1, 26, <span class="code-keyword">new</span> <span class="code-object">Object</span>[] { message }, <span class="code-keyword">null</span>);
            add(TS.class, <span class="code-keyword">false</span>, 1, 26, <span class="code-keyword">new</span> <span class="code-object">Object</span>[] { message }, <span class="code-keyword">null</span>);
            add(ST.class, <span class="code-keyword">true</span>, 1, 10, <span class="code-keyword">new</span> <span class="code-object">Object</span>[] { message }, <span class="code-keyword">null</span>);
        } <span class="code-keyword">catch</span> (HL7Exception he) {
            HapiLogFactory.getHapiLog(<span class="code-keyword">this</span>.getClass()).error(
                    <span class="code-quote">"Can't instantiate "</span> + <span class="code-keyword">this</span>.getClass().getName(), he);
        }
    }

    /**
     * Returns movement ID (ZBE-1).
     * 
     * @param rep index of repeating field
     * @<span class="code-keyword">return</span> movement ID
     */
    <span class="code-keyword">public</span> EI getMovementID(<span class="code-object">int</span> rep) {
        <span class="code-keyword">return</span> getTypedField(1, rep);
    }

    /**
     * Returns movement IDs (ZBE-1).
     * 
     * @<span class="code-keyword">return</span> movement IDs
     */
    <span class="code-keyword">public</span> EI[] getMovementID() {
        Collection&lt;EI&gt; result = getTypedField(1);
        <span class="code-keyword">return</span> (EI[]) result.toArray(<span class="code-keyword">new</span> EI[result.size()]);
    }

    /**
     * Returns movement start date (ZBE-2).
     * 
     * @<span class="code-keyword">return</span> movement start date (required)
     */
    <span class="code-keyword">public</span> TS getStartMovementDateTime() {
        <span class="code-keyword">return</span> getTypedField(2, 0);
    }

    /**
     * Returns movement end date (ZBE-3).
     * 
     * @<span class="code-keyword">return</span> movement end date (optional)
     */
    <span class="code-keyword">public</span> TS getStartMovementEndTime() {
        <span class="code-keyword">return</span> getTypedField(3, 0);
    }

    /**
     * Returns movement action (ZBE-4).
     * 
     * @<span class="code-keyword">return</span> movement action (required, one of INSERT, DELETE, UPDATE, REFERENCE)
     */
    <span class="code-keyword">public</span> ST getAction() {
        <span class="code-keyword">return</span> getTypedField(4, 0);
    }

}
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>HAPI's CustomModelClassFactory</b><br><p>As of HAPI version 1.0, an equivalent of <tt>CustomModelClassFactory</tt> has been ported to the HAPI library (see <a href="http://hl7api.sourceforge.net/base/apidocs/ca/uhn/hl7v2/parser/CustomModelClassFactory.html" rel="nofollow">here</a>). It can be used and configured correspondingly.</p></td></tr></tbody></table></div>

<h4><a name="IPFreference-single-GroovyCustomModelClassFactory"></a>GroovyCustomModelClassFactory</h4>

<p>This is a variant of the <tt>CustomModelClassFactory</tt> that scans the classpath for <em>Groovy scripts</em> rather than for compiled classes. <tt>GroovyCustomModelClassFactory</tt> is configured exactly like <tt>CustomModelClassFactory</tt> (see above):</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def customModelClasses = ['2.5' : 
                            ['com.mycompany.profile1.hl7def.v25',
                             'com.mycompany.profile2.hl7def.v25']]
def customFactory = <span class="code-keyword">new</span> GroovyCustomModelClassFactory(customModelClasses)
</pre>
</div></div>

<p>Assume again that a custom <tt>ADT_A01</tt> message containing a custom <tt>ZBE</tt> segment is defined. <tt>CustomModelClassFactory</tt> looks for a <tt>com.mycompany.profile1.hl7def.v25.message.ADT_A01.class</tt> file in the classpath, while <tt>GroovyCustomModelClassFactory</tt> looks for <tt>com.mycompany.profile1.hl7def.v25.message.ADT_A01.groovy</tt> - a plain Groovy script. Instead of just loading a class, <tt>GroovyCustomModelClassFactory</tt> also compiles the script at load time.</p>

<p>The definition of the ADT_A01.groovy custom message looks only slightly different:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>ADT_A01.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> com.mycompany.profile1.hl7def.v25.message


<span class="code-keyword">import</span> ca.uhn.hl7v2.HL7Exception
<span class="code-keyword">import</span> ca.uhn.hl7v2.parser.ModelClassFactory
<span class="code-keyword">import</span> ca.uhn.log.HapiLogFactory

@SuppressWarnings(<span class="code-quote">"serial"</span>)
<span class="code-keyword">public</span> class ADT_A01 <span class="code-keyword">extends</span> ca.uhn.hl7v2.model.v25.message.ADT_A01 {

    <span class="code-keyword">public</span> ADT_T01() {
        <span class="code-keyword">super</span>()
    }

    <span class="code-keyword">public</span> ADT_T01(ModelClassFactory factory) {
        <span class="code-keyword">super</span>(factory)
        init(factory)
    }

    /**
     * Add the ZBE segment at the end of the structure. Because the ZBE segment is a (uncompiled)
     * Groovy script, use the addSegment method as shown below, so that the ZBE.groovy file is
     * looked up and loaded.
     * 
     * @param factory
     */
    <span class="code-keyword">private</span> void init(ModelClassFactory factory) {
        <span class="code-keyword">try</span> {
            addSegment('ZBE', <span class="code-keyword">false</span>, <span class="code-keyword">false</span>);
        } <span class="code-keyword">catch</span> (HL7Exception e) {
            HapiLogFactory.getHapiLog(<span class="code-keyword">this</span>.getClass()).error(
                    <span class="code-quote">"Unexpected error creating message structure"</span>, e);
        }
    }
    
    <span class="code-comment">// We can not really <span class="code-keyword">return</span> a typed ZBE segment here, because the segment is not loaded yet.
</span>
    <span class="code-keyword">public</span> def getZBE() {
        <span class="code-keyword">try</span> {
            <span class="code-keyword">return</span> get(<span class="code-quote">"ZBE"</span>);
        } <span class="code-keyword">catch</span> (HL7Exception e) {
            <span class="code-keyword">throw</span> <span class="code-keyword">new</span> RuntimeException(e);
        }
    }

}
</pre>
</div></div>

<p>In general, HL7 custom structures loaded with the <tt>GroovyCustomModelClassFactory</tt> are meant to be used in<br>
dynamically typed environment (e.g. Groovy classe/scripts), and particularly in conjunction with the <br>
<a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extension+mechanism" title="IPF extension mechanism">IPF extension mechanism</a>.</p>


<h4><a name="IPFreference-single-CustomPipeParser"></a>Custom PipeParser</h4>

<p>The PipeParser implementation provided by this module (<tt>org.openehealth.ipf.modules.hl7.parser.PipeParser</tt>) by default uses the <tt>CustomModelClassFactory</tt> and a default set of Primitive validation rules (see <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+v2+Message+Validation" title="HL7 v2 Message Validation">HL7 v2 Message Validation</a> chapter for details). Apart from that it does not add any features to the HAPI <tt>PipeParser</tt> class.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.parser.PipeParser;

...
def customParser = <span class="code-keyword">new</span> PipeParser(customFactory)
</pre>
</div></div>


<h3><a name="IPFreference-single-MethodsaddedtotheHAPIMessageinterface"></a>Methods added to the HAPI Message interface </h3>

<h4><a name="IPFreference-single-NewMessages"></a>New Messages</h4>

<p>You can create a new message from scratch by specifying event type, trigger event and version. Its message header fields are populated with the event type, trigger event, version, the current time as message date, and the common separators. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> ca.uhn.hl7v2.model.Message

<span class="code-comment">// Static method extension to the HAPI Message class
</span>def msg = Message.ADT_A01('2.5') <span class="code-comment">// creates a ca.uhn.hl7v2.model.v25.message.ADT_A01 object</span>
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>HL7 Message Structures</b><br><p>The message structure is a data structure that expresses an association of a message type with an event for a <em>class of HL7 messages</em>. Each message structure also contains a unique ID, e.g. <tt>ADT_A01</tt>. <br>
Beginning with HL7 v2.4, the combination of event type and trigger event is NOT necessarily the message structure ID, e.g. a <tt>ADT^A04</tt> message in version 2.5 has the message structure <tt>ADT_A01</tt>. <br>
Note that HAPI message classes are in fact <em>message structure classes</em>, i.e. to correctly create a <tt>ADT^A04</tt> v2.5 message, you need to instantiate an object of class <tt>ca.uhn.hl7v2.model.v25.message.ADT_A01</tt> and set the <tt>MSH-9</tt> field to <tt>ADT^A04^ADT_A01</tt>.</p>

<p>When you create new messages using IPF's HAPI extensions, the message structure (and therefore the HAPI class to be used) is automatically derived from event type, trigger event and message version, and <tt>MSH-9</tt> is populated accordingly. Example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> ca.uhn.hl7v2.model.Message

def msg = Message.ADT_A04('2.5')
<span class="code-keyword">assert</span> msg <span class="code-keyword">instanceof</span> ca.uhn.hl7v2.model.v25.message.ADT_A01
</pre>
</div></div>
</td></tr></tbody></table></div>

<h4><a name="IPFreference-single-AcknowledgementsandResponses"></a>Acknowledgements and Responses</h4>

<p>You can create positive or negative acknowledgments to HL7 messages with a single method call. The acknowledgment message</p>
<ul>
	<li>is in the same HL7 version as the original message</li>
	<li>refers to the message metadata of the original message (e.g. swapped sender and receiver fields)</li>
	<li>contains the current timestamp as message date</li>
	<li>is populated with MSA and/or ERR segments as specified in the parameters.</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-comment">// Positive Acknowledgement
</span>def ack  = msg.ack()
<span class="code-comment">// Negative Acknowledgements
</span>def nak1 = msg.nak('Reason <span class="code-keyword">for</span> failure', AckTypeCode.AE)
def nak2 = msg.nak(<span class="code-keyword">new</span> HL7Exception('reason <span class="code-keyword">for</span> failure', 204), AckTypeCode.AE)
</pre>
</div></div>

<p>In case of parsing errors there's no message object available to derive the negative acknowledgment from. In this case you can reuse the Exception thrown by the parser to create a <em>generic</em> negative acknowledgement of a specific version.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def nak = ca.uhn.hl7v2.model.Message.defaultNak(e, AckTypeCode.AE, '2.5') <span class="code-comment">// NAK of version 2.5</span>
</pre>
</div></div>

<p>Generating acknowledgments is only a special case of generating a response to an original message. If a response is defined as dedicated HL7 message as with responses to Query messages, you have to use the <tt>respond(eventType, triggerEvent)</tt> extension method. The response message</p>

<ul>
	<li>is in the same HL7 version as the original message</li>
	<li>refers to the message metadata of the original message (e.g. swapped sender and receiver fields)</li>
	<li>contains the current timestamp as message date</li>
	<li>has a populated MSA segment</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def rsp = msg.respond('RSP','K21') <span class="code-comment">// generates a RSP_K21 message</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Messagechecks"></a>Message checks</h4>

<p>Use the <tt>matches</tt> extension method to check for specific message types</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">if</span> (msg.matches('ADT','A01','2.5')) {
   <span class="code-comment">// <span class="code-keyword">true</span> <span class="code-keyword">if</span> msg is ADT_A01 version 2.5
</span>} <span class="code-keyword">else</span> <span class="code-keyword">if</span> (msg.matches('ADT','*','*')) {
   <span class="code-comment">// <span class="code-keyword">true</span> <span class="code-keyword">if</span> msg from ADT domain of any version
</span>}
</pre>
</div></div>

<p>You can check the three parameters of <tt>matches</tt> individually, too:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def version = msg.version           <span class="code-comment">// 2.5
</span>def eventType = msg.eventType       <span class="code-comment">// ADT
</span>def triggerEvent = msg.triggerEvent <span class="code-comment">// A01</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Messagedump"></a>Message dump</h4>

<p>For debugging purposes, it's often useful to know the internal (hierarchical) data structure of a HAPI Message. For complex messages, the returned structure can be pretty extensive, so you should avoid using this in production environments:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">println msg.dump()
</pre>
</div></div>


<h3><a name="IPFreference-single-MethodsaddedtotheHAPIStructureinterface"></a>Methods added to the HAPI Structure interface </h3>

<h4><a name="IPFreference-single-Newsegments"></a>New segments</h4>

<p>Just as creating a message, you can also create a segment by calling its respective name as static method on the <tt>ca.uhn.hl7v2.model.Structure</tt> interface. You need to pass the enclosing <tt>Message</tt> object as argument, which determines the HL7 version to be used.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> ca.uhn.hl7v2.model.Segment
...
<span class="code-comment">// Static method extension to the HAPI Message class
</span>def obx = Segment.OBX(msg) <span class="code-comment">// creates a ca.uhn.hl7v2.mode.v25.segment.OBX object
</span><span class="code-comment">//  obx = Segment.OBX(msg.target) <span class="code-keyword">if</span> msg is a MessageAdapter</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Printingstructures"></a>Printing structures</h4>

<p>All HAPI Structures (i.e. not only Messages, but also arbitrary Groups and Segments) can be converted into their pipe-encoded representation by calling the <tt>encode()</tt> extension method. Note that a Message is a subclass of Group.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">assert</span> message.MSH.encode() == 'MSH|^~\\&amp;|SAP-ISH|HZL|||20040805152637||ADT^A01|123456|T|2.2|||ER'
println message.encode() <span class="code-comment">// prints the complete message</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-MethodsaddedtotheHAPITypeinterface"></a>Methods added to the HAPI Type interface </h3>

<h4><a name="IPFreference-single-Newfields"></a>New fields</h4>

<p>Just as creating a message or segment, you can also create a field by calling its respective name as static method on the <tt>ca.uhn.hl7v2.model.Composite</tt> or <tt>ca.uhn.hl7v2.model.Primitive}}interface. You need to pass the enclosing {{Message</tt> object as argument, which determines the HL7 version to be used.<br>
Composites may be initialized with a map containing the component values. Primitives may be initialized with a literal string value.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> ca.uhn.hl7v2.model.Composite
<span class="code-keyword">import</span> ca.uhn.hl7v2.model.Primitive
...
<span class="code-comment">// Static method extension to the HAPI Composite class
</span>def ce = Composite.CE(msg, [identifier:'T57000', text:'GALLBLADDER', nameOfCodingSystem:'SNM'])
<span class="code-comment">//  ce = Composite.CE(msg.target, ...) <span class="code-keyword">if</span> msg is a MessageAdapter
</span><span class="code-comment">// Static method extension to the HAPI Primitive class
</span>def st = Primitive.ST(msg, 'value')
<span class="code-comment">//  st = Primitive.ST(msg.target, 'value') <span class="code-keyword">if</span> msg is a MessageAdapter</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Printingtypes"></a>Printing types</h4>

<p>All HAPI Types (i.e. Primitives, Composites, and Varies) can be converted into their pipe-encoded representation by calling the <tt>encode()</tt> extension.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">assert</span> message.MSH.messageType.encode() == 'ADT^A01'

<span class="code-comment">// Together with the HL7 DSL, you can also write
</span><span class="code-keyword">assert</span> message.MSH[9].encode() == 'ADT^A01'
</pre>
</div></div>

<h4><a name="IPFreference-single-MappingService"></a>Mapping Service</h4>

<p>The Mapping Service has been moved to the IPF Core features. After all, although often used in HL7 processing, code system mapping is not a feature that is inherently exclusive for HL7.  Please refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Mapping+Service" title="Mapping Service">Mapping Service</a> chapter.<br>
What remains specific to IPF's HL7 v2 support, however, is that the mapping extensions can be applied directly on all HAPI types. The <tt>encode()</tt> extension is called before the mapping is executed.</p>

<p>Given the following mapping example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>example.map</b></div><div class="codeContent panelContent">
<pre class="code-java">mappings = {
		 encounterType(['2.16.840.1.113883.12.4','2.16.840.1.113883.5.4'],
			 	E : 'EMER',
			  	I : 'IMP',
			  	O : 'AMB'
		 )

		 vip(['2.16.840.1.113883.12.99','2.16.840.1.113883.5.1075'],
				Y      : 'VIP',
				(ELSE) : { it }
		 )

              	 messageType(
                                'ADT^A01' : 'PRPA_IN402001'
                                (ELSE) : { <span class="code-keyword">throw</span> <span class="code-keyword">new</span> HL7Exception(<span class="code-quote">"Invalid message type"</span>, 207) }
                 )
}
</pre>
</div></div>

<p>You can use the mapping functions directly on composite or primitive field objects:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-comment">// Mapping primitives
</span><span class="code-keyword">assert</span> msg.PV1.patientClass.value == 'I'
<span class="code-keyword">assert</span> msg.PV1.patientClass.map('encounterType') == 'IMP'
<span class="code-keyword">assert</span> msg.PV1.patientClass.mapEncounterType() == 'IMP'

<span class="code-comment">// Together with the HL7 v2 DSL, you can also write
</span><span class="code-keyword">assert</span> msg.PV1[2].mapEncounterType() == 'IMP'

<span class="code-comment">// To map a Composite field, you can write
</span><span class="code-keyword">assert</span> msg.MSH.messageType.mapMessageType() == 'PRPA_IN402001'
<span class="code-keyword">assert</span> msg.MSH[9].mapMessageType() == 'PRPA_IN402001'
</pre>
</div></div>
<h2><a name="IPFreference-single-ExamplesforHL7Messaging"></a>Examples for HL7 Messaging</h2>

<p>This section shows the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+v2+DSL" title="HL7 v2 DSL">HL7 v2 DSL</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/Functional+Extensions+to+HAPI" title="Functional Extensions to HAPI">Functional Extensions to HAPI</a> in action. As the primary purpose of DSL and extensions is to augment the original HAPI library, it seems appropriate to take HAPI examples code and reimplement them.</p>

<h3><a name="IPFreference-single-Createamessagefromscratch"></a>Create a message from scratch</h3>

<p>The first example is to create a simple message from scratch, taken from <a href="http://hl7api.sourceforge.net/xref/ca/uhn/hl7v2/examples/CreateAMessage.html" rel="nofollow">http://hl7api.sourceforge.net/xref/ca/uhn/hl7v2/examples/CreateAMessage.html</a>. </p>

<p>The example shows </p>
<ul>
	<li>how to use Groovy properties instead of getter methods for named access to fields</li>
	<li>how to use IPF's functional extension to create messages with a prefilled MSH segment</li>
	<li>how to employ Groovy's <tt>with</tt> clause.</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CreateAMessage.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.extend.HapiModelExtension
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.parser.PipeParser
<span class="code-keyword">import</span> ca.uhn.hl7v2.model.*

<span class="code-keyword">public</span> class CreateAMessage{
        
    <span class="code-keyword">static</span> def makeMessage() {
        def msg = Message.ADT_A01('2.4')
        <span class="code-comment">// 'with' is a Groovy feature that delegate all unknown method properties
</span>        <span class="code-comment">// in <span class="code-keyword">this</span> <span class="code-keyword">case</span> to the msg.MSH object.
</span>        msg.MSH.with {
            sendingApplication.namespaceID.value = 'TestSendingSystem' 
            sequenceNumber.value = '123'
        }
        msg.PID.with {
            getPatientName(0).familyName.surname.value = 'Doe'
            getPatientName(0).givenName.value = 'John'
            getPatientIdentifierList(0).ID.value = '123456'
        }
        println <span class="code-quote">"Printing ER7 Encoded Message:"</span>
        println <span class="code-keyword">new</span> PipeParser().encode(msg)
    }
    
    /**
     * @param args
     */
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(def args) {
        <span class="code-comment">// Initialize the MetaClass extension
</span>        ExpandoMetaClass.enableGlobally()
        <span class="code-keyword">new</span> HapiModelExtension().extensions.call()
        <span class="code-comment">// 
</span>        makeMessage()
    }
}
</pre>
</div></div>

<p>The console output is:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">Printing ER7 Encoded Message:
MSH|^~\&amp;|TestSendingSystem||||20090923152839||ADT^A01^ADT_A01|1956|P^T|2.4|123
PID|||123456||Doe^John
</pre>
</div></div>

<p>The message timestamp will vary as it reflects the point of time when the message is being created.</p>

<h3><a name="IPFreference-single-CreateaORUR01v2.5message"></a>Create a ORU_R01 v2.5 message</h3>

<p>The second example is to create a not-so-simple message, taken from <a href="http://hl7api.sourceforge.net/xref/ca/uhn/hl7v2/examples/PopulateOBXSegment.html" rel="nofollow">http://hl7api.sourceforge.net/xref/ca/uhn/hl7v2/examples/PopulateOBXSegment.html</a>. The problem about this message is its nested structure of repeatable elements.<br>
This time, the implementation also takes advantage of the HL7 v2 DSL, replacing all named field accessors by their position-based syntax.</p>

<p>In addition to the first example, this example shows </p>
<ul>
	<li>how to wrap a HAPI message into a HL7 v2 DSL <tt>MessageAdapter</tt> object</li>
	<li>how to apply the HL7 v2 DSL</li>
	<li>how to transparently add repetition to repeatable structures and fields</li>
	<li>how to omit default indices due to the DSL's Smart Navigation feature</li>
	<li>how to create composite and primitive fields from scratch</li>
	<li>how to work with "Varies" types like in OBX-5</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>PopulateOBXSegment.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.extend.HapiModelExtension
<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.hl7.extend.Hl7ModelExtension
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7dsl.MessageAdapter

<span class="code-keyword">import</span> ca.uhn.hl7v2.model.*

<span class="code-keyword">public</span> class PopulateOBXSegment{
    
    <span class="code-keyword">static</span> def makeOBX() {
        <span class="code-comment">// Create message and wrap
</span>        def msg = <span class="code-keyword">new</span> MessageAdapter(Message.ORU_R01('2.5'))
        
        <span class="code-comment">// Populate OBR. Group repetitions are created <span class="code-keyword">while</span> navigating
</span>        def obr = msg.PATIENT_RESULT.ORDER_OBSERVATION.OBR
        obr[1] = '1'
        obr[3][1] = '1234'
        obr[3][2] = 'LAB'
        obr[4] = '88304' <span class="code-comment">// Smart Navigation expands <span class="code-keyword">this</span> to obr[4][1]
</span>
        <span class="code-comment">// Populate the first OBX
</span>        <span class="code-comment">// Note that we don't specify the repetition with PATIENT_RESULT and
</span>        <span class="code-comment">// ORDER_OBSERVATION because Smart Navigation
</span>        def obx = msg.PATIENT_RESULT.ORDER_OBSERVATION.OBSERVATION(0).OBX
        obx[1] = '1'
        obx[2] = 'CE' <span class="code-comment">// the type of OBX-5
</span>        obx[3] = '88304'
        obx[4] = '1'
        def ce = Composite.CE(msg.target, 
           [identifier:'T57000', text:'GALLBLADDER', nameOfCodingSystem:'SNM'])
        <span class="code-comment">// OBX-5 is a repeatable Varies field. 
</span>        <span class="code-comment">// Don't care about it, the DSL gets it right <span class="code-keyword">for</span> you.
</span>        obx[5] = ce  <span class="code-comment">// equivalent with obx[5](0).data = ce
</span>        
        <span class="code-comment">// Populate the second OBX
</span>        obx = msg.PATIENT_RESULT.ORDER_OBSERVATION.OBSERVATION(1).OBX
        obx[1] = '2'
        obx[2] = 'TX' <span class="code-comment">// the type of OBX-5
</span>        obx[3] = '88304'
        <span class="code-comment">// The second OBX in the sample message has an extra subcomponent at
</span>        <span class="code-comment">// OBX-3-1. This component is actually an ST, but the HL7 specification allows
</span>        <span class="code-comment">// extra subcomponents to be tacked on to the end of a component. This is
</span>        <span class="code-comment">// uncommon, but HAPI nontheless allows it.
</span>        obx[3][1].extraComponents[0].data = Primitive.ST(msg.target, 'MDT')
        obx[4] = '2'
        def tx = Primitive.TX(msg.target, 
           'MICROSCOPIC EXAM SHOWS HISTOLOGICALLY NORMAL GALLBLADDER TISSUE')
        obx[5] = tx
        
        <span class="code-comment">// Return the message
</span>        msg
    }
    
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(def args){
        <span class="code-comment">// This example requires both extension packages
</span>        ExpandoMetaClass.enableGlobally()
        <span class="code-keyword">new</span> HapiModelExtension().extensions.call()
        <span class="code-keyword">new</span> Hl7ModelExtension().extensions.call()
        println makeOBX()
    }
}
</pre>
</div></div>

<p>The console output is:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">MSH|^~\&amp;|||||20090923151109||ORU^R01^ORU_R01|98|P^T|2.5
OBR|1||1234^LAB|88304
OBX|1|CE|88304|1|T57000^GALLBLADDER^SNM
OBX|2|TX|88304&amp;MDT|2|MICROSCOPIC EXAM SHOWS HISTOLOGICALLY NORMAL GALLBLADDER TISSUE
</pre>
</div></div>

<h3><a name="IPFreference-single-Conclusion"></a>Conclusion</h3>

<p>The example showed that with IPF's HL7 support you can work with HL7 messages without ever seeing and touching much of the programming interface of the underlying HAPI library. The code is readable for HL7 v2 domain experts without much knowledge in programming. <br>
This impressively underlines the purpose of domain specific languages to narrow the gap between domain experts and software development experts, here applied to the domain of HL7 v2 messaging.</p>
<h2><a name="IPFreference-single-Languagereference"></a>Language reference</h2>

<h3><a name="IPFreference-single-Messageelements"></a>Message elements</h3>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element </th>
<th class="confluenceTh"> Implementation </th>
</tr>
<tr>
<td class="confluenceTd"> message </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7dsl.MessageAdapter</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> group </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7dsl.GroupAdapter</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> segment </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7dsl.SegmentAdapter</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> composite field </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7dsl.CompositeAdapter</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> primitive field </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7dsl.PrimitiveAdapter</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> undefined field </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7dsl.VariesAdapter</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> repeating group </td>
<td class="confluenceTd"> <tt>groovy.lang.Closure</tt> containing groups and/or messages </td>
</tr>
<tr>
<td class="confluenceTd"> repeating segment </td>
<td class="confluenceTd"> <tt>groovy.lang.Closure</tt> containing segments </td>
</tr>
<tr>
<td class="confluenceTd"> repeating field </td>
<td class="confluenceTd"> <tt>groovy.lang.Closure</tt> containing composites and or primitives </td>
</tr>
</tbody></table>
<p>Also refer to <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Understandingrepetitions">understanding repetitions</a> for an introduction to repeating groups, segments and fields.</p>

<h3><a name="IPFreference-single-Readaccessoperations"></a>Read access operations</h3>

<h4><a name="IPFreference-single-Readaccessoperationsonnonrepeatingmessageelements"></a>Read access operations on non-repeating message elements</h4>

<p>The following table specifies the effect of operators for read-access operations on non-repeating message elements.</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Type </th>
<th class="confluenceTh"> <tt>.</tt> operator (dot) </th>
<th class="confluenceTh"> <tt>[]</tt> operator (subscript) </th>
</tr>
<tr>
<td class="confluenceTd"> message or group </td>
<td class="confluenceTd"> Access to group or segment by name:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.&lt;groupName&gt;   // contained group with name &lt;groupName&gt;
message.&lt;segmentName&gt; // contained segment with name &lt;segmentName&gt;
</pre>
</div></div> </td>
<td class="confluenceTd"> Access to group or segment by name:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message['&lt;groupName&gt;']   // contained group with name &lt;groupName&gt;
message['&lt;segmentName&gt;'] // contained segment with name &lt;segmentName&gt;
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> segment </td>
<td class="confluenceTd"> Access to field by symbolic field name: <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>segment.&lt;symbolicFieldName&gt; // field of segment with name &lt;symbolicFieldName&gt;
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.MSH.sendingApplication // 3rd field of MSH segment
</pre>
</div></div> </td>
<td class="confluenceTd"> Access to field by symbolic field name or index: <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>segment['&lt;symabolicFieldName&gt;'] // field of segment with name &lt;symbolicFieldName&gt;
segment[i]                      // i-th field of segment (i=1..n)
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.MSH['sendingApplication'] // 3rd field of MSH segment
message.MSH[3]                    // 3rd field of MSH segment
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> composite field </td>
<td class="confluenceTd"> N/A </td>
<td class="confluenceTd"> Access to component <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>composite[i] // i-th component of composite (i=1..n)
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.NK1(0)[4][4] // 4-th component of composite field message.NK1(0)[4]
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> primitive field </td>
<td class="confluenceTd"> Access to primitive field's string value
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>field.value          // the field's string value ('""' removed)
field.originalValue  // the field's original value
</pre>
</div></div> </td>
<td class="confluenceTd"> N/A </td>
</tr>
</tbody></table>

<h4><a name="IPFreference-single-Readaccessoperationsonrepeatingmessageelements"></a>Read access operations on repeating message elements</h4>

<p>The following table specifies the effect of the () operator for read-access operations on repeating message elements.</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Type </th>
<th class="confluenceTh"> <tt>()</tt> (closure call) </th>
</tr>
<tr>
<td class="confluenceTd"> repeating group </td>
<td class="confluenceTd"> Access to group repetitions and its members <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>groups() // list of groups in repetition
groups(i) // i-th group in repetition (i=0..n)
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.PATIENT_RESULT() // all groups of the repeating PATIENT_RESULT group
message.PATIENT_RESULT(0) // first group of the repeating PATIENT_RESULT group
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> repeating segment </td>
<td class="confluenceTd"> Access to segment repetitions and its members <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>segments() // list of segments in repetition
segments(i) // i-th segment in repetition (i=0..n)
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.NK1() // all segments of the repeating NK1 segment
message.NK1(0) // first segment of the repeating NK1 segment
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> repeating field </td>
<td class="confluenceTd"> Access to field repetitions and its members <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>fields() // list of fields in repetition
fields(i) // i-th field in repetition (i=0..n)
segment.count(j) // returns the number of repetitions of the j-th field
segment.nrp(j) // adds a repetition to the j-th field, returning the new object
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.NK1(0)[5]() // all fields of the repeating message.NK1(0)[5] field
message.NK1(0)[5](1) // second field of the repeating message.NK1(0)[5] field
</pre>
</div></div> </td>
</tr>
</tbody></table>

<h3><a name="IPFreference-single-Writeaccessoperations"></a>Write access operations</h3>

<p>The following table specifies the effect of operators for write-access operations on non-repeating message elements.</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Type </th>
<th class="confluenceTh"> <tt>.</tt>\ operator (dot) </th>
<th class="confluenceTh"> <tt>[]</tt>\ operator (subscript) </th>
</tr>
<tr>
<td class="confluenceTd"> message or group </td>
<td class="confluenceTd"> Copy group or segment by name:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message.&lt;groupName&gt; = group // where group.name == groupName
message.&lt;segmentName&gt; = segment // where segment.name == segmentName
</pre>
</div></div> </td>
<td class="confluenceTd"> Copy group or segment by name:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message['&lt;groupName&gt;'] = group // where group.name == groupName
message['&lt;segmentName&gt;'] = segment // where segment.name == segmentName
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> segment </td>
<td class="confluenceTd"> Set primitive field by symbolic field name: <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>segment.&lt;symbolicFieldName&gt; = value // value is a string
</pre>
</div></div>
<p>Copy composite or primitive by symbolic field name:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>segment.&lt;symbolicFieldName&gt; = composite
segment.&lt;symbolicFieldName&gt; = primitive
</pre>
</div></div>
<p>Example:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>messsage1.MSH.sendingApplication = 'XYZ'
</pre>
</div></div> </td>
<td class="confluenceTd"> Set primitive by symbolic field name or index: <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> segment['&lt;symbolicFieldName&gt;'] = value // value is a string
 segment[i] = value                     // value is a string
</pre>
</div></div>Copy composite or primitive by symbolic field name or index: <br clear="all">  <div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> segment['&lt;symbolicFieldName&gt;'] = composite
 segment['&lt;symbolicFieldName&gt;'] = primitive
 segment[i] = composite
 segment[i] = primitive
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message1.MSH['sendingApplication'] = 'XYZ'
message1.MSH[3] = 'XYZ'
message1.EVN[7] = message2.EVN[7]
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> composite field </td>
<td class="confluenceTd"> N/A </td>
<td class="confluenceTd"> Set primitive by index: <br clear="all">
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>composite[i] = value // value is a string
</pre>
</div></div>Copy component or primitive by index:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> composite[i] = component // non-primitive
 composite[i] = primitive
</pre>
</div></div>Example:<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>message1.NK1(0)[4][4] = 'abc'
message1.NK1(0)[4][4] = message2.NK1(0)[4][4]
</pre>
</div></div> </td>
</tr>
<tr>
<td class="confluenceTd"> primitive field </td>
<td class="confluenceTd"> Set primitive's value
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>field.value = value // value is a string
</pre>
</div></div> </td>
<td class="confluenceTd"> N/A </td>
</tr>
</tbody></table>

<h4><a name="IPFreference-single-Writeaccessoperationsonrepeatingmessageelements"></a>Write access operations on repeating message elements</h4>

<p>Direct write access to repeating elements is not possible. Write access to message elements obtained via the () operator must be done via the <tt>from()</tt> method. If the obtained element is a primitive field then you may also use the <tt>.value</tt> property to assign strings.</p>

<h5><a name="IPFreference-single-Writeaccessoperationsonmessageelementsdefinedasseparatevariable"></a>Write access operations on message elements defined as separate variable</h5>

<p>When using the = operator for write access on message elements defined as separate variable then the usual Java/Groovy semantics apply. In this case the variable will just reference another object. Only if the = operator follows a [] (subscript) or . (property access) operation the assignment operator will cause a copy operation.</p>

<h4><a name="IPFreference-single-Methodandpropertydispatch"></a>Method and property dispatch</h4>

<ul>
	<li>Any property access not processed by an adapter is dispatched to the target object.</li>
	<li>Any method call not processed by an adapter is dispatched to the target object.</li>
	<li>Returned objects from the target are adapted if a corresponding adapter exists.</li>
</ul>


<h3><a name="IPFreference-single-Accesstospecialobjects"></a>Access to special objects</h3>

<ul>
	<li>The adapted target objects can be obtained from any adapter via <tt>adapter.target</tt>.</li>
	<li>The corresponding message adapter to a structure or field adapter can be obtained via <tt>adapter.message</tt></li>
</ul>

<h1><a name="IPFreference-single-HL7v2MessageValidation"></a>HL7 v2 Message Validation</h1>

<p>This chapter describes how IPF supports the validation of HL7 v2 messages.</p>

<hr>

<h2><a name="IPFreference-single-Overview"></a>Overview</h2>

<p>HL7 v2.x is a complex flat-file structure that, despite being considered a data standard, is also highly flexible. It is often expected of an HL7 integration engine that non-standard compliant data be accepted and processed without notification to the receiving system of non-compliance. <br>
However, to achieve real interoperability, the HL7 standard should be constrained to reduce the degree of freedom e.g. how to use certain fields or whether to populate optional fields or not. This happens either based on a written specification or in addition as machine-readble conformance profile. In order to check whether HL7 messages actually conform to the defined constraints, message validation is essential.</p>

<p>The HAPI library already offers support for validating HL7 messages by definition of rules that check against constraints on type level, message level, and encoded message level. However, definition of these rules is rather cumbersome.<br>
The IPF HL7 module adds support for specifying validation rules in a way that is easy to write and easy to understand. It facilitates the definition of custom validation rules by exploiting features of the Groovy language that is already used in other parts of IPF.</p>
<h2><a name="IPFreference-single-ValidationBasics"></a>Validation Basics</h2>

<p>Validation rules are defined by instantiating an implementation of the <tt>ca.uhn.hl7v2.validation.ValidationContext</tt> interface of HAPI. Then you use this context to validate messages against the contained constraints.</p>

<h3><a name="IPFreference-single-Validation"></a>Validation</h3>

<p>There are two ways to validate:</p>

<ul>
	<li>while parsing a message</li>
	<li>as dedicated operation on an existing message</li>
</ul>


<p>To validate together with parsing, simply configure your Parser instance with the <tt>ValidationContext</tt>. If validation fails an exception is thrown.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">   ...
   Parser parser = <span class="code-keyword">new</span> PipeParser(context)
   Message message = parser.parse(msgText)
   <span class="code-comment">// Does not reach code below on parsing or validation error
</span>   ...
</pre>
</div></div>

<p>To validate after parsing, use the HAPI <a href="http://hl7api.sourceforge.net/apidocs/ca/uhn/hl7v2/validation/MessageValidator.html" rel="nofollow">MessageValidator</a> class. If validation fails an exception is thrown.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">   <span class="code-keyword">import</span> ca.uhn.hl7v2.validation.MessageValidator
   ...
   <span class="code-keyword">new</span> MessageValidator(context, <span class="code-keyword">true</span>).validate(message)
   <span class="code-comment">// Does not reach code below on parsing or validation error
</span>   ...
</pre>
</div></div>

<h3><a name="IPFreference-single-IPFHL7ValidationRules"></a>IPF HL7 Validation Rules</h3>

<p>IPF provides a special <tt>ValidationContext</tt>: the <tt>org.openehealth.ipf.modules.hl7.validation.DefaultValidationContext</tt> class. It offers two benefits:</p>

<ol>
	<li>It provides access to a <em>Validation Builder</em> that allows for definition of validation rules using a  simple Domain Specific Language (DSL)</li>
	<li>It supports Validation rules that constrain their target object by evaluating Groovy closures for better flexibility.</li>
</ol>


<p>Although it is possible to manually instantiate the Validation rule classes that come with IPF, you normally should not care and instead use the Validation builder.<br>
Before actually specifying the validation rule, its application is restricted to one or more HL7 versions. The possibilities are shown in the code example above and are self-describing.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.validation.DefaultValidationContext
...
DefaultValidationContext context = <span class="code-keyword">new</span> DefaultValidationContext()
context.configure()
   .forVersion('2.5')           <span class="code-comment">// following rule applies to HL7 v2.5
</span>       ...
   .forVersion('2.2 2.3 2.4')   <span class="code-comment">// following rule applies to HL7 v2.2, 2.3, and 2.4
</span>       ...
   .forVersion().asOf('2.3')    <span class="code-comment">// following rule applies to HL7 versions starting with 2.3
</span>       ...
   .forVersion().before('2.3')  <span class="code-comment">// following rule applies to HL7 versions older than 2.3
</span>       ...
   .forVersion().except('2.4')  <span class="code-comment">// following rule applies to HL7 versions but 2.4
</span>       ...
   .forAllVersions()            <span class="code-comment">// following rule applies to all HL7 versions
</span>       ...
</pre>
</div></div>

<p>Now the rules can be defined by specifying constraints on</p>

<ul>
	<li>primitive type level (see <a href="http://repo.openehealth.org/confluence/display/ipf2/Primitive+Type+Constraints" title="Primitive Type Constraints">Primitive Type Constraints</a>)</li>
	<li>message level (see <a href="http://repo.openehealth.org/confluence/display/ipf2/Message+Constraints" title="Message Constraints">Message Constraints</a>)</li>
	<li>encoding level (see <a href="http://repo.openehealth.org/confluence/display/ipf2/Encoded+Message+Constraints" title="Encoded Message Constraints">Encoded Message Constraints</a>)</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
context.configure()
   .forVersion('2.5')            <span class="code-comment">// limit to HL7 v2.5 messages
</span>       .type('DT')               <span class="code-comment">// constraints <span class="code-keyword">for</span> the DT type
</span>          ...
       .message('ADT', 'A01')    <span class="code-comment">// constraints <span class="code-keyword">for</span> ADT_A01 messages
</span>          ...
       .encoding()               <span class="code-comment">// constraints <span class="code-keyword">for</span> encoded messages
</span>          ...
</pre>
</div></div>


<h3><a name="IPFreference-single-ReusingaDefaultValidationContext"></a>Reusing a DefaultValidationContext</h3>

<p>If there is already an instance of DefaultValidationContext, you can simply add further rules to it:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">DefaultValidationContext context = <span class="code-keyword">new</span> DefaultValidationContext()

<span class="code-comment">// Add a number of rules
</span>context.configure()
   .forVersion()
       ...

<span class="code-comment">// Add some more rules
</span>context.configure()
   .forVersion()
       ...
</pre>
</div></div>

<p>It is also possible to reuse <em>any</em> <tt>ValidationContext</tt> implementation (i.e. also not IPF-based contexts) with a <tt>DefaultValidationContext</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">DefaultValidationContext context = <span class="code-keyword">new</span> DefaultValidationContext()

<span class="code-comment">// Use the builder to add Groovy-based validation rules
</span>context.configure()
   .forVersion()
       ...

<span class="code-comment">// Add existing ValidationContext instances
</span>context
   .addContext(additionalValidationContext1)
   .addContext(additionalValidationContext2)
       ...
</pre>
</div></div>


<h2><a name="IPFreference-single-ConfiguringHL7v2Validation"></a>Configuring HL7 v2 Validation</h2>

<p>This section explains how to configure Validation Context and Validation Rules in an application based on the Spring Framework.</p>

<ol>
	<li>To initialize a <tt>DefaultValidationContext</tt> from a Spring Framework ApplicationContext, you need a <tt>ValidationContextFactoryBean</tt> and one or more <tt>ValidationContextBuilder</tt> beans. Each <tt>ValidationContextBuilder</tt> will contribute to the overall set of rules being applied.
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;beans&gt;</span>
...
   <span class="code-tag"><span class="code-comment">&lt;!-- The FactoryBean creates an instance of DefaultValidationContext --&gt;</span></span>
   &lt;bean id=<span class="code-quote">"context"</span> 
       class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.validation.ValidationContextFactoryBean"</span>/&gt;

   <span class="code-tag"><span class="code-comment">&lt;!-- Rule Set 1: Default rules for primitive types that come with IPF --&gt;</span></span>
   &lt;bean id=<span class="code-quote">"defaultTypeRules"</span> 
       class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.validation.builder.DefaultTypeRulesBuilder"</span>/&gt;

   <span class="code-tag"><span class="code-comment">&lt;!-- Rule Set 2: Custom rules of either variant (type, message or encoding) --&gt;</span></span>
   &lt;bean id=<span class="code-quote">"myCustomRules"</span> 
       class=<span class="code-quote">"com.my.company.MyValidationContextBuilder"</span>/&gt;

   <span class="code-tag"><span class="code-comment">&lt;!-- Optional: initialize a Parser instance with the ValidationContext --&gt;</span></span>
   <span class="code-tag">&lt;bean id=<span class="code-quote">"parser"</span> class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.parser.PipeParser"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"validationContext"</span> ref=<span class="code-quote">"context"</span>/&gt;</span>
   <span class="code-tag">&lt;/bean&gt;</span>	   
...
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div></li>
	<li>Provide the custom ValidationContextBuilder implementation. A skeleton for such a custom builder is given in the following example:
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyValidationContextBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> com.my.company

<span class="code-keyword">import</span> ca.uhn.hl7v2.validation.ValidationContext
<span class="code-keyword">import</span> ca.uhn.hl7v2.validation.ValidationException
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.validation.builder.RuleBuilder
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.validation.builder.ValidationContextBuilder

<span class="code-keyword">public</span> class MyValidationContextBuilder <span class="code-keyword">extends</span> ValidationContextBuilder {

   <span class="code-keyword">public</span> RuleBuilder forContext(ValidationContext context) {

      context.configure()

        .forVersion('...')
           .message(...)
               ...
           .type(...)
               ...
           .encoding(...)
               ...
   }
}
</pre>
</div></div></li>
</ol>

<h2><a name="IPFreference-single-PrimitiveTypeConstraints"></a>Primitive Type Constraints</h2>

<p>This section shows how to define constraints on primitive HL7 data types.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Standard validation rules provided</b><br><p>IPF already provides a set of constraints for primitive types as defined in the HL7 specification for each 2.x version. If this is fits your needs, use <tt>org.openehealth.ipf.modules.hl7.validation.support.DefaultTypeRulesValidationContext</tt> as your <tt>ValidationContext</tt> implementation and optionally add more validation rules to it.</p></td></tr></tbody></table></div>  

<p>Primitive types have no substructure, i.e. they directly contain string values. The values are usually constrained by one or more of the following restrictions:</p>

<ul>
	<li>length</li>
	<li>value type (e.g. whether it evaluates to a decimal or number)</li>
	<li>regular expression pattern</li>
</ul>


<p>Regular expressions can also be used to restrict length and type of the value, however, regular expressions are sometimes hard to read and understand.</p>

<p>A type constraint for a range of HL7 versions is defined as follows:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">ValidationContext context = <span class="code-keyword">new</span> DefaultValidationContext()
...
context.configure()
  .forVersion().asOf('2.3')
     .type('DT')
        .matches(/(\d{4}([01]\d(\d{2})?)?)?/)			<span class="code-comment">// YYYY[MM[DD]]
</span>        .withReference('Version 2.5 Section 2.A.21')
</pre>
</div></div>

<p>This enforces that all instances of type DT type must match a date pattern, where the year is mandatory and the month and the day is optional. The example uses a regular expression to specify the date pattern. Please also read about regular expressions in Groovy (<a href="http://groovy.codehaus.org/Regular+Expressions" rel="nofollow">http://groovy.codehaus.org/Regular+Expressions</a>).</p>

<p>The Validation DSL for primitive types supports the following constraints:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Constraint type </th>
<th class="confluenceTh"> Method <tt>.type('X')</tt></th>
<th class="confluenceTh"> Example </th>
<th class="confluenceTh"> constraints... </th>
</tr>
<tr>
<td class="confluenceTd"> maximum length </td>
<td class="confluenceTd"> <tt>.maxSize(int)</tt> </td>
<td class="confluenceTd"> <tt>maxSize(255)</tt> </td>
<td class="confluenceTd"> ... the maximum length to 255 characters </td>
</tr>
<tr>
<td class="confluenceTd"> length range </td>
<td class="confluenceTd"> <tt>[min..max]</tt> </td>
<td class="confluenceTd"> <tt>[10..20]</tt> </td>
<td class="confluenceTd"> ... the length to be between 10 and 20 </td>
</tr>
<tr>
<td class="confluenceTd"> existence </td>
<td class="confluenceTd"> <tt>.notEmpty()</tt> </td>
<td class="confluenceTd">&nbsp;</td>
<td class="confluenceTd"> ... that there must be a value of &gt;= 1 character </td>
</tr>
<tr>
<td class="confluenceTd"> matches </td>
<td class="confluenceTd"> <tt>.matches(regexp)</tt> </td>
<td class="confluenceTd"> <tt>matches(/(\d{4})</tt> </td>
<td class="confluenceTd"> ... the value has four digits </td>
</tr>
<tr>
<td class="confluenceTd"> number type </td>
<td class="confluenceTd"> <tt>.isNumber()</tt> </td>
<td class="confluenceTd">&nbsp;</td>
<td class="confluenceTd"> ... the value to be a decimal number </td>
</tr>
<tr>
<td class="confluenceTd"> user defined </td>
<td class="confluenceTd"> <tt>.checkIf(Closure)</tt> </td>
<td class="confluenceTd"> <tt>checkIf {it.size()&lt;=255</tt> } </td>
<td class="confluenceTd"> ... the maximum length to 255 characters </td>
</tr>
</tbody></table>

<p>The Closure syntax is the most flexible way to define constraints on a type. Internally, all other constraint methods are implemented by calling <tt>checkIf</tt> using a specific closure.<br>
Additionally, primitive type constraints are "misused" in HAPI for trimming space characters from values. The Validation DSL supports this as well, however, it's not recommended because it unnecessarily couples validation with preprocessing.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Constraint type </th>
<th class="confluenceTh"> Method <tt>.type('X')</tt></th>
<th class="confluenceTh"> Example </th>
<th class="confluenceTh"> function </th>
</tr>
<tr>
<td class="confluenceTd"> trim </td>
<td class="confluenceTd"> <tt>.omitLeadingWhitespace()</tt> </td>
<td class="confluenceTd">&nbsp;</td>
<td class="confluenceTd"> removes leading whitespace characters </td>
</tr>
<tr>
<td class="confluenceTd"> trim </td>
<td class="confluenceTd"> <tt>.omitTrailingWhitespace()</tt> </td>
<td class="confluenceTd">&nbsp;</td>
<td class="confluenceTd"> removes trailing whitespace characters </td>
</tr>
</tbody></table>

<p>You can combine any of constraint methods to define more than one rule for a type:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
.type('X').omitLeadingWhitespace().isNumber().checkIf { it &gt; 50 &amp;&amp; it &lt; 100 }
...
</pre>
</div></div>

<p>Each HL7 v2.x version defines a set of primitive types; over the time the number of types have increased and/or the constraints have been modified. IPF comes with predefined validation rules that enforce these constraints. Also note that the IPF <tt>PipeParser</tt> class is preconfigured with the default type rules.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> ca.uhn.hl7v2.validation.ValidationContext
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.validation.support.DefaultTypeRulesValidationContext
...
ValidationContext context = DefaultTypeRulesValidationContext()
</pre>
</div></div>


<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>When primitive type rules are checked</b><br><p>Note that primitive type rules can only be applied by configuring the parser. Validation then is executed <em>whenever a primitive value is set</em>:</p>
<ul>
	<li>during parsing</li>
	<li>when individual fields are modified afterwards, e.g. by while using a transmogrifier.</li>
</ul>
</td></tr></tbody></table></div>
<h2><a name="IPFreference-single-MessageConstraints"></a>Message Constraints</h2>

<p>This section explains how complete HL7 messages can be validated.</p>

<p>By default, the HAPI parsers accept about <em>any</em> message as long as it follows the HL7 syntactic rules. For messages, groups and segments not defined in the respective HL7 2.x standard, <em>generic</em> structures are internally instantiated. This allows parsing custom messages even without prior definition of Z segments or similar custom structures.<br>
Because the parser itself can not guarantee specification-compliant messages, this has to be added either by configuring the parser or executing validation seperately.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>When message validation rules are checked</b><br><p>Message rules can be enforced by either configuring the parser or by manually validating a parsed message.<br>
Message rules are <em>not</em> enforced each time when a part of the message is modified.</p></td></tr></tbody></table></div>

<p>There are three subtypes of message validation rules provided by IPF.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Validation Rule </th>
<th class="confluenceTh"> ValidationBuilder clause </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> HL7 Abstract Message Syntax </td>
<td class="confluenceTd"> <tt>abstractSyntax</tt> </td>
<td class="confluenceTd"> validates the existance, order, and cardinality of HL7 groups and segments </td>
</tr>
<tr>
<td class="confluenceTd"> Conformance Profiles </td>
<td class="confluenceTd"> <tt>conformsToProfile</tt> </td>
<td class="confluenceTd"> validates the message against the static part of a HL7 Conformance Profile </td>
</tr>
<tr>
<td class="confluenceTd"> Custom </td>
<td class="confluenceTd"> <tt>checkIf</tt> </td>
<td class="confluenceTd"> passes the Message object into as parameter into a Groovy closure, where custom validation can be executed </td>
</tr>
</tbody></table>

<h3><a name="IPFreference-single-HL7AbstractMessageSyntax"></a>HL7 Abstract Message Syntax</h3>

<p>HL7 v2 defines an Abstract Message Syntax (see HL7v2.5 specification, Chapter 2.13), that determines how groups and segments are expected for a specific message type. Cardinality is indicated by using</p>

<ul>
	<li>brackets ([...]) for optional groups or segments [0..1]</li>
	<li>braces ({...}) for repeatable groups or segments [1..*]</li>
	<li>a combination of both ({[...]} or [{...}]) for optional and repeatable groups or segments [0..*]</li>
</ul>


<p>IPF provides support for checking a message instance against such an Abstract Message Syntax definition with the <tt>abstractSyntax</tt> builder expression. The corresponding rule is almost a copy of the definition, with only a few differences:</p>

<ul>
	<li>segment names are enclosed in quotes (<tt>''</tt>)</li>
	<li>group names are specified like function calls inside the cardinality indicators as described above</li>
	<li>a choice of one segment from a group of segments is currently not supported.</li>
</ul>


<p>The following comparison gives an example:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> HL7 Abstract Message Syntax definition </th>
<th class="confluenceTh"> IPF Validation rule </th>
</tr>
<tr>
<td class="confluenceTd"> <div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">



MSH
[  {  SFT  }  ]
                              PATIENT_RESULT
                              PATIENT
{  [  PID
      [  PD1  ]
      [  {  NTE  }  ]
      [  {  NK1  }  ]
                              VISIT
      [  PV1
         [  PV2  ]
      ]
                              VISIT
   ]
                              PATIENT
                              ORDER_OBSERVATION
   {  [  ORC  ]
      OBR
      [  {  NTE  }  ]
                              TIMING_QTY
      [{  TQ1
         [  {  TQ2  }  ]
      }]
                              TIMING_QTY
      [  CTD  ]
                              OBSERVATION
      [{  OBX
         [  {  NTE  } ]
      }]
                              OBSERVATION
      [  {  FT1  }  ]
      [  {  CTI  }  ]
                              SPECIMEN
      [{  SPM
         [  {  OBX  }  ]
      }]
                              SPECIMEN
   }
                              ORDER_OBSERVATION
}
                              PATIENT_RESULT
[  DSC  ]</pre>
</div></div> </td>
<td class="confluenceTd"> <div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
   context.configure()
     .forVersion('2.5')
        .message('ORU', 'R01').abstractSyntax(
          'MSH',
          [  {  'SFT'  }  ],
          {PATIENT_RESULT(
             [PATIENT(
                'PID',
                [  'PD1'  ],
                [  {  'NTE'  }  ],
                [  {  'NK1'  }  ],
                [VISIT(
                   'PV1',
                   [  'PV2'  ]
               )]

             )],

             {ORDER_OBSERVATION(
                [  'ORC'  ],
                 'OBR',
                 [{  'NTE'  }],
                 [{TIMING_QTY(
                    'TQ1',
                    [{  'TQ2'  }]
                 )}],

                 [  'CTD'  ],
                 [{OBSERVATION(
                    'OBX',
                    [  {  'NTE'  }  ]
                 )}],

                 [{  'FT1'  }],
                 [{  'CTI'  }],
                 [{SPECIMEN(
                    'SPM',
                    [{  'OBX'  }]
                 )}]

              )}

           )},

           [ 'DSC' ]
        )</pre>
</div></div> </td>
</tr>
</tbody></table>

<p>Note that fields inside segments can neither be specified nor validated with the Abstract Message Syntax.</p>

<h3><a name="IPFreference-single-HL7ConformanceProfiles"></a>HL7 Conformance Profiles</h3>

<p>Conformance Profiles have been introduced with HL7 v2.5 as a standardized means of defining the static and dynamic properties of a HL7 message. Conformance Profiles are encoded in XML and can be seen as a formal specification language. For more details on HL7 Conformance Profiles, please refer to chapters 2.12 and 2.19 of the HL7 v2.5 specification document.<br>
There are tools that facilitate the definition of Conformance Profiles, most notably the <em>Messaging Workbench</em>, which can be downloaded at <a href="http://sl.infoway-inforoute.ca/downloads/MWB%20Release%206-7p1.zip" rel="nofollow">http://sl.infoway-inforoute.ca/downloads/MWB%20Release%206-7p1.zip</a>.</p>

<p>HAPI supports checks against conformance profiles. In the IPF Validation framework it can be used with the <tt>conformsToProfile</tt> builder expression.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">DefaultValidationContext context = <span class="code-keyword">new</span> DefaultValidationContext()
ProfileStoreFactory.setStore(<span class="code-keyword">new</span> ClassPathProfileStore())

context.configure()
   .forVersion('2.5')
      .message('QBP', 'Q22').conformsToProfile('IHE-PDQ-QBP-Q22')
</pre>
</div></div>

<p>In this case, a file with the name <tt>IHE-PDQ-QBP-Q22.xml</tt> is looked up in the root of the Java classpath. Without the call to <tt>ProfileStoreFactory.setStore</tt>, the default HAPI ProfileStore is used, which looks into the <tt>&lt;hapi.home&gt;/profiles</tt> directory.</p>


<h3><a name="IPFreference-single-CustomMessageValidation"></a>Custom Message Validation</h3>

<p>You can use message rules also to program you own custom constraints on one or more trigger events. All there is to do is to write a <tt>checkIf</tt> closure that returns an array of HAPI {{ValidationException}}s. The array is empty, if validation passes.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">   ...
   context.configure().forAllVersions()
      .message('ADT', 'A01')
         .checkIf { msg -&gt;
             def validationExceptions = []
             <span class="code-comment">// validate and <span class="code-keyword">return</span> an (empty) ValidationException array
</span>             <span class="code-keyword">return</span> validationExceptions 
         }
      .message('ADT', 'A01 A04 A08')
         .checkIf { msg -&gt;
             <span class="code-comment">// define constraints <span class="code-keyword">for</span> all three trigger events
</span>         }
      .message('ADT', ['A01', 'A04', 'A08'])
         .checkIf { msg -&gt;
             <span class="code-comment">// same as above but specified as list
</span>         }
      .message('ADT', '*')
         .checkIf { msg -&gt;
             <span class="code-comment">// <span class="code-keyword">for</span> all trigger events of the ADT message type
</span>         }

</pre>
</div></div>
<h2><a name="IPFreference-single-EncodedMessageConstraints"></a>Encoded Message Constraints</h2>

<p>These kind of rules can be used to validate the encoded representation of a HL7 message, i.e. their String representation in either ER7 (Pipe) or XML encoding. Besides providing a <tt>ClosureEncodingRule</tt> class, only a link to HAPI's <a href="http://hl7api.sourceforge.net/apidocs/ca/uhn/hl7v2/validation/impl/XMLSchemaRule.html" rel="nofollow">XMLSchemaRule</a> is defined:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
   .forVersion()
   ...
      .encoding(<span class="code-quote">"XML"</span>).isValidXML()
...
</pre>
</div></div>
<h1><a name="IPFreference-single-CamelDSLExtensionsforHL7v2"></a>Camel DSL Extensions for HL7 v2</h1>

<p>This chapter shows how HL7 Messaging support can be used in IPF integration routes.</p>

<hr>

<h2><a name="IPFreference-single-ConfiguringCamelDSLExtensionsforHL7v2Messaging"></a>Configuring Camel DSL Extensions for HL7 v2 Messaging</h2>

<p>This section explains how to configure the DSL extensions for HL7 messaging support. </p>

<p>Make sure you already have correctly set up</p>
<ul>
	<li>Maven 2.0.9 or better</li>
	<li>a possibly empty IPF project</li>
</ul>


<p>After configuration you will be able to use the HL7 v2 related DSLs together with Apache Camel's routing engine.</p>

<ol>
	<li>Add the necessary dependencies to your project's Maven 2 descriptor.
<br clear="all"> 
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml for integration scenario</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for DSL extensions for HL7 v2 --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-hl7<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>

...
</pre>
</div></div>
<p><br clear="all"></p></li>
	<li>Depending on the HL7 v2 versions, add the corresponding dependencies to the HAPI library. HAPI supports versions 2.2 through 2.6.
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for HL7 v2.5 --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>ca.uhn.hapi<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>hapi-structures-v25<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>0.6<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>

<span class="code-tag"><span class="code-comment">&lt;!-- Dependency for HL7 v2.5.1 --&gt;</span></span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>ca.uhn.hapi<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>hapi-structures-v251<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>0.6<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
...
</pre>
</div></div>
<p><br clear="all"></p></li>
	<li>Register the Camel extensions in the Spring Application Context of your application. If you use the functional extensions to HAPI, register the HapiModelExtensions as well.
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd

    <span class="code-tag"><span class="code-comment">&lt;!-- Setting up the Camel context --&gt;</span></span>

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span> /&gt;</span>
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>
    
    <span class="code-tag">&lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span> class=<span class="code-quote">"..."</span> /&gt;</span>

    ...

    <span class="code-tag"><span class="code-comment">&lt;!-- HAPI extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"hapiModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.extend.HapiModelExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"..."</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- General Mapping extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"mappingExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.extend.MappingExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"..."</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Camel DSL extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"hl7ModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.hl7.extend.Hl7ModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Register the extensions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                ...
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"hl7ModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"hapiModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"mappingExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    ...

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div></li>
</ol>

<h2><a name="IPFreference-single-DSLextensionsforHL7v2Messaging"></a>DSL extensions for HL7 v2 Messaging</h2>

<p>This section describes the DSL extensions for using HL7 v2 together with Apache Camel, provided by the <tt>platform-camel-hl7</tt> component. For a description of Camel-independent HL7 message processing features visit <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Messaging" title="HL7 Messaging">HL7 Messaging</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Message+Validation" title="HL7 Message Validation">HL7 Message Validation</a>.</p>

<p>The main purpose of this set of DSL extensions is to make the HL7 v2 DSL, HAPI extensions and HL7 v2 Validation features available in Camel routes. Extensions provided may well be combined with other extensions that comply with the DSL extension mechanism.</p>

<h3><a name="IPFreference-single-HL7v2DSLMessageAdapter%28un%29marshalling"></a>HL7 v2 DSL MessageAdapter (un)marshalling</h3>

<p>The <tt>ghl7()</tt> DSL extension allows you to convert between HL7 message strings (or streams) and <tt>org.openehealth.ipf.modules.hl7dsl.MessageAdapter</tt> objects. For example, to unmarshal a message adapter from a string (or stream) use</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Unmarshal message adapter</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// ...
</span>    from('...')
    .unmarshal().ghl7()
    .to('...')
    <span class="code-comment">// ...</span>
</pre>
</div></div>

<p>To marshal a message adapter to an output stream use</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Marshal message adapter</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// ...
</span>    from('...')
    .marshal().ghl7()
    .to('...')
    <span class="code-comment">// ...</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-%28Un%29marshalingoptions"></a>(Un)marshaling options</h3>

<p>HL7 v2 DSL MessageAdapter unmarshalling and marshalling can be customized in various ways. You can define</p>

<ul>
	<li>a custom character set via the <tt>ghl7(java.lang.String charset)</tt> parameter,</li>
	<li>a custom HAPI parser via the <tt>ghl7(ca.uhn.hl7v2.parser.Parser parser)</tt> parameter</li>
	<li>or both via <tt>ghl7(ca.uhn.hl7v2.parser.Parser parser, java.lang.String charset)</tt></li>
</ul>


<p>The <tt>charset</tt> parameter is used to define the character set used for reading from and writing to a byte stream. <br>
The <tt>parser</tt> parameter allows you to define a custom HAPI parser when you unmarshal a message adapter from a stream. The message adapter adapts a HAPI message which in turn is created by a HAPI parser.</p>

<p>Here's an example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>(Un)marshaling options</b></div><div class="codeContent panelContent">
<pre class="code-java">    def ca.uhn.hl7v2.parser.Parser parser = <span class="code-keyword">new</span> MyCustomParser()

    <span class="code-comment">// ...
</span>    .unmarshal().ghl7(parser, 'ISO-8859-1')
    <span class="code-comment">// ...
</span>    .marshal().ghl7('ISO-8859-1')
    <span class="code-comment">// </span>
</pre>
</div></div>

<h3><a name="IPFreference-single-HL7v2MessageValidation"></a>HL7 v2 Message Validation</h3>

<p>HL7 v2 messages can be validated in routes with the <tt>validate().ghl7()</tt> extension. If you don't want to use a default validation context you can provide one via the <tt>staticProfile()</tt> extension. Custom validation contexts can be created as described in <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+v2+Message+Validation" title="HL7 v2 Message Validation">HL7 v2 Message Validation</a>. Here's an example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Message validation with static profiles</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// Create or configure a custom HL7 validation context.
</span>    DefaultValidationContext context = ... 

    <span class="code-comment">// route 1
</span>    <span class="code-comment">// ...
</span>    .unmarshal().ghl7()
    .validate().ghl7()                         <span class="code-comment">// HL7 message validation with <span class="code-keyword">default</span> validation context
</span>    <span class="code-comment">// ...
</span>
    <span class="code-comment">// route 2
</span>    <span class="code-comment">// ...
</span>    .unmarshal().ghl7()
    .validate().ghl7().staticProfile(context)  <span class="code-comment">// HL7 message validation with custom validation context
</span>    <span class="code-comment">// ...</span>
</pre>
</div></div>

<p>The DSL Extensions for HL7 v2 Message Validation  relies on <tt>org.openehealth.ipf.modules.hl7dsl.MessageAdapter</tt> message bodies. These are created via <tt>unmarshal().ghl7</tt> from input streams or strings. If you want to create a message ValidationContext from an <tt>org.apache.camel.Exchange</tt> you can use the <tt>profile()</tt> DSL extension which defines an <tt>org.apache.camel.Expression</tt> or a Groovy closure as parameter.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Message validation with profile expressions</b></div><div class="codeContent panelContent">
<pre class="code-java">
    org.apache.camel.Expression contextExpression = ...

    <span class="code-comment">// route 1
</span>    <span class="code-comment">// ...
</span>    .unmarshal().ghl7()
    .validate().ghl7().profile(contextExpression)  <span class="code-comment">// Validation context created by an expression object
</span>    <span class="code-comment">// ...
</span>
    <span class="code-comment">// route 2
</span>    <span class="code-comment">// ...
</span>    .unmarshal().ghl7()
    .validate().ghl7().profile {exchange -&gt;        <span class="code-comment">// Validation context created by a closure
</span>        <span class="code-comment">// obtain or create validation 
</span>        <span class="code-comment">// context from message exchange
</span>        <span class="code-comment">// and <span class="code-keyword">return</span> it
</span>    }                         
    <span class="code-comment">// ...
</span>
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Backwards compatibility</b><br><p>Earlier IPF versions allowed to set <em>static profiles</em> with the <tt>profile()</tt> extension. This is still possible but it is recommended to use <tt>staticProfile()</tt> instead. However for <em>profile expressions</em> you should use <tt>profile()</tt>.</p></td></tr></tbody></table></div>
<h2><a name="IPFreference-single-CamelDSLExtensionsforHL7v2MessagingExample"></a>Camel DSL Extensions for HL7 v2 Messaging Example</h2>

<p>Often, for processing HL7 messages you might first want to unmarshal a <tt>MessageAdapter</tt> from an <tt>InputStream</tt>, validate the message using either a default or custom validation context and then use the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+DSL" title="HL7 DSL">HL7 DSL</a> in processors, transmogrifiers or content based routers. Then the processing result is marshalled again for being transported to another endpoint. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>HL7 DSL example</b></div><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"direct:input1"</span>)
    <span class="code-comment">// create a message adapter from an HL7 string
</span>    .unmarshal().ghl7()
    <span class="code-comment">// validate the message using a <span class="code-keyword">default</span> validation context
</span>    .validate().ghl7()
    <span class="code-comment">// transmogrifiers are passed in-message bodies
</span>    <span class="code-comment">// and message headers by <span class="code-keyword">default</span>.
</span>    .transmogrify { msg, headers -&gt;
        <span class="code-comment">// set the MSH[5] field to whatever is contained in the foo message header
</span>        <span class="code-comment">// (using the HAPI DSL)
</span>        msg.MSH[5] = headers.foo
        msg
    }
    .choice()
    <span class="code-comment">// when-closures are passed messages exchanges by <span class="code-keyword">default</span>. Here the
</span>    <span class="code-comment">// routing decisions are made based in the MSH[5] field value of the HL7 message 
</span>    <span class="code-comment">// (using the HL7 v2 DSL)
</span>        .when { it.in.body.MSH[5].value == 'blah' }
            .marshal().ghl7() <span class="code-comment">// adapter -&gt; string
</span>            .to('mock:output1')
        .when { it.in.body.MSH[5].value == 'blub' }
            .marshal().ghl7() <span class="code-comment">// adapter -&gt; string
</span>            .to('mock:output2')
</pre>
</div></div> 
<h1><a name="IPFreference-single-IPFComponentsforIHEIntegrationProfiles"></a>IPF Components for IHE Integration Profiles</h1>

<p>The IPF provides support for several IHE profiles.  The basic idea is to offer a <a href="http://camel.apache.org/components.html" rel="nofollow">Camel component</a> for each IHE transaction. These components ensure that the technical requirements of the profile are met by applications built on top of the IPF IHE support.</p>

<p>Each IPF IHE component is named according to the profile and the transaction it implements:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Transaction ID </th>
<th class="confluenceTh"> IHE Profile </th>
<th class="confluenceTh"> Description </th>
<th class="confluenceTh"> IPF component </th>
</tr>
<tr>
<td class="confluenceTd"> ITI-8 </td>
<td class="confluenceTd"> PIX <br clear="all"> XDS.a+b </td>
<td class="confluenceTd"> Patient Identity Feed </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixiti8%2Fxdsiti8%7D%7DComponent">pix-iti8</a> <br clear="all">
<a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixiti8%2Fxdsiti8%7D%7DComponent">xds-iti8</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-9 </td>
<td class="confluenceTd"> PIX </td>
<td class="confluenceTd"> PIX Query </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixiti9%7D%7DComponent">pix-iti9</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-10 </td>
<td class="confluenceTd"> PIX </td>
<td class="confluenceTd"> PIX Update Notification </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixiti10%7D%7DComponent">pix-iti10</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-14 </td>
<td class="confluenceTd"> XDS.a </td>
<td class="confluenceTd"> Register Document Set </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti14%7D%7DComponent">xds-iti14</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-15 </td>
<td class="confluenceTd"> XDS.a </td>
<td class="confluenceTd"> Provide &amp; Register Document Set </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti15%7D%7DComponent">xds-iti15</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-16 </td>
<td class="confluenceTd"> XDS.a </td>
<td class="confluenceTd"> Query Registry </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti16%7D%7DComponent">xds-iti16</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-17 </td>
<td class="confluenceTd"> XDS.a </td>
<td class="confluenceTd"> Retrieve Document </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti17%7D%7DComponent">xds-iti17</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-18 </td>
<td class="confluenceTd"> XDS.a+b </td>
<td class="confluenceTd"> Registry Stored Query </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti18%7D%7DComponent">xds-iti18</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-21 </td>
<td class="confluenceTd"> PDQ </td>
<td class="confluenceTd"> Patient Demographics Query </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpdqiti21%7D%7DComponent">pdq-iti21</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-22 </td>
<td class="confluenceTd"> PDQ </td>
<td class="confluenceTd"> Patient Demographics and Visit Query </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpdqiti22%7D%7DComponent">pdq-iti22</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-41 </td>
<td class="confluenceTd"> XDS.b </td>
<td class="confluenceTd"> Provide &amp; Register Document Set </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti41%7D%7DComponent">xds-iti41</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-42 </td>
<td class="confluenceTd"> XDS.b </td>
<td class="confluenceTd"> Register Document Set </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti42%7D%7DComponent">xds-iti42</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-43 </td>
<td class="confluenceTd"> XDS.b </td>
<td class="confluenceTd"> Retrieve Document Set </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxdsiti43%7D%7DComponent">xds-iti43</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-44 </td>
<td class="confluenceTd"> PIXv3 <br clear="all"> XDS.b </td>
<td class="confluenceTd"> Patient Identity Feed v3 </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixv3iti44%2Fxdsiti44%7D%7DComponent">pixv3-iti44</a> <br clear="all">
<a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixv3iti44%2Fxdsiti44%7D%7DComponent">xds-iti44</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-45 </td>
<td class="confluenceTd"> PIXv3 </td>
<td class="confluenceTd"> PIX Query v3 </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixv3iti45%7D%7DComponent">pixv3-iti45</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-46 </td>
<td class="confluenceTd"> PIXv3 </td>
<td class="confluenceTd"> PIX Update Notification v3 </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpixv3iti46%7D%7DComponent">pixv3-iti46</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-47 </td>
<td class="confluenceTd"> PDQv3 </td>
<td class="confluenceTd"> Patient Demographics Query (PDQ) v3 </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bpdqv3iti47%7D%7DComponent">pdqv3-iti47</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-55 </td>
<td class="confluenceTd"> XCPD </td>
<td class="confluenceTd"> Cross-Gateway Patient Discovery </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxcpditi55%7D%7DComponent">xcpd-iti55</a> </td>
</tr>
<tr>
<td class="confluenceTd"> ITI-56 </td>
<td class="confluenceTd"> XCPD </td>
<td class="confluenceTd"> Cross-Gateway Patient Location Query </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bxcpditi56%7D%7DComponent">xcpd-iti56</a> </td>
</tr>
<tr>
<td class="confluenceTd"> PCC-1 </td>
<td class="confluenceTd"> QED </td>
<td class="confluenceTd"> Query for Existing Data (QED) </td>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-%7B%7Bqedpcc1%7D%7DComponent">qed-pcc1</a> </td>
</tr>
</tbody></table>

<h2><a name="IPFreference-single-%7B%7Bpixiti8%2Fxdsiti8%7D%7DComponent"></a><tt>pix-iti8/xds-iti8</tt> Component</h2>

<p>The <b><tt>pix-iti8/xds-iti8</tt></b> component provides interfaces for actors of the <em>Patient Identity Feed</em> IHE transaction (ITI-8), which is described in <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.8. <br>
This transaction relates to both PIX and XDS IHE profiles, therefore the same component is available under two different names.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti8.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Identity Source</em> actor.  Consumer side corresponds to both <em>Patient Identifier Cross-reference Manager</em> and <em>XDS Document Registry</em> actors.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdq<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<p>The endpoint URI format of the <b><tt>pix-iti8/xds-iti8</tt></b> component is identical for producers and consumers:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">pix-iti8:<span class="code-comment">//hostname:port[?parameters]
</span>xds-iti8:<span class="code-comment">//hostname:port[?parameters]</span>
</pre>
</div></div>
<p>where <em>hostname</em> is either an IP address or a domain name, and <em>port</em> is a decimal number.   These two obligatory URI parts represent the address of the MLLP endpoint which is to be served by the given consumer or accessed by the given producer.  URI parameters are optional.  Besides of <a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-parameters" title="mllp-common-parameters">generic URI parameters</a> of all MLLP-based IPF IHE components, there are parameters which control special features described in the next section.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-datatypes" title="mllp-common-datatypes">Message types and exception handling</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-segment-fragmentation" title="mllp-common-segment-fragmentation">Segment fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-unsolicited-fragmentation" title="mllp-common-unsolicited-fragmentation">Unsolicited request message fragmentation</a>.</li>
</ul>

<h2><a name="IPFreference-single-%7B%7Bpixiti9%7D%7DComponent"></a><tt>pix-iti9</tt> Component</h2>

<p>The <b><tt>pix-iti9</tt></b> component provides interfaces for actors of the <em>Patient Identity Query</em> IHE transaction (ITI-9), which is described in <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.9. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti9.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Identifier Cross-reference Consumer</em> actor.  Consumer side corresponds to the <em>Patient Identifier Cross-reference Manager</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdq<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<p>The endpoint URI format of the <b><tt>pix-iti9</tt></b> component is identical for producers and consumers:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">pix-iti9:<span class="code-comment">//hostname:port[?parameters]</span>
</pre>
</div></div>
<p>where <em>hostname</em> is either an IP address or a domain name, and <em>port</em> is a decimal number.   These two obligatory URI parts represent the address of the MLLP endpoint which is to be served by the given consumer or accessed by the given producer.  URI parameters are optional.  Besides of <a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-parameters" title="mllp-common-parameters">generic URI parameters</a> of all MLLP-based IPF IHE components, there are parameters which control special features described in the next section.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-datatypes" title="mllp-common-datatypes">Message types and exception handling</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-segment-fragmentation" title="mllp-common-segment-fragmentation">Segment fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-unsolicited-fragmentation" title="mllp-common-unsolicited-fragmentation">Unsolicited request message fragmentation</a>.</li>
</ul>

<h2><a name="IPFreference-single-%7B%7Bpixiti10%7D%7DComponent"></a><tt>pix-iti10</tt> Component</h2>

<p>The <b><tt>pix-iti10</tt></b> component provides interfaces for actors of the <em>Patient Identity Update Notification</em> IHE transaction (ITI-10), which is described in <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.10. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti10.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Identifier Cross-reference Manager</em> actor.  Consumer side corresponds to the <em>Patient Identifier Cross-reference Consumer</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdq<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<p>The endpoint URI format of the <b><tt>pix-iti10</tt></b> component is identical for producers and consumers:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">pix-iti10:<span class="code-comment">//hostname:port[?parameters]</span>
</pre>
</div></div>
<p>where <em>hostname</em> is either an IP address or a domain name, and <em>port</em> is a decimal number.   These two obligatory URI parts represent the address of the MLLP endpoint which is to be served by the given consumer or accessed by the given producer.  URI parameters are optional.  Besides of <a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-parameters" title="mllp-common-parameters">generic URI parameters</a> of all MLLP-based IPF IHE components, there are parameters which control special features described in the next section.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-datatypes" title="mllp-common-datatypes">Message types and exception handling</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-segment-fragmentation" title="mllp-common-segment-fragmentation">Segment fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-unsolicited-fragmentation" title="mllp-common-unsolicited-fragmentation">Unsolicited request message fragmentation</a>.</li>
</ul>
 
<h2><a name="IPFreference-single-%7B%7Bxdsiti14%7D%7DComponent"></a><tt>xds-iti14</tt> Component</h2>

<p>The <b><tt>xds-iti14</tt></b> component provides interfaces for actors of the <em>Register Document Set</em> IHE transaction (ITI-14), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.14.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti14.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Repository</em> actor.  Consumer side corresponds to the <em>Document Registry</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti14</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti14:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti14</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti14</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti14:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti14Service", then the <b><tt>xds-iti14</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti14Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>

<h2><a name="IPFreference-single-%7B%7Bxdsiti15%7D%7DComponent"></a><tt>xds-iti15</tt> Component</h2>

<p>The <b><tt>xds-iti15</tt></b> component provides interfaces for actors of the <em>Provide and Register Document Set</em> IHE transaction (ITI-15), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.15.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti15.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Source</em> actor.  Consumer side corresponds to the <em>Document Repository</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti15</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti15:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti15</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti15</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti15:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti15Service", then the <b><tt>xds-iti15</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti15Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>


<h2><a name="IPFreference-single-Noteoninternalhandlingofattacheddocuments"></a>Note on internal handling of attached documents</h2>

<p>The ITI-15 transaction uses <a href="http://www.w3.org/TR/SOAP-attachments" rel="nofollow">SOAP with Attachments</a> (SwA) for uploading binary documents.  Whether the the implementation of the SwA feature in <a href="http://cxf.apache.org/" rel="nofollow">Apache CXF</a> is efficient enough for this purpose, is currently an open issue. </p>
<h2><a name="IPFreference-single-%7B%7Bxdsiti16%7D%7DComponent"></a><tt>xds-iti16</tt> Component</h2>

<p>The <b><tt>xds-iti16</tt></b> component provides interfaces for actors of the <em>Query Registry</em> IHE transaction (ITI-16), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.16.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti16.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Consumer</em> actor.  Consumer side corresponds to the <em>Document Registry</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti16</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti16:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti16</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti16</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti16:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti16Service", then the <b><tt>xds-iti16</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti16Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>

<h1><a name="IPFreference-single-%7B%7Bxdsiti17%7D%7DComponent"></a><tt>xds-iti17</tt> Component</h1>

<p>The <b><tt>xds-iti17</tt></b> component provides interfaces for actors of the <em>XDS.a Retrieve Document</em> IHE transaction (ITI-17), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_6-0_Vol2a_FT_2009-08-10-2.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.17.  As opposed to the other transactions from the XDS profile, ITI-17 uses "pure" HTTP GET communication instead of Web Services.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti17.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Consumer</em> actor.  Consumer side corresponds to the <em>Document Repository</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h2><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h2>

<h3><a name="IPFreference-single-Producer"></a>Producer</h3>

<p>Producer endpoint URI of the <b><tt>xds-iti17</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti17:<span class="code-comment">//hostname:port/path/to/document[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and the rest represents additional path elements of the remote document to be retrieved.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Consumer"></a>Consumer</h3>

<p>Consumer endpoint URI of the <b><tt>xds-iti17</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti17:serviceName[?parameters]"</span>)
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<p>Same as for Web Service-based transactions, a deployment container is required.  The IPF provides a special servlet class for ITI-17 consumers.  The sample web application descriptor below shows how to use this servlet along with the one for Web Services:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;?xml version=<span class="code-quote">"1.0"</span>?&gt;</span>
&lt;!DOCTYPE web-app PUBLIC <span class="code-quote">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span>
     <span class="code-quote">"http://java.sun.com/dtd/web-app_2_3.dtd"</span>&gt;

<span class="code-tag">&lt;web-app&gt;</span>
  <span class="code-tag">&lt;display-name&gt;</span>Test IPF IHE Web-App<span class="code-tag">&lt;/display-name&gt;</span>
  <span class="code-tag">&lt;context-param&gt;</span>
    <span class="code-tag"><span class="code-comment">&lt;!-- configures the classpath of the Spring application context --&gt;</span></span>
    <span class="code-tag">&lt;param-name&gt;</span>contextConfigLocation<span class="code-tag">&lt;/param-name&gt;</span>
    <span class="code-tag">&lt;param-value&gt;</span>classpath:example/context.xml<span class="code-tag">&lt;/param-value&gt;</span>
  <span class="code-tag">&lt;/context-param&gt;</span>

  <span class="code-tag">&lt;listener&gt;</span>
    <span class="code-tag">&lt;listener-class&gt;</span>
      org.springframework.web.context.ContextLoaderListener
    <span class="code-tag">&lt;/listener-class&gt;</span>
  <span class="code-tag">&lt;/listener&gt;</span>

  <span class="code-tag">&lt;servlet&gt;</span>
    <span class="code-tag"><span class="code-comment">&lt;!-- Servlet used for all CXF web services --&gt;</span></span>
    <span class="code-tag">&lt;servlet-name&gt;</span>CXFServlet<span class="code-tag">&lt;/servlet-name&gt;</span>
    <span class="code-tag">&lt;servlet-class&gt;</span>
        org.apache.cxf.transport.servlet.CXFServlet
    <span class="code-tag">&lt;/servlet-class&gt;</span>
  <span class="code-tag">&lt;/servlet&gt;</span>

  <span class="code-tag">&lt;servlet&gt;</span>
    <span class="code-tag"><span class="code-comment">&lt;!-- Servlet used only for ITI-17 --&gt;</span></span>
    <span class="code-tag">&lt;servlet-name&gt;</span>Iti17Servlet<span class="code-tag">&lt;/servlet-name&gt;</span>
    <span class="code-tag">&lt;servlet-class&gt;</span>
        org.openehealth.ipf.platform.camel.ihe.xds.iti17.servlet.Iti17Servlet
    <span class="code-tag">&lt;/servlet-class&gt;</span>
  <span class="code-tag">&lt;/servlet&gt;</span>

  <span class="code-tag">&lt;servlet-mapping&gt;</span>
    <span class="code-tag"><span class="code-comment">&lt;!-- configures the address of the servlet path under which our web services are published --&gt;</span></span>
    <span class="code-tag">&lt;servlet-name&gt;</span>CXFServlet<span class="code-tag">&lt;/servlet-name&gt;</span>
    <span class="code-tag">&lt;url-pattern&gt;</span>/services/*<span class="code-tag">&lt;/url-pattern&gt;</span>
  <span class="code-tag">&lt;/servlet-mapping&gt;</span>

  <span class="code-tag">&lt;servlet-mapping&gt;</span>
    <span class="code-tag"><span class="code-comment">&lt;!-- configures the address of the servlet path under which the ITI-17 transaction is published --&gt;</span></span>
    <span class="code-tag">&lt;servlet-name&gt;</span>Iti17Servlet<span class="code-tag">&lt;/servlet-name&gt;</span>
    <span class="code-tag">&lt;url-pattern&gt;</span>/iti17/*<span class="code-tag">&lt;/url-pattern&gt;</span>
  <span class="code-tag">&lt;/servlet-mapping&gt;</span>
<span class="code-tag">&lt;/web-app&gt;</span>
</pre>
</div></div>

<p>Corresponding to this configuration, the ITI-17 endpoint will be accessible under the URL </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//HOSTNAME:PORT/WEBAPP/iti17/myIti17Service</span>
</pre>
</div></div>

<p>Note that the servlet path (<tt>iti17</tt>) is different to that of other transactions (<tt>services</tt>) that uses the <tt>CXFServlet</tt>.</p>

<h2><a name="IPFreference-single-Messagetypes"></a>Message types</h2>

<h3><a name="IPFreference-single-Requests"></a>Requests</h3>

<p>Request message is supposed to be a <tt>String</tt> containing additional path elements of the document to be retrieved and will be appended to the endpoint URI.  Its exact structure depends on the implementation of the <em>Repository actor</em>. It can be a path, a query, or a combination of both:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Document URL </th>
<th class="confluenceTh"> ITI-17 input message body </th>
</tr>
<tr>
<td class="confluenceTd"> <pre>http://HOSTNAME:PORT/WEBAPP/iti17/myIti17Service/my/path/to/document</pre> </td>
<td class="confluenceTd"> <pre>/my/path/to/document</pre> </td>
</tr>
<tr>
<td class="confluenceTd"> <pre>http://HOSTNAME:PORT/WEBAPP/iti17/myIti17Service?docId=123</pre> </td>
<td class="confluenceTd"> <pre>?docId=123</pre> </td>
</tr>
<tr>
<td class="confluenceTd"> <pre>http://HOSTNAME:PORT/WEBAPP/iti17/myIti17Service/my/path?docId=321</pre> </td>
<td class="confluenceTd"> <pre>/my/path?docId=321</pre> </td>
</tr>
</tbody></table>

<h3><a name="IPFreference-single-Responses"></a>Responses</h3>

<p>Successful response messages represent <tt>InputStream</tt> instances with the contents of the requested document.  Streaming capabilities are provided out-of-box, so there is no need for the IPF's <a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support" title="Large binary support">Large Binary Support</a></p>


<h2><a name="IPFreference-single-URIparameters"></a>URI parameters</h2>

<p>Parameter <tt>secure</tt> should be set to <tt>true</tt> when the endpoint should use SSL encryption.</p>

<p>Furthermore, <a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a> parameters are supported.</p>
<h2><a name="IPFreference-single-%7B%7Bxdsiti18%7D%7DComponent"></a><tt>xds-iti18</tt> Component</h2>

<p>The <b><tt>xds-iti18</tt></b> component provides interfaces for actors of the <em>Registry Stored Query</em> IHE transaction (ITI-18), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.18.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti18.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Consumer</em> actor.  Consumer side corresponds to the <em>Document Registry</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti18</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti18:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti18</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti18</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti18:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti18Service", then the <b><tt>xds-iti18</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti18Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>

<h2><a name="IPFreference-single-%7B%7Bpdqiti21%7D%7DComponent"></a><tt>pdq-iti21</tt> Component</h2>

<p>The <b><tt>pdq-iti21</tt></b> component provides interfaces for actors of the <em>Patient Demographics Query</em> IHE transaction (ITI-21), which is described in <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.21. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti21.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Demographics Consumer</em> actor.  Consumer side corresponds to the <em>Patient Demographics Supplier</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdq<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<p>The endpoint URI format of the <b><tt>pdq-iti21</tt></b> component is identical for producers and consumers:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">pdq-iti21:<span class="code-comment">//hostname:port[?parameters]</span>
</pre>
</div></div>
<p>where <em>hostname</em> is either an IP address or a domain name, and <em>port</em> is a decimal number.   These two obligatory URI parts represent the address of the MLLP endpoint which is to be served by the given consumer or accessed by the given producer.  URI parameters are optional.  Besides of <a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-parameters" title="mllp-common-parameters">generic URI parameters</a> of all MLLP-based IPF IHE components, there are parameters which control special features described in the next section.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-datatypes" title="mllp-common-datatypes">Message types and exception handling</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-segment-fragmentation" title="mllp-common-segment-fragmentation">Segment fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-unsolicited-fragmentation" title="mllp-common-unsolicited-fragmentation">Unsolicited request message fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-interactive-continuation" title="mllp-common-interactive-continuation">Interactive response message continuation</a>.</li>
</ul>

<h2><a name="IPFreference-single-%7B%7Bpdqiti22%7D%7DComponent"></a><tt>pdq-iti22</tt> Component</h2>

<p>The <b><tt>pdq-iti22</tt></b> component provides interfaces for actors of the <em>Patient Demographics and Visit Query</em> IHE transaction (ITI-22), which is described in <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2a_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2a, Section 3.22. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti22.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Demographics Consumer</em> actor.  Consumer side corresponds to the <em>Patient Demographics Supplier</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdq<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<p>The endpoint URI format of the <b><tt>pdq-iti22</tt></b> component is identical for producers and consumers:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">pdq-iti22:<span class="code-comment">//hostname:port[?parameters]</span>
</pre>
</div></div>
<p>where <em>hostname</em> is either an IP address or a domain name, and <em>port</em> is a decimal number.   These two obligatory URI parts represent the address of the MLLP endpoint which is to be served by the given consumer or accessed by the given producer.  URI parameters are optional.  Besides of <a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-parameters" title="mllp-common-parameters">generic URI parameters</a> of all MLLP-based IPF IHE components, there are parameters which control special features described in the next section.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-datatypes" title="mllp-common-datatypes">Message types and exception handling</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-segment-fragmentation" title="mllp-common-segment-fragmentation">Segment fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-unsolicited-fragmentation" title="mllp-common-unsolicited-fragmentation">Unsolicited request message fragmentation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/mllp-common-interactive-continuation" title="mllp-common-interactive-continuation">Interactive response message continuation</a>.</li>
</ul>
 
<h2><a name="IPFreference-single-%7B%7Bxdsiti41%7D%7DComponent"></a><tt>xds-iti41</tt> Component</h2>

<p>The <b><tt>xds-iti41</tt></b> component provides interfaces for actors of the <em>Provide and Register Document Set.b</em> IHE transaction (ITI-41), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2b_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2b, Section 3.41.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti41.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Source</em> actor.  Consumer side corresponds to the <em>Document Repository</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti41</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti41:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti41</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti41</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti41:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti41Service", then the <b><tt>xds-iti41</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti41Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>


<h2><a name="IPFreference-single-Largedocumentcontent"></a>Large document content</h2>

<p>This transaction sends document content as part of its request or response messages.  In practice such messages can become quite large.  To allow for memory-efficient streaming of the document content, the aforementioned components rely on <a href="http://cxf.apache.org/" rel="nofollow">Apache CXF</a> support for binary data.  CXF streams the content on disk and then provides a <tt>DataHandler</tt> to access the file.  Therefore, it is not necessary to use IPF's large binary support (<a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support" title="Large binary support">LBS</a>).</p>
<h2><a name="IPFreference-single-%7B%7Bxdsiti42%7D%7DComponent"></a><tt>xds-iti42</tt> Component</h2>

<p>The <b><tt>xds-iti42</tt></b> component provides interfaces for actors of the <em>Register Document Set.b</em> IHE transaction (ITI-42), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2b_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2b, Section 3.42.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti42.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Repository</em> actor.  Consumer side corresponds to the <em>Document Registry</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti42</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti42:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti42</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti42</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti42:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti42Service", then the <b><tt>xds-iti42</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti42Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>

<h2><a name="IPFreference-single-%7B%7Bxdsiti43%7D%7DComponent"></a><tt>xds-iti43</tt> Component</h2>

<p>The <b><tt>xds-iti43</tt></b> component provides interfaces for actors of the <em>Retrieve Document Set.b</em> IHE transaction (ITI-43), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_TF_Rev7-0_Vol2b_FT_2010-08-10.pdf" rel="nofollow">IHE IT Infrastructure Technical Framework</a>, Volume 2b, Section 3.43.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti43.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Document Consumer</em> actor.  Consumer side corresponds to the <em>Document Repository</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xds<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xds-iti43</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xds-iti43:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xds-iti43</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xds-iti43</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xds-iti43:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xds/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti43Service", then the <b><tt>xds-iti43</tt></b> consumer will be available for external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xds/iti43Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.  To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/xds-common-datatypes" title="xds-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>


<h2><a name="IPFreference-single-Largedocumentcontent"></a>Large document content</h2>

<p>This transaction sends document content as part of its request or response messages.  In practice such messages can become quite large.  To allow for memory-efficient streaming of the document content, the aforementioned components rely on <a href="http://cxf.apache.org/" rel="nofollow">Apache CXF</a> support for binary data.  CXF streams the content on disk and then provides a <tt>DataHandler</tt> to access the file.  Therefore, it is not necessary to use IPF's large binary support (<a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support" title="Large binary support">LBS</a>).</p>

<h2><a name="IPFreference-single-%7B%7Bpixv3iti44%2Fxdsiti44%7D%7DComponent"></a><tt>pixv3-iti44/xds-iti44</tt> Component</h2>



<p>The <b><tt>pixv3-iti44/xds-iti44</tt></b> component provides interfaces for actors of the <em>Patient Identity Feed v3</em> IHE transaction (ITI-44), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_Suppl_PIX_PDQ_HL7v3_Rev2-1_TI_2010-08-10.pdf" rel="nofollow">IHE PIX/PDQ v3 Supplement</a>, Section 3.44. <br>
This transaction is defined in both PIXv3 and XDS IHE profiles, therefore there are two Camel components.  Their only differences relate to naming conventions and namespaces in WSDL documents.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti44.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Identity Source</em> actor.  Consumer side corresponds to both <em>Patient Identifier Cross-reference Manager</em> and <em>XDS Document Registry</em> actors.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdqv3<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>pixv3-iti44/xds-iti44</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"pixv3-iti44:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)
</span>.to(<span class="code-quote">"xds-iti44:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>pixv3-iti44/xds-iti44</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>pixv3-iti44/xds-iti44</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"pixv3-iti44:serviceName[?parameters]"</span>)
from(<span class="code-quote">"xds-iti44:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /pixv3/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti44Service", then the <b><tt>pixv3-iti44/xds-iti44</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/pixv3/iti44Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>


<h2><a name="IPFreference-single-%7B%7Bpixv3iti45%7D%7DComponent"></a><tt>pixv3-iti45</tt> Component</h2>



<p>The <b><tt>pixv3-iti45</tt></b> component provides interfaces for actors of the <em>Patient Identity Query v3</em> IHE transaction (ITI-45), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_Suppl_PIX_PDQ_HL7v3_Rev2-1_TI_2010-08-10.pdf" rel="nofollow">IHE PIX/PDQ v3 Supplement</a>, Section 3.45. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti45.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Identifier Cross-Reference Consumer</em> actor.  Consumer side corresponds to the <em>Patient Identifier Cross-Reference Manager</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdqv3<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>pixv3-iti45</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"pixv3-iti45:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>pixv3-iti45</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>pixv3-iti45</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"pixv3-iti45:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /pixv3/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti45Service", then the <b><tt>pixv3-iti45</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/pixv3/iti45Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>
 

<h2><a name="IPFreference-single-%7B%7Bpixv3iti46%7D%7DComponent"></a><tt>pixv3-iti46</tt> Component</h2>



<p>The <b><tt>pixv3-iti46</tt></b> component provides interfaces for actors of the <em>Patient Identity Update Notification v3</em> IHE transaction (ITI-46), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_Suppl_PIX_PDQ_HL7v3_Rev2-1_TI_2010-08-10.pdf" rel="nofollow">IHE PIX/PDQ v3 Supplement</a>, Section 3.46. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti46.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Identifier Cross-Reference Manager</em> actor.  Consumer side corresponds to the <em>Patient Identifier Cross-Reference Consumer</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdqv3<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>pixv3-iti46</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"pixv3-iti46:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>pixv3-iti46</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>pixv3-iti46</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"pixv3-iti46:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /pixv3/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti46Service", then the <b><tt>pixv3-iti46</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/pixv3/iti46Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>
 

<h2><a name="IPFreference-single-%7B%7Bpdqv3iti47%7D%7DComponent"></a><tt>pdqv3-iti47</tt> Component</h2>



<p>The <b><tt>pdqv3-iti47</tt></b> component provides interfaces for actors of the <em>Patient Demographics Query v3</em> IHE transaction (ITI-47), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_Suppl_PIX_PDQ_HL7v3_Rev2-1_TI_2010-08-10.pdf" rel="nofollow">IHE PIX/PDQ v3 Supplement</a>, Section 3.47. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti47.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Patient Demographics Consumer</em> actor.  Consumer side corresponds to the <em>Patient Demographics Supplie</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdqv3<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>pdqv3-iti47</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"pdqv3-iti47:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>pdqv3-iti47</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>pdqv3-iti47</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"pdqv3-iti47:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /pdqv3/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti47Service", then the <b><tt>pdqv3-iti47</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/pdqv3/iti47Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-continuation" title="hl7v3-common-continuation">Continuation support</a>.</li>
</ul>


<h2><a name="IPFreference-single-%7B%7Bxcpditi55%7D%7DComponent"></a><tt>xcpd-iti55</tt> Component</h2>



<p>The <b><tt>xcpd-iti55</tt></b> component provides interfaces for actors of the <em>Cross-Gateway Patient Discovery</em> IHE transaction (ITI-55), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_Suppl_XCPD_Rev2-1_TI_2010-08_10.pdf" rel="nofollow">IHE XCPD Supplement</a>, Section 3.55. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti55.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Initiating Gateway</em> actor.  Consumer side corresponds to the <em>Responding Gateway</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xcpd<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xcpd-iti55</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xcpd-iti55:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xcpd-iti55</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xcpd-iti55</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xcpd-iti55:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xcpd/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti55Service", then the <b><tt>xcpd-iti55</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xcpd/iti55Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-async" title="ws-common-async">Asynchronous Web Service exchange option</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>
 

<h2><a name="IPFreference-single-TimetoliveSOAPHeader"></a>Time-to-live SOAP Header</h2>

<p>ITI-55 specification defines a SOAP header "CorrelationTimeToLive", which contains duration of the data actuality in requests and responses.  This header can be set and retrieved in the following way:</p>

<ul>
	<li>to set the TTL value for an outgoing message (i.e. a request on the Initiating Gateway side or a response on the Responding Gateway side), an instance of <tt>javax.xml.datatype.Duration</tt> should be put into Camel message header <a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/platform/camel/ihe/xcpd/iti55/Iti55Component.html#XCPD_OUTPUT_TTL_HEADER_NAME"><tt>Iti55Component#XCPD_OUTPUT_TTL_HEADER_NAME</tt></a>;</li>
	<li>when an incoming message (i.e. a request on the Responding Gateway side or a response on the Initiating Gateway side) contains valid data in the TTL header, the IPF XCPD component will store its value as a <tt>Duration</tt> instance into the Camel message header <a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/platform/camel/ihe/xcpd/iti55/Iti55Component.html#XCPD_INPUT_TTL_HEADER_NAME"><tt>Iti55Component#XCPD_INPUT_TTL_HEADER_NAME</tt></a>.</li>
</ul>


<h2><a name="IPFreference-single-%7B%7Bxcpditi56%7D%7DComponent"></a><tt>xcpd-iti56</tt> Component</h2>



<p>The <b><tt>xcpd-iti56</tt></b> component provides interfaces for actors of the <em>Cross-Gateway Patient Location Query</em> IHE transaction (ITI-56), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_ITI_Suppl_XCPD_Rev2-1_TI_2010-08_10.pdf" rel="nofollow">IHE XCPD Supplement</a>, Section 3.56. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/iti56.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Initiating Gateway</em> actor.  Consumer side corresponds to the <em>Responding Gateway</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-xcpd<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>xcpd-iti56</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"xcpd-iti56:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>xcpd-iti56</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>xcpd-iti56</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"xcpd-iti56:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /xcpd/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "iti56Service", then the <b><tt>xcpd-iti56</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/xcpd/iti56Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-atna" title="common-atna">ATNA auditing</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-async" title="ws-common-async">Asynchronous Web Service exchange option</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
</ul>
 

<h2><a name="IPFreference-single-%7B%7Bqedpcc1%7D%7DComponent"></a><tt>qed-pcc1</tt> Component</h2>



<p>The <b><tt>qed-pcc1</tt></b> component provides interfaces for actors of the <em>Query for Existing Data</em> IHE transaction (PCC-1), which is described in the <a href="http://www.ihe.net/Technical_Framework/upload/IHE_PCC_Query_for_Existing_Data_QED_Supplement_TI_2008-08-22.pdf" rel="nofollow">IHE QED Supplement</a>, Section 3.1. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/pcc1.png" align="absmiddle" border="0"></p>

<p>Producer side corresponds to the <em>Clinical Data Consumer</em> actor.  Consumer side corresponds to the <em>Clinical Data Source</em> actor.</p>

<p>In a Maven-based environment, the following dependency should be registered in <tt>pom.xml</tt>:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-ihe-pixpdqv3<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-EndpointURIformat"></a>Endpoint URI format</h3>

<h4><a name="IPFreference-single-Producers"></a>Producers</h4>

<p>Producer endpoint URI of the <b><tt>qed-pcc1</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.to(<span class="code-quote">"qed-pcc1:<span class="code-comment">//hostname:port/path/to/service[?parameters]"</span>)</span>
</pre>
</div></div>
<p>where <tt>hostname</tt> is either an IP address or a domain name, <tt>port</tt> is a decimal number, and <tt>/path/to/service</tt> represents additional path elements of the remote service.  URI parameters are optional and control special features as described in the corresponding section below.</p>

<h4><a name="IPFreference-single-Consumers"></a>Consumers</h4>

<p>An important prerequisite of exposing <b><tt>qed-pcc1</tt></b> consumers is a properly configured <a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-deployment" title="ws-common-deployment">deployment container</a>.</p>

<p>Consumer endpoint URI of the <b><tt>qed-pcc1</tt></b> component has the following format:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from(<span class="code-quote">"qed-pcc1:serviceName[?parameters]"</span>)
</pre>
</div></div>
<p>The resulting URL of the exposed IHE Web Service endpoint depends on both the configuration of the deployment container and the <tt>serviceName</tt> parameter provided in the Camel endpoint URI.  For example, when a Tomcat container on the host <tt>eHealth.server.org</tt> is configured in the following way:</p>
<ul>
	<li><tt>port = 8888</tt>,</li>
	<li><tt>contextPath = /IHE</tt>,</li>
	<li><tt>servletPath = /qed/*</tt>,</li>
</ul>


<p>and <tt>serviceName</tt> equals to "pcc1Service", then the <b><tt>qed-pcc1</tt></b> consumer will be available for<br>
 external clients under the URL</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">http:<span class="code-comment">//eHealth.server.org:8888/IHE/qed/pcc1Service</span>
</pre>
</div></div>

<p>URI parameters are optional and control special features as described in the corresponding section below.</p>

<h3><a name="IPFreference-single-Componentfeatures"></a>Component features</h3>

<p>This component supports a set of features which are shared among many IPF IHE components.<br>
To avoid redundancy, their descriptions are summarized in corresponding documents and linked below:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-datatypes" title="hl7v3-common-datatypes">Message types</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/common-message-validation" title="common-message-validation">Message validation</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-secure" title="ws-common-secure">SSL secure communication</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-protocol-headers" title="ws-common-protocol-headers">Handling protocol headers</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/ws-common-custom-interceptors" title="ws-common-custom-interceptors">Deploying custom CXF interceptors</a>.</li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/hl7v3-common-continuation" title="hl7v3-common-continuation">Continuation support</a>.</li>
</ul>
 
<h1><a name="IPFreference-single-TranslationbetweenHL7v2andHL7v3messagemodels"></a>Translation between HL7 v2 and HL7 v3 message models</h1>

<p>IPF contains utilities for translation between HL7 v2 and HL7 v3, thus giving the possibility to implement HL7 v3 transactions on top ot their HL7 v2 counterparts and to avoid redundancy in that way. Currently supported transaction pairs are PIX Feed (ITI-8/ITI-44), PIX Query (ITI-9/ITI-45), PIX Update Notification (ITI-10/ITI-46), and PDQ (ITI-21/ITI-47).</p>

<h2><a name="IPFreference-single-ConfigurationandUse"></a>Configuration and Use</h2>

<p>This section describes configuration steps the user has to perform in order to use the HL7 translators, and provides instructions how to perform the translation. The next section contains an example of a bridge route.</p>

<h3><a name="IPFreference-single-Step1%3AConfiguringMavenDependencies"></a>Step 1: Configuring Maven Dependencies</h3>

<p>First of all, the corresponding Maven artefact must be referenced as a dependency in the application's <tt>pom.xml</tt>, as described above. (Translation utilities per se belong to the artefact <tt>commons-ihe-pixpdqv3</tt>, which will be loaded transitively from <tt>platform-camel-ihe-pixpdqv3</tt>.)</p>

<h3><a name="IPFreference-single-Step2%3AConfiguringMappingService"></a>Step 2: Configuring Mapping Service</h3>

<p>For translation of PIX Feed and PDQ messages, the <a href="http://repo.openehealth.org/confluence/display/ipf2/Mapping+Service" rel="nofollow">IPF Mapping Service</a> must be activated and configured to use the mapping provided by the IPF (which can be accessed as a classpath resource). Here is a snippet of Spring-based configuration:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;bean id=<span class="code-quote">"mappingService"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScripts"</span>&gt;</span>
        <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>classpath:META-INF/map/hl7-v2-v3-translation.map<span class="code-tag">&lt;/value&gt;</span>
            <span class="code-tag"><span class="code-comment">&lt;!-- other mappings --&gt;</span></span>
            <span class="code-tag">&lt;value&gt;</span>...<span class="code-tag">&lt;/value&gt;</span>
        <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>

&lt;bean id=<span class="code-quote">"hapiModelExtension"</span>
      class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.extend.HapiModelExtension"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"mappingService"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>

&lt;bean id=<span class="code-quote">"mappingModelExtension"</span>
      class=<span class="code-quote">"org.openehealth.ipf.commons.map.extend.MappingExtension"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"mappingService"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>

&lt;bean id=<span class="code-quote">"pixpdqv3ModelExtension"</span>
      class=<span class="code-quote">"org.openehealth.ipf.platform.camel.ihe.pixpdqv3.extend.PixPdqV3ModelExtension"</span> /&gt;

&lt;bean id=<span class="code-quote">"coreModelExtension"</span>
      class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span> /&gt;

&lt;bean id=<span class="code-quote">"routeModelExtender"</span>
      class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
        <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"hapiModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"mappingModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"pixpdqv3ModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"..."</span> /&gt;</span>
        <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Step3%3AInstantiateTranslatoBeans"></a>Step 3: Instantiate Translato Beans</h3>

<p>The third configuration step is to instantiate translator beans.<br>
Package <tt>org.openehealth.ipf.commons.ihe.pixpdqv3.translation</tt> contains the following set of classes:</p>
<ul>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PixFeedRequest3to2Translator.html"><tt>PixFeedRequest3to2Translator</tt></a> — translates PIX Feed requests from v3 to v2.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PixFeedAck2to3Translator.html"><tt>PixFeedAck2to3Translator</tt></a> — translates PIX Feed acknowledgements (responses) from v2 to v3.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PixQueryRequest3to2Translator.html"><tt>PixQueryRequest3to2Translator</tt></a> — translates PIX Query requests from v3 to v2.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PixQueryResponse2to3Translator.html"><tt>PixQueryResponse2to3Translator</tt></a> — translates PIX Query responses from v2 to v3.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PixUpdateNotification2to3Translator.html"><tt>PixUpdateNotification2to3Translator</tt></a> — translates PIX Update Notifications from v2 to v3.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PixUpdateNotificationAck3to2Translator.html"><tt>PixUpdateNotificationAck3to2Translator</tt></a> — translates PIX Update Notification acknowledgements from v3 to v2.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PdqRequest3to2Translator.html"><tt>PdqRequest3to2Translator</tt></a> — translates Patient Demographic Queries from v3 to v2.</li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/commons/ihe/pixpdqv3/translation/PdqResponse2to3Translator.html"><tt>PdqResponse2to3Translator</tt></a> — translates Patient Demographic Responses from v2 to v3.</li>
</ul>


<p>Each translator has a set of configurable properties. Their descriptions can be currently taken from <tt>javadoc</tt> of the corresponding classes. Note also that there are reasonable default values, therefore the explicite configuration (see <tt>&lt;property&gt;</tt> items in the example below) can be harmlessly omitted in many cases.</p>

<p>An example for PIX Feed:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">&lt;bean name=<span class="code-quote">"pixFeedRequestTranslator"</span>
      class=<span class="code-quote">"org.openehealth.ipf.commons.ihe.pixpdqv3.translation.PixFeedRequest3to2Translator"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"useSenderDeviceName"</span> value=<span class="code-quote">"true"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"useReceiverDeviceName"</span> value=<span class="code-quote">"true"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"copyEmailAs"</span> value=<span class="code-quote">"PID-13-1"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"copyAccountNumberAs"</span> value=<span class="code-quote">"PID-18"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"accountNumberRoot"</span> value=<span class="code-quote">"1.2.3"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"copyNationalIdentifierAs"</span> value=<span class="code-quote">"PID-19"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"nationalIdentifierRoot"</span> value=<span class="code-quote">"2.16.840.1.113883.4.1"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"birthNameCopyTo"</span> value=<span class="code-quote">"PID-5"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"useOtherIds"</span> value=<span class="code-quote">"true"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>

&lt;bean name=<span class="code-quote">"pixFeedAckTranslator"</span>
      class=<span class="code-quote">"org.openehealth.ipf.commons.ihe.pixpdqv3.translation.PixFeedAck2to3Translator"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"ackCodeFirstCharacter"</span> value=<span class="code-quote">"C"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Step4%3AUsingtheTranslators"></a>Step 4: Using the Translators</h3>

<p>The freshly created translator can be used in three ways:</p>
<ol>
	<li>directly from a Java or Groovy application,</li>
	<li>from a Camel route based on Groovy DSL extensions,</li>
	<li>from a plain Camel route.</li>
</ol>


<p>The first variant is obvious and will not be discussed.  Support for the two other variants is provided by the package <tt>platform-camel-ihe-pixpdqv3</tt>, which, being the basis for the PIXv3 and PDQv3 transactions' impementation, provides processord and DSL extensions which can be used to embed HL7 translation functionality into a Camel route. Spring configuration performed on <b>Step 2</b> already contains all necessary statements to activate these extensions — consider the bean <tt>pixpdqv3ModelExtension</tt>.</p>

<p>For the translation of messages from HL7 v3 to HL7 v2 are responsible:</p>
<ul>
	<li>in Groovy DSL — DSL extension <tt>.translateHL7v3toHL7v2(translator)</tt>,</li>
	<li>in plain Java — processor <a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/platform/camel/ihe/pixpdqv3/PixPdqV3CamelTranslators.html#translatorHL7v3toHL7v2(translator)"><tt>translatorHL7v3toHL7v2(translator)</tt></a>.</li>
</ul>


<p>Their common parameter <tt>translator</tt> corresponds to the translator bean, e.g. it could be the bean <tt>pixFeedRequestTranslator</tt> defined on <b>Step 3</b>.  Before translating, the original HL7 request is saved internally, because some parts of it will have to be yielded unmodified into the HL7 v3 response message.</p>

<p>For the translation of response messages from HL7 v2 to HL7 v3 are responsible:</p>
<ul>
	<li>in Groovy DSL — the DSL extension <tt>.translateHL7v2toHL7v3(translator)</tt>,</li>
	<li>in plain Java — processor <a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/platform/camel/ihe/pixpdqv3/PixPdqV3CamelTranslators.html#translatorHL7v2toHL7v3(translator)"><tt>translatorHL7v2toHL7v3(translator)</tt></a>.</li>
</ul>


<p>Their common parameter <tt>translator</tt> denotes a response translator bean, e.g. <tt>pixFeedAckTranslator</tt> defined on <b>Step 3</b>.</p>

<p>When the translation of a response message was not preceded by the translation of the corresponding request message and therefore the request could not been saved automagically by means of IPF's internal machinery, the user has to provide the request manually (as a String containing XML document or a <tt>MessageAdapter</tt> instance depending on the transaction under consideration) in the property <a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/apidocs/index.html?org/openehealth/ipf/platform/camel/ihe/pixpdqv3/PixPdqV3CamelTranslators.html#HL7V3_ORIGINAL_REQUEST_PROPERTY"><tt>HL7V3_ORIGINAL_REQUEST_PROPERTY</tt></a> of the Camel exchange.</p>


<h2><a name="IPFreference-single-Example"></a>Example</h2>

<p>Here is a sample Camel route that impements bridges PIX Feed v3 requests (ITI-44) to an HL7 v2-based Patient Identifier Cross-Reference Manager (ITI-8), and does the same in reverse direction for acknowledgements.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">class BridgeRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
    <span class="code-comment">// injected by Spring
</span>    def pixFeedRequestTranslator
    def pixFeedAckTranslator
    def pixManagerUri

    void configure() <span class="code-keyword">throws</span> Exception {
        from('pixv3-iti44:iti44service')
            .onException(Exception.class)
            .maximumRedeliveries(0)
            <span class="code-comment">// some reasonable exception handling
</span>            .end()
        .translateHL7v3toHL7v2(pixFeedRequestTranslator)
        .to(<span class="code-quote">"pix-iti8:<span class="code-comment">//${pixManagerUri}"</span>)
</span>        .translateHL7v2toHL7v3(pixFeedAckTranslator)
    }
}
</pre>
</div></div>

<p>This is, probably, the shortest possible HL7v3 PIX Manager implementation <img class="emoticon" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/wink.gif" height="20" width="20" align="absmiddle" alt="" border="0"> . </p>
<h1><a name="IPFreference-single-CDAsupport"></a>CDA support</h1>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Early access</b><br><p>Please note that the following documentation and the underlying code for CDA support is early access and might be subject to change.</p></td></tr></tbody></table></div>

<p>Support for CDA processing in IPF is provided by several IPF components. This is summarized in the following table.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Component</th>
<th class="confluenceTh">Description</th>
<th class="confluenceTh">Documentation</th>
</tr>
<tr>
<td class="confluenceTd"><tt>modules-cda</tt></td>
<td class="confluenceTd">Provides functionality for creating, parsing, rendering, and validation CDA documents </td>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/Generic+CDA+Support" title="Generic CDA Support">Generic CDA Support</a></td>
</tr>
<tr>
<td class="confluenceTd"><tt>platform-camel-cda</tt></td>
<td class="confluenceTd">Provides HL7 extensions to the Camel DSL.</td>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/CDA+DSL+Extensions" title="CDA DSL Extensions">DSL Extensions</a></td>
</tr>
</tbody></table>

<h2><a name="IPFreference-single-ClinicalDocumentArchitectureabriefoverview"></a>Clinical Document Architecture - a brief overview</h2>

<p>The HL7 Clinical Document Architecture (CDA) is an XML-based markup standard intended to specify the encoding, structure and semantics of clinical documents for exchange. CDA is part of the HL7 version 3 standard.<br>
By the use of XML, the HL7 v3 standard and coded vocabularies, CDA allows for the exchange of documents that are both machine and human-readable enabling electronic processing for decision support etc whilst being easily retrieved and used by the people who need them.</p>

<h3><a name="IPFreference-single-Supportfor%27vanilla%27CDA"></a>Support for 'vanilla' CDA</h3>

<p>IPF provides support for</p>

<ul>
	<li>creating CDA document objects from scratch</li>
	<li>rendering a CDA document object into its XML representation</li>
	<li>parsing of existing CDA documents</li>
	<li>extracting individual pieces of information from CDA documents</li>
</ul>


<p>As in IPF's HL7 module, <em>support</em> really means more than just providing some sort of CDA API for its model and services. CDA documents can be created and analyzed by means of a domain-specific language (DSL) that hides away most of the technical details you usually encounter when dealing with complex XML documents.</p>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>CDA specification</b><br><p>Even though some technical details are hidden, the domain-specific details are not (at least for the generic CDA support). Be sure to read the <a href="http://repo.openehealth.org/confluence/download/attachments/3211288/L-POCD_RM000040.pdf?version=1">CDA specification</a> and have a printed copy of the <a href="http://repo.openehealth.org/confluence/download/attachments/3211288/L-POCD_RM000040.gif?version=1">CDA R-MIM</a> at hands while working with CDA documents.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-SupportforCDAcontentprofiles"></a>Support for CDA content profiles</h3>

<p>In a technical sense, a CDA content profile defines a set of constraints on CDA that define how to use the CDA to communicate clinical documents bound to a certain use case, e.g. clinical summaries. <a href="http://repo.openehealth.org/confluence/display/ipf2/CDA+profile+support" title="CDA profile support">CDA content profiles</a> are also often referred to as <em>CDA Implementation Guides</em>.<br>
The first content profile to be supported is the <a href="http://repo.openehealth.org/confluence/display/ipf2/CCD+Profile+Support" title="CCD Profile Support">Continuity of Care Document (CCD) profile</a>, as it serves as a baseline for many other profiles published by standard bodies like HL7, IHE, or HITSP.</p>
<h2><a name="IPFreference-single-GenericCDAsupport"></a>Generic CDA support</h2>

<p>CDA support is assembled from a variety of sources.</p>

<ul>
	<li>The underlying CDA object model, parser, and renderer is provided by <a href="http://www.openhealthtools.org/" rel="nofollow">Open Health Tools (OHT)</a>'s <a href="https://iheprofiles.projects.openhealthtools.org/" rel="nofollow">IHE Profiles</a> project. The OHT libraries are redistributed as part of IPF's CDA support.</li>
	<li>Tooling to create and validate CDA documents are provided natively by IPF.</li>
	<li>CDA <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Parser">Parser</a>, <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Renderer">Renderer</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Validator">Validator</a> are adapted to implement the <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-moduleadapters">Module Adapters</a> of IPF. This ensures, that they can be used as processors in Camel-based integration routes.</li>
</ul>


<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Use of IPF CDA without Apache Camel</b><br><p>IPF's generic CDA support has no dependencies on Apache Camel and can therefore as well be used independently of integration solutions based on Apache Camel.</p></td></tr></tbody></table></div>

<p>The CDA builder used to create CDA documents is strongly based on Groovy's <a href="http://groovy.codehaus.org/Builders" rel="nofollow">Builders</a> and defines its own kind of domain specific language. Compared to "traditional" APIs, the natural hierarchical syntax makes it very easy to assemble parts of a CDA document or a whole CDA document, while at the same time enforces a significant amount of restrictions defined by the specification.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Background info: MetaBuilder</b><br><p>CDA builder uses and is derived from <a href="http://docs.codehaus.org/display/GROOVY/MetaBuilder" rel="nofollow">MetaBuilder</a>, a more sophisticated builder implementation, which allows for a declarative builder implementation. In fact, the CDA Builder <em>itself</em> is defined using MetaBuilder and Groovy meta class programming.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-Configuration"></a>Configuration</h3>

<p>For setting up Maven follow the instructions on the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development page</a>. If you want to use the CDA Features standalone in your Groovy projects then you only need to include</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml for standalone use</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
<span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.modules<span class="code-tag">&lt;/groupId&gt;</span>
<span class="code-tag">&lt;artifactId&gt;</span>modules-cda<span class="code-tag">&lt;/artifactId&gt;</span>
<span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>For using the CDA support <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Camelintegration">inside Camel routes</a> you need to include the following dependency:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml for use with Camel</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
<span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
<span class="code-tag">&lt;artifactId&gt;</span>platform-camel-cda<span class="code-tag">&lt;/artifactId&gt;</span>
<span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>where <tt>${ipf-version</tt>} must be replaced with the IPF version you want to use.</p>

<p>Like the HL7 DSL, IPF adds a couple of Groovy metaclass extensions on top of the underlying CDA Object model to facilitate accessing CDA documents. You can register these extensions manually:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.modules.cda.builder.CDAR2ModelExtension
...
ExpandoMetaClass.enableGlobally()
<span class="code-keyword">new</span> CDAR2ModelExtension().extensions.call()
</pre>
</div></div>

<p>Usually you would use a Spring ApplicationContext to register the extensions, especially in conjunction with Camel routes:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
<span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
<span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;


<span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
   <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>
<span class="code-tag">&lt;/&lt;camel:camelContext&gt;</span>

...

&lt;bean id=<span class="code-quote">"cdaModelExtension"</span>
   class=<span class="code-quote">"org.openehealth.ipf.modules.cda.builder.CDAR2ModelExtension"</span>&gt;
<span class="code-tag">&lt;/bean&gt;</span>

&lt;bean id=<span class="code-quote">"routeModelExtender"</span>
   class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
   <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
      <span class="code-tag">&lt;list&gt;</span>
         ...
         <span class="code-tag">&lt;ref bean=<span class="code-quote">"cdaModelExtension"</span> /&gt;</span>
      <span class="code-tag">&lt;/list&gt;</span>
   <span class="code-tag">&lt;/property&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-CreatinggenericCDAdocuments"></a>Creating generic CDA documents</h3>

<p>The basic pattern of how to create a CDA document is</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.modules.cda.builder.CDAR2Builder
....
def builder = <span class="code-keyword">new</span> CDAR2Builder()
def document = builder.build {
                  clinicalDocument {
                     <span class="code-comment">// add Header information
</span>                     <span class="code-comment">// add Body information
</span>                  }
</pre>
</div></div>

<p>Header and Body information is defined by a sequence of nested elements, which are described in more detail below.</p>

<p>Note that the CDA builder does <em>not</em> assemble the XML document directly. Instead it builds up an internal model of the CDA document; rendering to XML is a seperate step (see section on <a href="http://repo.openehealth.org/confluence/display/ipf2/Parsing+and+Rendering+of+CDA+documents" title="Parsing and Rendering of CDA documents">Parsing and Rendering</a>). This comes with a number of advantages:</p>

<ul>
	<li>the order of the elements built within an hierarchy level does not matter</li>
	<li>you don't have to care about the type of an element - the builder knows that e.g. a <em>code</em> attribute inside a <em>ClinicalDocument</em> is of HL7 RIM type <em>CE</em>.</li>
	<li>unknown elements or attributes are detected as well as wrong cardinalities etc.</li>
	<li>the builder itself comes with further rules that are covered by neither the CDA XML schema nor the underlying object model, e.g. that codes of type <em>CE</em> must either have a <em>nullFlavor</em> set or at least a <em>code</em> attribute.</li>
	<li>there are shortcut notations for a less verbose syntax, in particular with respect to simple types and enumerated values, e.g. a HL7 RIM <em>PQ</em> type can be instantiated by string consisting of value and unit. Thus, <tt>pq(value:86.0, unit:'kg')</tt> and <tt>pq('86 kg')</tt> are equivalent.</li>
</ul>



<h4><a name="IPFreference-single-Groovybuilders"></a>Groovy builders</h4>

<p>Builders are based on the builder pattern from the GOF design pattern book. It provides a way to build your own DSL and represents a powerful concept in Groovy. <br>
To put it short, Groovy builders allow to build up a hierarchical structure of nodes, while each node may have attributes (i.e. a set of key/value pairs) and content. Obviously, this matches very well with XML documents, thus also for CDA.<br>
IPF's CDA support uses <a href="http://docs.codehaus.org/display/GROOVY/MetaBuilder" rel="nofollow">MetaBuilder</a>, that adds an extra layer on top of plain Groovy builders.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Instantiate CDAR2Builder once!</b><br><p>Instantiating <tt>org.openehealth.modules.cda.builder.CDAR2Builder</tt> instances is very expensive. It can take several seconds of ramp-up time to initialize all builder rules defined for generating CDA documents. <br>
Therefore it is essential to create <tt>CDAR2Builder</tt> as a singleton object, e.g. by defining it as a bean in a Spring ApplicationContext. <br>
Fortunately, using a <tt>CDAR2Builder</tt> object has been made thread-safe, so you can share the instance to generate CDA documents concurrently is several threads.</p></td></tr></tbody></table></div>

<p>The general syntax for creating a CDA element is defined recursively. The [brackets] contain optional syntax.</p>

<div class="panel" style="border-width: 1px;"><div class="panelContent">
<p><b>top-element</b> = <em>schema-name</em>([ <em>value</em> ], [ <b>attributes</b> ]) [ <b>nested-elements</b> ]<br>
<b>elements</b> = <b>element</b> [ <b>elements</b> ]<br>
<b>element</b> = <em>name</em>([<em>value</em>], [ <b>attributes</b> ]) [ <b>nested-elements</b> ]<br>
<b>nested-elements</b> = '{' <b>elements</b> '}'<br>
<b>attributes</b> = <b>attribute</b> [, <b>attributes</b> ]<br>
<b>attribute</b> = <em>key-name</em> : <em>value</em></p>
</div></div>

<p>The syntax elements (printed in <em>italics</em>) is listed below;</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> syntax element </th>
<th class="confluenceTh"> description </th>
<th class="confluenceTh"> examples </th>
</tr>
<tr>
<td class="confluenceTd"> <em>schema-name</em> </td>
<td class="confluenceTd"> The schema (class) of the outermost CDA element that is created in the builder statement. <em>schema-name</em> often corresponds closely with the HL7v3 RIM type of the corresponding XML element name. </td>
<td class="confluenceTd"> clinicalDocument, section, ii </td>
</tr>
<tr>
<td class="confluenceTd"> <em>name</em> </td>
<td class="confluenceTd"> Name of a CDA element. <em>name</em> often corresponds closely with the the corresponding XML element name. </td>
<td class="confluenceTd"> author, id, code </td>
</tr>
<tr>
<td class="confluenceTd"> <em>key-name</em> </td>
<td class="confluenceTd"> Name of a nested CDA element or attribute. Used when the element or attribute is provided in the <em>value</em> instead of being recursively built </td>
<td class="confluenceTd"> root, code </td>
</tr>
<tr>
<td class="confluenceTd"> <em>value</em> </td>
<td class="confluenceTd"> A valid Groovy expression that returns a object reference. Can also be a primitive value </td>
<td class="confluenceTd"> 57, '1976', object </td>
</tr>
</tbody></table>


<p>Let's start with how the header information of a CDA document is assembled. </p>

<h4><a name="IPFreference-single-CDAHeader"></a>CDA Header</h4>

<p>Building the CDA header also explains the different kinds of elements and attributes and how they a created using the CDA builder.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def document = builder.build {
  clinicalDocument {
  <span class="code-comment">// templateId(root:'2.16.840.1.113883.3.27.1776')        // 1
</span>     id(root:'2.16.840.1.113883.19.4', extension:'c266')   <span class="code-comment">// 2
</span>     code(                                                 <span class="code-comment">// 3
</span>        code:'11488-4', 
        codeSystem:'2.16.840.1.113883.6.1', 
        codeSystemName:'LOINC',
        displayName:'Consultation note'
     )
     effectiveTime('20000407')                             <span class="code-comment">// 4
</span>     title('Good Health Clinic Consultation Note')         <span class="code-comment">// 5
</span>     versionNumber(2)                                      <span class="code-comment">// 6
</span>     ...
  }
}
</pre>
</div></div>

<p><tt>clinicalDocument</tt> is the <em>schema-name</em>, containing a closure to nest other elements. <tt>id</tt> is the <em>name</em> for the first element - the CDA Builder knows the internal structure of a CDA document and creates an object of the HL7v3 RIM type <tt>II</tt>. <tt>root</tt> and <tt>extension</tt> are the <em>key-name</em> for the corresponding attributes of a <tt>II</tt> element, and they are assigned the <em>value</em> <tt>'2.16.840.1.113883.19.4'</tt> and <tt>'c266'</tt>, respectively.</p>

<p>Let's examine this piece of code line by line</p>

<ol>
	<li>In general, infrastructure attributes (templateId, classCode, moodCode, typeCode) with static defaults are not required to be set. Generic CDA documents always carry the same templateId, so you can omit this element.</li>
	<li>This adds an <tt>id</tt> element with a <tt>root</tt> and <tt>extension</tt> attribute. Under the hood, the builder checks that the <tt>root</tt> attribute is present, otherwise an Exception is thrown. Also note that <tt>id</tt> is mandatory, so omitting would throw an Exception, too.</li>
	<li>Adding a <tt>code</tt> just works like adding the id. Remember, you <em>never</em> have to care about the class of the corresponding CDA model object.</li>
	<li>Looking at the CDA specification, <tt>effectiveTime</tt> and <tt>title</tt> appear in inverted order. As we are not building the XML document directly, we don't have to care, as the rendering process restores the correct ordering of elements. <tt>effectiveTime</tt> requires a date value (HL7 <tt>TS</tt> datatype), but the builder allows to use its simple string representation (YYYYMMDD).</li>
	<li>The title is of HL7 <tt>ST</tt> datatype. Again, you can just pass a string and conversion is done for you.</li>
	<li>The versionNumber is of HL7 <tt>INT</tt> datatype. Here you can pass an integer value.</li>
</ol>


<p>The next part of the CDA header definition introduces a couple of other 'shortcuts' available.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
     confidentialityCode('N')                           <span class="code-comment">// 1
</span><span class="code-comment">//      code:'N', 
</span><span class="code-comment">//      codeSystem:'2.16.840.1.113883.5.25')
</span>     recordTarget {                                     <span class="code-comment">// 2
</span>        patientRole {
           id('12345@2.16.840.1.113883.19.5')           <span class="code-comment">// 3
</span><span class="code-comment">//            extension='12345' 
</span><span class="code-comment">//            root='2.16.840.1.113883.19.5'
</span>           patient {
              name {
                 given('Henry') 
                 family('Levin')
                 suffix('the 7th')
              }
              administrativeGenderCode('M')             <span class="code-comment">// 4
</span><span class="code-comment">//               code='M' 
</span><span class="code-comment">//               codeSystem='2.16.840.1.113883.5.1'
</span>
              birthTime('19320924')
           }
           providerOrganization {
              id('2.16.840.1.113883.19.5')              <span class="code-comment">// 5 
</span>           }
        }
    }
...
</pre>
</div></div>

<ol>
	<li>Codes with more or less fixed code systems have their OID and, if applicable, code system name predefined. In this case, you can specify the <tt>code</tt> as content and skip the <tt>codeSystem</tt> and <tt>codeSystemName</tt> attributes. The rendered CDA XML will nevertheless contain all attributes.</li>
	<li>In this block, we traverse the RIM model from the document act over a Participation (<tt>recordTarget</tt>) and a Role (<tt>patientRole</tt>) to the Entity (<tt>patient</tt>).</li>
	<li><tt>id</tt> elements can be created by specifying a 'extension@root' content rather than the attribute map as shown above. Both notations are equivalent.</li>
	<li>This is another example for a predefined code system.</li>
	<li><tt>id</tt> elements may contain only a <tt>root</tt> attribute, but no <tt>extension</tt>. In this case, you can provide the <tt>root</tt> attribute as content.</li>
</ol>


<p>For reference purposes, here's the remainder of a rather complete CDA header definition. Note that most of the elements are optional - check the CDA specification or RMIM diagram. If any mandatory elements are skipped, the CDA Builder will complain with an Exception before you get the clinical document as result.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
           author {
             time('2000040714')
             assignedAuthor {
                id(extension:'KP00017',root:'2.16.840.1.113883.19.5')
                assignedPerson {
                   name {
                      given('Robert')
         	          family('Dolin')
                      suffix('MD')
             	   }
                }
                representedOrganization {
                   id(root:'2.16.840.1.113883.19.5')
                }
             }
          }
             	
          custodian {
             assignedCustodian {
                representedCustodianOrganization {
             	   id('2.16.840.1.113883.19.5')
             	   name('Good Health Clinic')
             	}
             }
          }
          legalAuthenticator {
             time('20000408')
             signatureCode('S')
             assignedEntity {
                id(extension:'KP00017', root:'2.16.840.1.113883.19.5')
             	assignedPerson {
             	   name {
         	          given('Robert')
         	          family('Dolin')
         	          suffix('MD')
             	   }
             	}
             	representedOrganization {
             	   id('2.16.840.1.113883.19.5')
             	 }
              }
           }
           relatedDocument(typeCode:'APND') {                                    <span class="code-comment">// 1
</span>              parentDocument {
                 id(extension:'a123', root:'2.16.840.1.113883.19.4')
             	 setId(extension:'BB35', root:'2.16.840.1.113883.19.7')
             	 versionNumber(1)
              }
           }
           componentOf {
              encompassingEncounter {
                 id(extension:'KPENC1332', root:'2.16.840.1.113883.19.6')
             	 effectiveTime {
             	    low('20000407')
             	 }
             	 encounterParticipant(typeCode:'CON') {
             	    time('20000407')
             	    assignedEntity {
             	       id(extension:'KP00017',root:'2.16.840.1.113883.19.5')
             	       assignedPerson {
             	          name {
             	             given('Robert')
             	             family('Dolin')
             	             suffix('MD')
             	          }
             	       }
                       representedOrganization {
                          id(root:'2.16.840.1.113883.19.5')
                       }
             	    }
             	 }
             	 location {
             	    healthCareFacility {
             	       code(
             	           code:'GIM',
             	           codeSystem:'2.16.840.1.113883.5.10588',
             	           displayName:'General internal medicine clinic'
             	       )
             	    }
             	 }
             }
         }
     }
  }
</pre>
</div></div>

<h4><a name="IPFreference-single-CDAbody"></a>CDA body</h4>

<p>The body of a CDA document is created correspondingly like the header part.<br>
The CDA body can be either an unstructured blob, or can be comprised of structured markup. Every CDA document has one body at most - associated with the ClinicalDocument class through the component relationship -, which can be either non-structured or structured.</p>

<p><tt>nonXMLBody()</tt> represents a document body that is in some format other than XML, e.g. a image of PDF document. <tt>nonXMLBody.text</tt> is used to reference data that is stored externally to the CDA document or to encode the data directly inline. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
component {
   nonXMLBody {
        text(
                mediaType: 'application/pdf',
                representation: 'B64',
                'JVBERi0xLjMKJcfsj6IKNSAwIG9iago8PC9MZW5ndGggNiAwIFIvRmlsdG...'
        )
   }
}
...
</pre>
</div></div>

<p><tt>structuredBody()</tt> represents an XML document body that is comprised of one or more document <em>sections</em>. Document sections can nest, can override context propagated from the header, and can contain narrative and CDA entries.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
component {
   structuredBody {
        component {        <span class="code-comment">// Section 1
</span>              section {
                 ...
              }
        }
        component {        <span class="code-comment">// Section 2
</span>              section {
                 ...
              }
        }
        ...                <span class="code-comment">// ...
</span>    }
}
...
</pre>
</div></div>


<h5><a name="IPFreference-single-NarrativeBlock"></a>Narrative Block</h5>

<p><tt>section.text</tt> is used to store a narrative text and is therefore referred to as the CDA Narrative Block.<br>
For structured bodies, it is the document originator's responsibility to properly populate the Narrative Block, regardless of whether information is also conveyed in CDA entries. Vice versa, it is the recipient's responsibility to properly render the narrative block in human readable manner, e.g. using a XSL transformation.</p>

<p>The CDA DSL for the Narrative Block follows exactly chapter 4.3.5 of the CDA specification. See the examples below.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Simple narrative text</b></div><div class="codeContent panelContent">
<pre class="code-java">...
section {
   title('Some title'}
   text('A simple narrative content')
   ...
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>List narrative text</b></div><div class="codeContent panelContent">
<pre class="code-java">...
section {
   title('Some title'}
   text {
       list {
          item('Theodur 200mg BID')
          item('Proventil inhaler 2puffs QID PRN')
          item('Prednisone 20mg qd')
          item('HCTZ 25mg qd')
       }
   }
   ...
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Complex narrative text</b></div><div class="codeContent panelContent">
<pre class="code-java">...
section {
   title('Some title'}
   text {
        paragraph('Payer information')
        table(border: '1', width: '100%') {
          thead {
            tr {
              th('Payer name')
              th('Policy type')
              th('Covered Party ID')
              th('Authorizations')
            }
          }
          tbody {
            tr {
              td('Good Health Insurance')
              td('Extended healthcare / Self')
              td('14d4a520-7aae-11db-9fe1-0800200c9a66')
              td {
                linkHtml(href: 'Colonoscopy.pdf', 'Colonoscopy')
              }
            }
          }
        }
   }
   ...
}
...
</pre>
</div></div>



<h5><a name="IPFreference-single-Structuredpart"></a>Structured part</h5>

<p>Sections can define participants like author, informant, and subject (i.e. the primary target of the recorded entries). Sections can also have relationships to <em>entries</em>, which contain structured computer-processable components. Each section can contain zero to many entries. There is a number of entry classes:</p>

<ul>
	<li><tt>act</tt></li>
	<li><tt>encounter</tt></li>
	<li><tt>observation</tt></li>
	<li><tt>observationMedia</tt></li>
	<li><tt>organizer</tt></li>
	<li><tt>procedure</tt></li>
	<li><tt>regionOfInterest</tt></li>
	<li><tt>substanceAdministration</tt></li>
	<li><tt>supply</tt></li>
</ul>


<p>Entries in return can have participants and relationships to other entries. For details on these entry classes, please refer to the CDA R2 specification.</p>

<p>With CDA Builder you create the structured part following the same patterns as with the CDA Header of Narrative Block. The following example creates a <tt>substanceAdministration</tt> entry.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
structuredBody {
    component {
        section {
            title('My title')
            text('My narrative text')
            code(....)
            entry {
                substanceAdministration(classCode:'PROC', moodCode:'EVN') {
                    consumable{
                        manufacturedProduct {
                            manufacturedLabeledDrug {
                                code(
                                    code:'10312003',
                                    codeSystem:'2.16.840.1.113883.6.96' ,
                                    codeSystemName:'SNOMED CT',
                                    displayName:'Prednisone preparation')
                            }
                        }
                    }
                }
            }
          ...
        }
    }
   ...
}
</pre>
</div></div>

<p>Sections and their contained participants and entries can get arbitrarily complex. Furthermore, the structure is very generic, i.e. it's possible to express a certain clinical concept in a variety of ways. Unconstrained CDA is therefore not very helpful when it comes to real <em>semantic interoperability</em>. To be useful in the real world, CDA has to be constrained, which can happen on at least two levels:</p>

<ul>
	<li>using section-level templates</li>
	<li>using entry level templates</li>
</ul>


<p>The RIM's InfrastructureRoot class contains an attribute, templateId, which is available for use in CDA. Thus, CDA provides a mechanism to reference a template or implementation guide that has been assigned a unique template identifier.</p>

<p>CDA templates are usually collected in <a href="http://repo.openehealth.org/confluence/display/ipf2/CDA+profile+support" title="CDA profile support">CDA content profiles</a>, one of which is the CCD (Continuity of Care Document).</p>

<h4><a name="IPFreference-single-CDAbuildertips"></a>CDA builder tips</h4>

<h5><a name="IPFreference-single-Includingcompleteparts"></a>Including complete parts</h5>

<p>With CDA Builder it's possible to construct a complete document in a single builder statement. As CDA documents are built from several very well separated parts, it might as well make sense to create such a part for itself and include it into the final document in a separate step. This way, a document part can also be reused for several CDA documents. <br>
CDA builder supports this strategy out of the box. The cardinality of such a part within its containing element plays an important role.</p>

<p><b>Single cardinality</b></p>

<p>In this example, we create a element of type <tt>CE</tt> and include it into a <tt>code</tt> element inside a <tt>Supply</tt> clinical statement. Alternatively, we can also build the code inline:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
def myCode = builder.build { 
   ce(code:'30549001', 
      codeSystem:'2.16.840.1.113883.6.96', 
      displayName:'Suture removal') 
}

<span class="code-comment">// Assign code as attribute
</span>def myEntry = builder.build {
   entry {
      supply(classCode:'SPLY', moodCode:'EVN', code:myCode) {
         statusCode(code:'completed')
         effectiveTime(value:'200004071430')
      }
   }
}

<span class="code-comment">// Alternative: build myCode inline
</span>myEntry = builder.build {
   entry {
      supply(classCode:'SPLY', moodCode:'EVN') {
         code(code:'30549001', 
              codeSystem:'2.16.840.1.113883.6.96', 
              displayName:'Suture removal') 
         statusCode(code:'completed')
         effectiveTime(value:'200004071430')
      }
   }
}
...
</pre>
</div></div>
<p>The difference is that <tt>myCode</tt> is assigned as an attribute like <tt>classCode</tt> or <tt>moodCode</tt> is, while when being built inline it is nested under the <tt>supply</tt> element. Also note that for pre-constructing <tt>myCode</tt> you need to know the <em>schema</em> name of its HL7v3 type (<tt>ce</tt> in this case), while when being built inline the CDA Builder <em>knows</em> to instantiate a <tt>CE</tt> object for a Supply code.</p>

<p><b>Multiple cardinality</b></p>

<p>In this case, the complete part must be added to its container collection instead of just being assigned to it. Unfortunately, this is currently not possible within a CDA builder statement.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
def mySection = builder.build {
   section {
      title('My section')
   }
}
mySection.entry.add(myEntry)
...
</pre>
</div></div>

<h5><a name="IPFreference-single-Variabletypedvalues"></a>Variable-typed values</h5>

<p>In some cases, the CDA specification defines attributes to be of either <em>any</em> type or <em>any subtype</em> of a certain type. Most importantly, the <tt>value</tt> of an <tt>observation</tt> clinical statement is variable-typed. As another example, the <tt>effectiveTime</tt> of a <tt>substanceAdministration</tt> is of type <tt>GTS</tt>, which can be a range of different timing sub-types.<br>
In these cases, obviously, the CDA builder can not infer the exact type from a attribute name, just because it's variable. Therefore, you have to give a hint, as shown in the following fictive example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">def myObservationEntry = builder.build {
   entry {
      observation {
         id('9d3d416d-45ab-4da1-912f-4583e0632000')
         ....
         value(
            make {
               snomedCode(code:'40275004', displayName:'Contact dermatitis') {
                  translation(
                     code: '692.9',
                     codeSystem: '2.16.840.1.113883.6.2', 
                     codeSystemName: 'ICD9CM',
                     displayName: 'Contact Dermatitis, NOS')
               }
            }
         )
         value(
            make { _int(10) }  <span class="code-comment">// <span class="code-object">int</span> is a reserved Groovy keyword, 
</span>                               <span class="code-comment">// so we have to use _int
</span>         )
         ...
      }
   }
}
</pre>
</div></div>

<p>This observation has two values: a (SNOMED) code and an integer. You simply wrap the type into a <tt>make</tt> element. In fact, <tt>make</tt> is more or less an abbreviation of <tt>builder.build</tt>, i.e. you create an object of the desired type and assign it to the variable-typed attribute.</p>


<h5><a name="IPFreference-single-UsingregularGroovycodeinsideCDAbuilder"></a>Using regular Groovy code inside CDA builder</h5>

<p>As with the HL7 DSL of IPF, the Groovy Builder is an internal DSL, i.e. it is expressed by means of the Groovy programming language and can be executed without an additional parser. Therefore, it is also possible to mix and match CDA builder code with regular Groovy code.<br>
The following example shows how to derive a Medication section from a tabular data structure, using loops, conditiional statements, and debugging output.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
    <span class="code-comment">// Some medication data, stored in a list of maps
</span>    def data = [
	
	[medication:'Albuterol inhalant',
	instructions:'2 puffs QID',
	startDate:<span class="code-keyword">null</span>,
	period:'6 h',
	routeCode:'IPINHL',
	dose:'2',
	administrationUnitCode:'415215001',
	medicationCode:'307782',
	id:'cdbd33f0-6cde-11db-9fe1-0800200c9a66'],
	
	[medication:'Prednisone',
	instructions:'20mg PO daily',
	startDate:'20000328',
	period:'24 h',
	routeCode:'PO',
	dose:'1',
	medicationCode:'312615',
	id:'cdbd5b03-6cde-11db-9fe1-0800200c9a66'] 
	
  ]
...
  POCDMT000040Section section = builder.build {
    section {
      templateId('2.16.840.1.113883.10.20.1.8')
      code('10160-0@2.16.840.1.113883.6.1')
      title('Medications')
      text {
        table(border:'1',width:'100%') {
          thead {
             tr {
               th('Medication')
               th('Instructions')
               th('Start date')
             }
          }
          tbody {
            <span class="code-comment">// Iterate over all medications. Must assign a iteration variable!
</span>            data.each { m -&gt;
              tr {
                td(m.medication)
                td(m.instructions)
                td(m.startDate ?: '') <span class="code-comment">// Avoid '<span class="code-keyword">null</span>' output
</span>              }
            }
          }
        }
      }
      <span class="code-comment">// Iterate over all medications. Must assign a iteration variable!
</span>      data.each { m -&gt;
        <span class="code-comment">// Insert diagnostic output...
</span>        println <span class="code-quote">"Creating medication "</span> + m.medication
        entry {
          substanceAdministration(classCode:'SBADM', moodCode:'EVN'){
            id(m.id)
            <span class="code-comment">// Conditional element. Skip <span class="code-keyword">if</span> not available
</span>            <span class="code-keyword">if</span> (m.startDate) {
              effectiveTime(make {
                pivlts { period(m.period) }
              })
            }
            routeCode(code:m.routeCode, codeSystem:'2.16.840.1.113883.5.112')
            doseQuantity(m.dose)
            consumable {
              manufacturedProduct {
                manufacturedLabeledDrug {
                  code(code:m.medicationCode,
                       codeSystem:'2.16.840.1.113883.6.96') { 
                    originalText(m.medication) 
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  Assert.assertNotNull(section)
  <span class="code-comment">// We have two sections ...
</span>  Assert.assertEquals 2, section.entry.size()
  <span class="code-comment">// with individual IDs ...
</span>  Assert.assertEquals 'cdbd33f0-6cde-11db-9fe1-0800200c9a66', 
                       section.entry[0].substanceAdministration.id[0].root
  Assert.assertEquals 'cdbd5b03-6cde-11db-9fe1-0800200c9a66',
                       section.entry[1].substanceAdministration.id[0].root
  <span class="code-comment">// ... the first medication has no start date
</span>  Assert.assertEquals 0, section.entry[0].substanceAdministration.effectiveTime.size()
  Assert.assertEquals 1, section.entry[1].substanceAdministration.effectiveTime.size()

</pre>
</div></div>


<h3><a name="IPFreference-single-ParsingandRenderingofCDAdocuments"></a>Parsing and Rendering of CDA documents</h3>

<h4><a name="IPFreference-single-Parsing"></a>Parsing</h4>

<p>You have two options for parsing CDA documents</p>

<ul>
	<li>Use an instance of <tt>org.openehealth.ipf.modules.cda.CDAR2Parser</tt> to parse a document into its internal CDA object model</li>
	<li>As CDA documents are plain XML, use a native Groovy XML parser (e.g. <tt>XMLSlurper</tt>) to parse it into a hierarchy of generic <tt>Node</tt> objects.</li>
</ul>


<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Aspect </th>
<th class="confluenceTh"> CDAR2Parser </th>
<th class="confluenceTh"> XMLSlurper </th>
</tr>
<tr>
<td class="confluenceTd"> processing speed </td>
<td class="confluenceTd"> slow </td>
<td class="confluenceTd"> fast </td>
</tr>
<tr>
<td class="confluenceTd"> direct access using Groovy GPath syntax </td>
<td class="confluenceTd"> yes </td>
<td class="confluenceTd"> yes </td>
</tr>
<tr>
<td class="confluenceTd"> usage of CDA model 'shortcuts' </td>
<td class="confluenceTd"> yes </td>
<td class="confluenceTd"> no </td>
</tr>
<tr>
<td class="confluenceTd"> depthfirst/breadtfirst traversal in element tree </td>
<td class="confluenceTd"> no </td>
<td class="confluenceTd"> yes </td>
</tr>
</tbody></table>


<p>This is an example on how to parse a CDA document from the file system using the CDAR2Parser</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.openehealth.ipf.modules.cda.CDAR2Parser

InputStream is = getClass().getResourceAsStream(<span class="code-quote">"/SampleCDADocument.xml"</span>)
def clinicalDocument = <span class="code-keyword">new</span> CDAR2Parser().parse(is)
</pre>
</div></div>

<p>Parsing using Groovy's XMLSlurper is equivalent:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">InputStream is = getClass().getResourceAsStream(<span class="code-quote">"/SampleCDADocument.xml"</span>)
def clinicalDocument = <span class="code-keyword">new</span> XMLSlurper().parse(is)
</pre>
</div></div>

<p>The next section explains for both cases, how you can access and extract data from the parsed document.</p>

<h4><a name="IPFreference-single-ExtractinginformationfromCDAdocuments"></a>Extracting information from CDA documents</h4>

<p>Extracting data from the parsed document differs a bit depending on whether <tt>CDAR2Parser</tt> or Groovy's <tt>XMLSlurper</tt> has been used for parsing. In the latter case, please also take a look at the corresponding <a href="http://groovy.codehaus.org/Reading+XML+using+Groovy%27s+XmlSlurper" rel="nofollow">Groovy documentation</a>.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Whether to use CDAR2Parser or XMLSlurper</b><br><ul>
	<li>If you can abstain from using the CDA model extensions (in particular when working with CDA profiles like CCD), you should use <tt>XMLSlurper</tt>, because it's faster and offers <tt>depthFirst</tt> and <tt>breadthFirst</tt> traversal.</li>
	<li>In you want to modify and re-render the document, or using the CDA model extensions is a must, use <tt>CDAR2Parser</tt>.</li>
</ul>
</td></tr></tbody></table></div>

<p>Depending on the parsing strategy, there are subtle differences on how to access the data:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Aspect </th>
<th class="confluenceTh"> CDAR2Parser </th>
<th class="confluenceTh"> XMLSlurper </th>
</tr>
<tr>
<td class="confluenceTd"> usage of CDA model 'shortcuts' </td>
<td class="confluenceTd"> yes </td>
<td class="confluenceTd"> no </td>
</tr>
<tr>
<td class="confluenceTd"> depthfirst/breadtfirst traversal in element tree </td>
<td class="confluenceTd"> no </td>
<td class="confluenceTd"> yes </td>
</tr>
<tr>
<td class="confluenceTd"> accessing attributes </td>
<td class="confluenceTd"> <tt>element.attribute</tt> </td>
<td class="confluenceTd"> <tt>element.@attribute</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> accessing attribute/element content </td>
<td class="confluenceTd"> depends on data type </td>
<td class="confluenceTd"> <tt>xxx.text()</tt> </td>
</tr>
</tbody></table>

<p>The following code snippets shows how to select and extract data from the sample CDA document contained in the CDA specification.</p>

<p><b>Parsed with CDAR2Parser</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">    InputStream is = getClass().getResourceAsStream(
            <span class="code-quote">"/SampleCDADocument.xml"</span>);
    def clinicalDocument = <span class="code-keyword">new</span> CDAR2Parser().parse(is);
    assertNotNull(clinicalDocument);
    def components = clinicalDocument.component.structuredBody.component

    <span class="code-comment">// Simple navigation
</span>    assertEquals('en-US', clinicalDocument.languageCode.code)
    assertEquals('KP00017', clinicalDocument.author[0].assignedAuthor.id[0].extension)

    <span class="code-comment">// Avoid NullPointerException by with safe dereferencing using the ?. <span class="code-keyword">operator</span>
</span>    assertEquals('KP00017', clinicalDocument?.author[0].assignedAuthor.id[0].extension)
    def clinicalDocument2 = <span class="code-keyword">null</span>
    assertNull(clinicalDocument2?.languageCode?.code)


    <span class="code-comment">// Use any(Closure) to check <span class="code-keyword">if</span> the predicate is <span class="code-keyword">true</span> at least once
</span>    assertTrue(components.any { it.section.code.code == '10164-2' })

    <span class="code-comment">// Use every(Closure) to check <span class="code-keyword">if</span> the predicate is always <span class="code-keyword">true</span>
</span>    assertTrue(components.every { it.section.code.codeSystem == '2.16.840.1.113883.6.1' })

    <span class="code-comment">// Use find(Closure) to <span class="code-keyword">return</span> the first value matching the closure condition    
</span>    assertEquals('History of Present Illness',
            components.find { it.section.code.code == '10164-2' }.section.title.text)

    <span class="code-comment">// Use findAll to <span class="code-keyword">return</span> all values matching the closure condition
</span>    assertEquals(1, components.findAll { it.section.code.code == '10164-2' }.size())

    <span class="code-comment">// Use findIndexOf to <span class="code-keyword">return</span> the index of the first item that matches the
</span>    <span class="code-comment">// condition specified in the closure.
</span>    assertEquals(1, components.findIndexOf { it.section.code.code == '10153-2' })

    <span class="code-comment">// Use collect to iterate through an object transforming each value into a
</span>    <span class="code-comment">// <span class="code-keyword">new</span> value using the closure as a transformer, returning a list of transformed values. 
</span>    assertEquals([
            'History of Present Illness',
            'Past Medical History',
            'Medications',
            'Allergies and Adverse Reactions',
            'Family history',
            'Social History',
            'Physical Examination',
            'Labs',
            'In-office Procedures',
            'Assessment',
            'Plan'],
            components.collect { it.section.title.text })

    <span class="code-comment">// The spread <span class="code-keyword">operator</span> parent*.action is equivalent to
</span>    <span class="code-comment">// parent.collect{ child -&gt; child?.action }
</span>    assertEquals([
            'History of Present Illness',
            'Past Medical History',
            'Medications',
            'Allergies and Adverse Reactions',
            'Family history',
            'Social History',
            'Physical Examination',
            'Labs',
            'In-office Procedures',
            'Assessment',
            'Plan'],
            components.section.title.text)

  }
</pre>
</div></div>

<p><b>Parsed with XMLSlurper</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">    InputStream is = getClass().getResourceAsStream(
            <span class="code-quote">"/SampleCDADocument.xml"</span>);
    def clinicalDocument = <span class="code-keyword">new</span> XmlSlurper().parse(is)

    def components = clinicalDocument.component.structuredBody.component

    <span class="code-comment">// Simple navigation
</span>    assertEquals('en-US', clinicalDocument.languageCode.@code.text())
    assertEquals('KP00017', clinicalDocument.author[0].assignedAuthor.id[0].@extension.text())

    <span class="code-comment">// Avoid NullPointerException by with safe dereferencing using the ?. <span class="code-keyword">operator</span>
</span>    assertEquals('KP00017', clinicalDocument?.author[0].assignedAuthor.id[0].@extension.text())
    def clinicalDocument2 = <span class="code-keyword">null</span>
    assertNull(clinicalDocument2?.languageCode?.@code?.text())


    <span class="code-comment">// Use any(Closure) to check <span class="code-keyword">if</span> the predicate is <span class="code-keyword">true</span> at least once
</span>    assertTrue(components.any { it.section.code.@code == '10164-2' })

    <span class="code-comment">// Use every(Closure) to check <span class="code-keyword">if</span> the predicate is always <span class="code-keyword">true</span>
</span>    assertTrue(components.every { it.section.code.@codeSystem == '2.16.840.1.113883.6.1' })

    <span class="code-comment">// Use find(Closure) to <span class="code-keyword">return</span> the first value matching the closure condition
</span>    assertEquals('History of Present Illness',
            components.find { it.section.code.@code == '10164-2' }.section.title.text())

    <span class="code-comment">// Use findAll to <span class="code-keyword">return</span> all values matching the closure condition
</span>    assertEquals(1, components.findAll { it.section.code.@code == '10164-2' }.size())

    <span class="code-comment">// Use findIndexOf to <span class="code-keyword">return</span> the index of the first item that matches
</span>    <span class="code-comment">// the condition specified in the closure.
</span>    assertEquals(1, components.findIndexOf { it.section.code.@code == '10153-2' })

    <span class="code-comment">// Use collect to iterate through an object transforming each value into a
</span>    <span class="code-comment">// <span class="code-keyword">new</span> value using the closure as a transformer, returning a list of transformed values.
</span>    assertEquals([
            'History of Present Illness',
            'Past Medical History',
            'Medications',
            'Allergies and Adverse Reactions',
            'Family history',
            'Social History',
            'Physical Examination',
            'Labs',
            'In-office Procedures',
            'Assessment',
            'Plan'],
            components.collect { it.section.title.text() })

    <span class="code-comment">// The spread <span class="code-keyword">operator</span> parent*.action is equivalent to
</span>    <span class="code-comment">// parent.collect{ child -&gt; child?.action }
</span>    assertEquals([
            'History of Present Illness',
            'Past Medical History',
            'Medications',
            'Allergies and Adverse Reactions',
            'Family history',
            'Social History',
            'Physical Examination',
            'Labs',
            'In-office Procedures',
            'Assessment',
            'Plan'],
            components.section.title*.text())

    <span class="code-comment">// Use depthFirst (or '**') to search <span class="code-keyword">for</span> elements anywhere in
</span>    <span class="code-comment">// the structure
</span>    def drugCodes = clinicalDocument.depthFirst().findAll
      { it.name() == <span class="code-quote">"manufacturedLabeledDrug"</span> }.code*.@code
    
    assertEquals([
            '66493003',
            '91143003',
            '10312003',
            '376209006',
            '10312003',
            '331646005' ],
            drugCodes*.text())

    <span class="code-comment">// Use of helper functions to encapsulate commonly used GPath expressions
</span>    def drugCodes2 = findAllElements(clinicalDocument, <span class="code-quote">"manufacturedLabeledDrug"</span>).code*.@code
    assertEquals(drugCodes, drugCodes2)
  }

  <span class="code-keyword">private</span> Collection findAllElements(GPathResult result, <span class="code-object">String</span> name) {
    <span class="code-keyword">return</span> result.depthFirst().findAll { it.name() == name }
  }
</pre>
</div></div>

<h4><a name="IPFreference-single-Rendering"></a>Rendering</h4>

<p>CDA documents created by either parsing or building their internal object representation can be easily rendered by using an instance of <tt>org.openehealth.ipf.modules.cda.CDAR2Renderer</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.openehealth.ipf.modules.cda.CDAR2Renderer

def document = builder.build {
   clinicalDocument {
      ...
   }
}

def renderer = <span class="code-keyword">new</span> CDAR2Renderer()
def opts = [XMLResource.OPTION_DECLARE_XML : <span class="code-keyword">true</span>,     <span class="code-comment">// include XML declaration
</span>            XMLResource.OPTION_ENCODING    : 'utf-8']  <span class="code-comment">// encode as utf-8
</span>println(renderer.render(document, opts))
</pre>
</div></div>

<p>The output looks like this:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">&lt;?xml version=<span class="code-quote">"1.0"</span> encoding=<span class="code-quote">"utf-8"</span>?&gt;
&lt;ClinicalDocument xmlns:xsi=<span class="code-quote">"http:<span class="code-comment">//www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="code-quote">"urn:hl7-org:v3"</span> xsi:schemaLocation=<span class="code-quote">"urn:hl7-org:v3 CDA.xsd"</span>&gt;
</span>  &lt;id extension=<span class="code-quote">"c266"</span> root=<span class="code-quote">"2.16.840.1.113883.19.4"</span>/&gt;
  &lt;code code=<span class="code-quote">"11488-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Consultation note"</span>/&gt;
  &lt;title&gt;Good Health Clinic Consultation Note&lt;/title&gt;
  &lt;effectiveTime value=<span class="code-quote">"20000407"</span>/&gt;
  ...
&lt;/ClinicalDocument&gt;
</pre>
</div></div>

<p>Note that the renderer cared about adding proper namespaces to the XML document.</p>

<h3><a name="IPFreference-single-ValidatingCDAdocuments"></a>Validating CDA documents</h3>

<p>CDA document instances in their XML representation can be validated using the W3C XML Schema and Schematron <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Validators">validators</a>. The class <tt>org.openehealth.ipf.modules.cda.CDAR2Constants</tt> provides constants for the location of schema and schematron resources, e.g.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.modules.cda.CDAR2Constants
<span class="code-keyword">import</span> org.openehealth.ipf.commons.xml.XsdValidator
...
def validator = <span class="code-keyword">new</span> XsdValidator()
validator.validate(xmldoc, CDAR2Constants.CDAR2_SCHEMA)
...
</pre>
</div></div>

<p>CDA Validation is nicely included into IPF's DSL extensions mechanism. For details refer to <a href="http://repo.openehealth.org/confluence/display/ipf2/CDA+DSL+Extensions" title="CDA DSL Extensions">CDA DSL Extensions</a></p>

<p>Note that currently only XML-encoded CDA documents can be validated. <br>
However, when creating a CDA document from scratch, the <a href="http://repo.openehealth.org/confluence/display/ipf2/Creating+Generic+CDA+documents" title="Creating Generic CDA documents">CDA Builder</a> restricts this process by applying rules very close alongside the CDA MIF definition and the derived XML schema, even though you are working on an object structure rather than an XML document. So, there's a good chance that CDA documents created with the CDA Builder also pass the validators.</p> 
<h2><a name="IPFreference-single-DSLextensions"></a>DSL extensions</h2>


<p>This section describes DSL extensions provided by the <tt>platform-camel-cda</tt> component. The extensions allow to seemlessly integrate CDA parser, renderer, and validator into Camel/IPF integration routes.</p>

<p>CDA DSL extensions are defined in the <tt>org.openehealth.ipf.platform.camel.cda.extend.CDAModelExtension.groovy</tt> class. Their main purpose is to make CDA processing features available in Camel routes. Extensions provided by this class may well be combined with other extensions that comply with the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a>.</p>

<h3><a name="IPFreference-single-Configuration"></a>Configuration</h3>

<p>For using the CDA DSL extensions you need to include the following dependency:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-cda<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>This transitively includes the <tt>platform-camel-core</tt> and <tt>modules-cda</tt> libraries as well.</p>

<h3><a name="IPFreference-single-CDA%28un%29marshalling"></a>CDA (un)marshalling </h3>

<p>The <tt>cdar2()</tt> DSL extension allows you to convert between CDA document strings (or streams) and <tt>org.openhealthtools.ihe.common.cdar2.POCDMT000040ClinicalDocument</tt> objects. For example, to unmarshal a CDA document from a string (or stream) use</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Unmarshal adapter</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// ...
</span>    from('...')
      .unmarshal().cdar2()
      .to('...')
      <span class="code-comment">// ...</span>
</pre>
</div></div>


<p>in your Groovy route definitions. As mentioned in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Parsing">Parsing</a> sections, CDA documents are plain XML, and if you do not require a semantic CDA model, you can also use Groovy's XMLSlurper, which reads the document into a hierarchy of <tt>Node</tt> objects. Please refer to <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensionsforGroovyXMLprocessing">DSL extensions for Groovy XML processing</a> for more detail.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Unmarshal adapter using Groovy XMLSlurper</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// ...
</span>    from('...')
      .unmarshal().gpath()
      .transmogrify { gpathResult -&gt;
        <span class="code-comment">// process XML ...
</span>      }
      .to('...')
    <span class="code-comment">// ...</span>
</pre>
</div></div>

<p>To marshal a CDA document to an output stream use</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Marshal CDA document</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// ...
</span>    from('...')
      .marshal().cdar2()
      .to('...')
    <span class="code-comment">// ...</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-%28Un%29marshalingoptions"></a>(Un)marshaling options</h3>

<p>Unlike HL7 message adapter unmarshalling and marshalling, CDA has no marshalling/unmarshalling options.</p>


<h3><a name="IPFreference-single-CDAdocumentvalidation"></a>CDA document validation</h3>

<p>Marshaled CDA documents can be validated in routes with the validate().cdar2() extension. This basically validates whether the document is compliant with the CDA XML schema. Note that you currently can <em>not</em> validate the internal representation of a CDA document</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Validate CDA document against W3C XML Schema</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-comment">// ...
</span>    from('...')
      .onException(ValidationException.class)
          <span class="code-comment">// handle the validation exception
</span>          .end()
      .marshal().cdar2()
      .validate().xsd().cdar2()
      .to('...')
    <span class="code-comment">// ...</span>
</pre>
</div></div>

<p>You can also validate during parsing with <tt>XMLSlurper</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Unmarshal adapter using schema-aware Groovy XMLSlurper</b></div><div class="codeContent panelContent">
<pre class="code-java">    ...
    <span class="code-keyword">import</span> <span class="code-keyword">static</span> org.openehealth.ipf.modules.cda.CDAR2Constants.CDAR2_SCHEMA

    <span class="code-comment">// ...
</span>    from('...')
      .onException(Exception.class)
          <span class="code-comment">// handle the Camel <span class="code-object">Runtime</span> exception
</span>          .end()
      .unmarshal().gpath(CDAR2_SCHEMA, <span class="code-keyword">true</span>)
      ...
      .to('...')
    <span class="code-comment">// ...</span>
</pre>
</div></div>
<h2><a name="IPFreference-single-CDABuilderSyntaxReference"></a>CDA Builder Syntax Reference</h2>

<h3><a name="IPFreference-single-GeneralBuilderSyntax"></a>General Builder Syntax</h3>

<div class="panel" style="border-width: 1px;"><div class="panelContent">
<p><b>top-element</b> = <em>schema-name</em>([ <em>value</em> ], [ <b>attributes</b> ]) [ <b>nested-elements</b> ]<br>
<b>elements</b> = <b>element</b> [ <b>elements</b> ]<br>
<b>element</b> = <em>name</em>([<em>value</em>], [ <b>attributes</b> ]) [ <b>nested-elements</b> ]<br>
<b>nested-elements</b> = '{' <b>elements</b> '}'<br>
<b>attributes</b> = <b>attribute</b> [, <b>attributes</b> ]<br>
<b>attribute</b> = <em>key-name</em> : <em>value</em></p>
</div></div>

<p>The syntax elements (printed in <em>italics</em>) is listed below;</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> syntax element </th>
<th class="confluenceTh"> description </th>
<th class="confluenceTh"> examples </th>
</tr>
<tr>
<td class="confluenceTd"> <em>schema-name</em> </td>
<td class="confluenceTd"> The schema (class) of the outermost CDA element that is created in the builder statement. <em>schema-name</em> often corresponds closely with the HL7v3 RIM type of the corresponding XML element name. </td>
<td class="confluenceTd"> clinicalDocument, section, ii </td>
</tr>
<tr>
<td class="confluenceTd"> <em>name</em> </td>
<td class="confluenceTd"> Name of a CDA element. <em>name</em> often corresponds closely with the the corresponding XML element name. </td>
<td class="confluenceTd"> author, id, code </td>
</tr>
<tr>
<td class="confluenceTd"> <em>key-name</em> </td>
<td class="confluenceTd"> Name of a nested CDA element or attribute. Used when the element or attribute is provided in the <em>value</em> instead of being recursively built </td>
<td class="confluenceTd"> root, code </td>
</tr>
<tr>
<td class="confluenceTd"> <em>value</em> </td>
<td class="confluenceTd"> A valid Groovy expression that returns a object reference. Can also be a primitive value </td>
<td class="confluenceTd"> 57, '1976', object </td>
</tr>
</tbody></table>

<h3><a name="IPFreference-single-CDASchemaNames"></a>CDA Schema Names</h3>

<p>When creating a CDA document using a single builder statement, you only need to know the top-level element (<tt>clinicalDocument</tt> for plain CDA, <tt>continuityOfCareDocument</tt> for CCD). The CDA builder automatically instantiates an object of the correct type for each of the elements below. However, there are situations where you need to know the <em>schema-name</em> for a specific type:</p>

<ul>
	<li>when you create otherwise nested CDA elements of their own in order to assemble a complete CDA document from them in a later step</li>
	<li>when you need to indicate the type of a variable-typed element (ANY).</li>
</ul>


<p>For referencing a <em>schema-name</em>  and the definition of attributes and nested elements of corresponding <em>schema</em>, for now please look at the respective declaration files in the IPF source repository. We'll provide a more readable reference once the schemas have stabilized.</p>

<ul>
	<li>Data Types: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/DataTypeBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/DataTypeBuilder.groovy</a></li>
	<li>RIM Entities: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/EntityBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/EntityBuilder.groovy</a></li>
	<li>RIM Roles: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/RoleBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/RoleBuilder.groovy</a></li>
	<li>RIM Participations: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/ParticipationBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/ParticipationBuilder.groovy</a></li>
	<li>RIM Acts: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/ActBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/ActBuilder.groovy</a></li>
	<li>RIM ActRelationships: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/ActRelationshipBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/ActRelationshipBuilder.groovy</a></li>
</ul>


<p>Abstract types are:</p>

<ul>
	<li>Any: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/AnyBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/AnyBuilder.groovy</a></li>
	<li>InfrastructureRoot: <a href="http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/InfrastructureBuilder.groovy" rel="nofollow">http://github.com/krasserm/ipf/blob/master/modules/cda/src/main/resources/builders/InfrastructureBuilder.groovy</a></li>
</ul>

<h2><a name="IPFreference-single-CDAprofilesupport"></a>CDA profile support</h2>

<p>CDA content profiles define clinical semantics for generic CDA documents. A profile usually constrains the CDA model in one or more of the following areas:</p>

<ul>
	<li>defining templateIds to uniquely identify the semantics of a CDA element</li>
	<li>defining codes and code systems</li>
	<li>defining CDA body sections</li>
</ul>


<p>The aim of IPF's CDA profile support is to abstract from the generic CDA representation of a certain profile towards a syntax that reflects the structure and vocabulary of the profile specification. In particular, all CDA "boilerplate" code shall be hidden, e.g. with respect to templateIds, codes and titles. This helps to achieve profile-compliant CDA documents, although there's no guarantee for it as for some restrictions it is not possible to automatically enforce them.</p>

<p>CDA profile support also adds Schematron validation against rules that are often released as informative addendum to the profile specification.</p>

<p>The CDA profile support is not only limited to creating profile-compliant documents, but also for extracting information from existing documents, and for validating existing documents.</p>


<h3><a name="IPFreference-single-CCD"></a>CCD</h3>

<p>The CCD specification is a constraint on the HL7 Clinical Document Architecture (CDA) standard. CCD was developed as a collaborative effort between ASTM and HL7, combining the benefits of ASTMs Continuity of Care Record (CCR) and the HL7 Clinical Document Architecture (CDA) specifications. It is intended as an alternate implementation to the one specified in ASTM ADJE2369 for those institutions or organizations committed to implementation of the HL7 Clinical Document Architecture.</p>

<p>The CCD specification contains U.S. specific requirements; its use is therefore limited to the U.S. The U.S. Healthcare Information Technology Standards Panel (HITSP) has selected the CCD as one of its standards.</p>

<h4><a name="IPFreference-single-Configuration"></a>Configuration</h4>

<p>Building a CCD document does not require any additional dependencies in the Maven setup. It requires, however even more Groovy metaclass extensions on top of the underlying CDA Object model to facilitate accessing CCD documents. Note that the <b>CCDModelExtensions contain the CDAR2ModelExtensions</b>.<br>
You can register the extensions manually:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.modules.ccd.builder.CCDModelExtension
...
ExpandoMetaClass.enableGlobally()
<span class="code-keyword">new</span> CCDModelExtension().extensions.call()
</pre>
</div></div>

<p>Usually you would use a Spring ApplicationContext to register the extensions, especially in conjunction with Camel routes:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>/&gt;</span>

...

    &lt;bean id=<span class="code-quote">"ccdModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.modules.ccd.builder.CCDModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                ...
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>                
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"ccdModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Usage"></a>Usage</h4>

<p>The <tt>CCDBuilder</tt> is a subclass of the <tt>org.openehealth.ipf.modules.cda.builder.CDAR2Builder</tt> class. The top-level element is now <tt>continuityOfCareDocument</tt> instead of <tt>clinicalDocument</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.modules.cda.builder.content.document.CCDBuilder
...
def builder = <span class="code-keyword">new</span> CCDBuilder()
def ccd = builder.build {
   continuityOfCareDocument {
      ...
   }
}
</pre>
</div></div>

<p>Take care to instantiate <tt>CCDBuilder</tt> only once and reuse the instance! Note that you use the standard <tt>CDAR2Renderer</tt> to ender a CCD document to XML.</p>

<p>CCD support also conatins a DSL extension that checks a CCD document in its XML representation against the specified constraints by using a <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-schematronvalidation">Schematron validator</a>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.openehealth.ipf.commons.xml.SchematronProfile;
...
from('direct:input1') 
     ....                 <span class="code-comment">// get XML CCD into message body
</span>     .validate().ccd()    
     <span class="code-comment">// equivalent with:
</span>     <span class="code-comment">// .validate().schematron().staticProfile(<span class="code-keyword">new</span> SchematronProfile(CDAR2Constants.CCD_SCHEMATRON_RULES))
</span>     ...
</pre>
</div></div>

<p>You can use the <tt>CCDBuilder</tt> just like the <tt>CDAR2Builder</tt>. You can also use it to construct non-CCD documents as its provided functrionality is actually a superset.<br>
However, it offers many additional CCD-specific builder elements and cardinality checks that closely correspond with subchapters of the CCD specification. These special elements facilitate the creation of correct CCD documents by automatically setting static elements and attributes and enforcing the CCD-specific constraints as good as possible.</p>

<p>Below you find a detailed list of how the CCD sections have been mapped into builder elements.</p>

<div>
<ul>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Purposesection">Purpose section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Payerssection">Payers section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-AdvanceDirectivessection">Advance Directives section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Supportsection">Support section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-FunctionalStatussection">Functional Status section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Problemssection">Problems section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-FamiliyHistorysection">Familiy History section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-SocialHistorysection">Social History section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Alertssection">Alerts section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Medicationssection">Medications section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-MedicalEquipmentsection">Medical Equipment section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Immunizationssection">Immunizations section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-VitalSignssection">Vital Signs section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Resultssection">Results section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Proceduressection">Procedures section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-Encounterssection">Encounters section</a></li>
    <li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#CCDProfileSupport-PlanofCaresection">Plan of Care section</a></li>
</ul></div>

<h4><a name="IPFreference-single-Purposesection"></a>Purpose section</h4>

<p>Represents the specific reason for which the summarization was generated, such as in response to a request. The general use case does not require a purpose. Purpose should be utilized when the CCD has a specific purpose such as a transfer, referral, or patient request.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>purpose</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Purpose section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>purposeActivity</tt> </td>
<td class="confluenceTd"> EntryRelationship </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Reason for creating the document. The target act may be an Observation, Procedure, or some other kind of act, and it may represent an order, an event, etc. </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Purpose section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Purpose (Chapter 2.8)
</span>purpose {
    text('Transfer of Care!')
    purposeActivity {
        <span class="code-comment">// Example of an Purpose Activity Act
</span>        act {
            code(code:'308292007',
                    codeSystem:'2.16.840.1.113883.6.96',
                    displayName:'Transfer of care')
            statusCode('completed')
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.13"</span>/&gt;
          &lt;code code=<span class="code-quote">"48764-5"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Summary purpose"</span>/&gt;
          &lt;title&gt;Summary purpose&lt;/title&gt;
          &lt;text&gt;Transfer of Care!&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.30"</span>/&gt;
              &lt;code code=<span class="code-quote">"23745001"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> codeSystemName=<span class="code-quote">"SNOMED CT"</span> displayName=<span class="code-quote">"Documentation procedure"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"RSON"</span>&gt;
                &lt;act&gt;
                  &lt;code code=<span class="code-quote">"308292007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Transfer of care"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                &lt;/act&gt;
              &lt;/entryRelationship&gt;
            &lt;/act&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
  ...
</pre>
</div></div>

<h4><a name="IPFreference-single-Payerssection"></a>Payers section</h4>

<p>Payers contains data on the patient's payers, whether a 'third party' insurance, self-pay, other payer or guarantor, or some combination of payers, and is used to define which entity is the responsible fiduciary for the financial aspects of a patient's care.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>payers</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Payers section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>coverageActivity</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> serves to order the payment sources </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>policyActivity</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> the policy or program providing the coverage </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>payer</tt> </td>
<td class="confluenceTd"> AssignedEntity </td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd"> performer of the policy activity </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>coveredParty</tt> </td>
<td class="confluenceTd"> ParticipantRole </td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd"> The person for whom payment is being provided </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>subscriber</tt> </td>
<td class="confluenceTd"> ParticipantRole </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> participant that is the holder the coverage </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>authorizationActivity</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0..* </td>
<td class="confluenceTd"> authorizations or pre-authorizations currently active for the patient for the particular payer </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>promise</tt> </td>
<td class="confluenceTd"> EntryRelationsship </td>
<td class="confluenceTd"> 0..* </td>
<td class="confluenceTd">&nbsp;</td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Payers section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Payers (Chapter 3.1)
</span>payers {
    text {
        ...                             
    }
    coverageActivity {
        id('1fe2cdd0-7aad-11db-9fe1-0800200c9a66')
        policyActivity {
            id('3e676a50-7aac-11db-9fe1-0800200c9a66')
            code('EHCPOL')
            payer {
                id('329fcdf0-7ab3-11db-9fe1-0800200c9a66')
                representedOrganization {
                    name('Good Health Insurance')
                }
            }
            coveredParty {
                id('14d4a520-7aae-11db-9fe1-0800200c9a66')
                code('SELF')
            }
            authorizationActivity {
                id('f4dce790-8328-11db-9fe1-0800200c9a66')
                code(nullFlavor:'NA')
                promise {
                    procedure(moodCode:'PRMS') {
                        code(code:'73761001',
                                     codeSystem:'2.16.840.1.113883.6.96',
                                     displayName:'Colonoscopy')
                    }
                }
            }
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.9"</span>/&gt;
          &lt;code code=<span class="code-quote">"48768-6"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Payment sources"</span>/&gt;
          &lt;title&gt;Payers&lt;/title&gt;
          &lt;text&gt;...&lt;/text&gt;
          &lt;entry&gt;
            &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"DEF"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.20"</span>/&gt;
              &lt;id root=<span class="code-quote">"1fe2cdd0-7aad-11db-9fe1-0800200c9a66"</span>/&gt;
              &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"48768-6"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Payment sources"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"COMP"</span>&gt;
                &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.26"</span>/&gt;
                  &lt;id root=<span class="code-quote">"3e676a50-7aac-11db-9fe1-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"EHCPOL"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;performer typeCode=<span class="code-quote">"PRF"</span>&gt;
                    &lt;assignedEntity&gt;
                      &lt;id root=<span class="code-quote">"329fcdf0-7ab3-11db-9fe1-0800200c9a66"</span>/&gt;
                      &lt;representedOrganization&gt;
                        &lt;name&gt;Good Health Insurance&lt;/name&gt;
                      &lt;/representedOrganization&gt;
                    &lt;/assignedEntity&gt;
                  &lt;/performer&gt;
                  &lt;participant typeCode=<span class="code-quote">"COV"</span>&gt;
                    &lt;participantRole&gt;
                      &lt;id root=<span class="code-quote">"14d4a520-7aae-11db-9fe1-0800200c9a66"</span>/&gt;
                      &lt;code code=<span class="code-quote">"SELF"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.111"</span>/&gt;
                    &lt;/participantRole&gt;
                  &lt;/participant&gt;
                  &lt;entryRelationship typeCode=<span class="code-quote">"REFR"</span>&gt;
                    &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.19"</span>/&gt;
                      &lt;id root=<span class="code-quote">"f4dce790-8328-11db-9fe1-0800200c9a66"</span>/&gt;
                      &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
                      &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                        &lt;procedure classCode=<span class="code-quote">"PROC"</span> moodCode=<span class="code-quote">"PRMS"</span>&gt;
                          &lt;code code=<span class="code-quote">"73761001"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Colonoscopy"</span>/&gt;
                        &lt;/procedure&gt;
                      &lt;/entryRelationship&gt;
                    &lt;/act&gt;
                  &lt;/entryRelationship&gt;
                &lt;/act&gt;
              &lt;/entryRelationship&gt;
            &lt;/act&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
  ...
</pre>
</div></div>


<h4><a name="IPFreference-single-AdvanceDirectivessection"></a>Advance Directives section</h4>

<p>This section contains data defining the patient's advance directives and any reference to supporting documentation. The most recent and up-to-date directives are required, if known, and should be listed in as much detail as possible. This section contains data such as the existence of living wills, healthcare proxies, and CPR and resuscitation status. If referenced documents are available, they can be included in the CCD exchange package.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>advanceDirectives</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Advance Directives section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>advanceDirectiveObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Advance Directives observation </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>advanceDirectiveStatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd"> Advance Directive observation status</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>verifier</tt> </td>
<td class="confluenceTd"> Participant </td>
<td class="confluenceTd"> 0..* </td>
<td class="confluenceTd"> A verification of an advance directive observation </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>advanceDirectiveReference</tt> </td>
<td class="confluenceTd"> ExternalDocument </td>
<td class="confluenceTd"> 0..1  </td>
<td class="confluenceTd"> Referenced advance directive document </td>
</tr>
</tbody></table>
<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Advance Directives section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Advance Directives (Chapter 3.2)
</span>advanceDirectives{
    text{
        table(border:'1', width:'100%'){
        thead{
            tr{
                th('Directive')
                    th('Description')
                    th('Verification')
                    th('Supporting Document(s)')
                }
            }
            tbody{
               tr{
                    td('Resuscitation status')
                    td('Do not resuscitate')
                    td('Dr. Robert Dolin, Nov 07, 1999')
                    td{
                        linkHtml(href:'AdvanceDirective.b50b7910-7ffb-4f4c-bbe4-177ed68cbbf3.pdf','Advance directive')
                    }
                }
            }
        }
    }<span class="code-comment">//text
</span>    advanceDirectiveObservation{
        id(root:'9b54c3c9-1673-49c7-aef9-b037ed72ed27')
    code(code:'304251008', codeSystem:'2.16.840.1.113883.6.96', displayName:'Resuscitation')
    value(make{
        cd(code:'304253006', codeSystem:'2.16.840.1.113883.6.96', displayName:'Do not resuscitate'){
            originalText{
                reference(value:'#AD1')
            }
        }
    })
    verifier{
            time(value:'19991107')
            participantRole{ 
                id(root:'20cf14fb-b65c-4c8c-a54d-b0cca834c18c') 
            }
        }
    advanceDirectiveStatus{
        value(code:'15240007',
                    codeSystem:'2.16.840.1.113883.6.96',
                    displayName:'Current and verified')
        }<span class="code-comment">//advance directive observation status
</span>        advanceDirectiveReference{
        id(root:'b50b7910-7ffb-4f4c-bbe4-177ed68cbbf3')
        code(code:'371538006',
                codeSystem:'2.16.840.1.113883.6.96',
                displayName:'Advance directive')
        text(mediaType:'application/pdf'){   
            reference(value:'AdvanceDirective.b50b7910-7ffb-4f4c-bbe4-177ed68cbbf3.pdf') 
            }
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.1"</span>/&gt;
          &lt;code code=<span class="code-quote">"42348-3"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Advance directives"</span>/&gt;
          &lt;title&gt;Advance Directives&lt;/title&gt;
          &lt;text&gt;&lt;table border=<span class="code-quote">"1"</span> width=<span class="code-quote">"100%"</span>&gt;
              &lt;thead&gt;
                &lt;tr&gt;
                  &lt;th colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Directive&lt;/th&gt;
                  &lt;th colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Description&lt;/th&gt;
                  &lt;th colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Verification&lt;/th&gt;
                  &lt;th colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Supporting Document(s)&lt;/th&gt;
                &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Resuscitation status&lt;/td&gt;
                  &lt;td colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Do not resuscitate&lt;/td&gt;
                  &lt;td colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Dr. Robert Dolin, Nov 07, 1999&lt;/td&gt;
                  &lt;td colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;&lt;linkHtml href=<span class="code-quote">"AdvanceDirective.b50b7910-7ffb-4f4c-bbe4-177ed68cbbf3.pdf"</span>&gt;Advance directive&lt;/linkHtml&gt;&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.17"</span>/&gt;
              &lt;id root=<span class="code-quote">"9b54c3c9-1673-49c7-aef9-b037ed72ed27"</span>/&gt;
              &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"304251008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Resuscitation"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"304253006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Do not resuscitate"</span>&gt;
                &lt;originalText&gt;&lt;reference value=<span class="code-quote">"#AD1"</span>/&gt;&lt;/originalText&gt;
              &lt;/value&gt;
              &lt;participant typeCode=<span class="code-quote">"VRF"</span>&gt;
                &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.58"</span>/&gt;
                &lt;time value=<span class="code-quote">"19991107"</span>/&gt;
                &lt;participantRole&gt;
                  &lt;id root=<span class="code-quote">"20cf14fb-b65c-4c8c-a54d-b0cca834c18c"</span>/&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"REFR"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.37"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"33999-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Status"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"15240007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Current and verified"</span>/&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
              &lt;reference typeCode=<span class="code-quote">"REFR"</span>&gt;
                &lt;externalDocument classCode=<span class="code-quote">"DOC"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.36"</span>/&gt;
                  &lt;id root=<span class="code-quote">"b50b7910-7ffb-4f4c-bbe4-177ed68cbbf3"</span>/&gt;
                  &lt;code code=<span class="code-quote">"371538006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Advance directive"</span>/&gt;
                  &lt;text mediaType=<span class="code-quote">"application/pdf"</span>&gt;&lt;reference value=<span class="code-quote">"AdvanceDirective.b50b7910-7ffb-4f4c-bbe4-177ed68cbbf3.pdf"</span>/&gt;&lt;/text&gt;
                &lt;/externalDocument&gt;
              &lt;/reference&gt;
            &lt;/observation&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
  ...
</pre>
</div></div>

<h4><a name="IPFreference-single-Supportsection"></a>Support section</h4>

<p>This section represents the patient's sources of support such as immediate family, relatives, and guardian at the time the summarization is generated. Support information also includes next of kin, caregivers, and support organizations. At a minimum, key support contacts relative to healthcare decisions, including next of kin, should be included.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>gardian</tt> </td>
<td class="confluenceTd"> Patient/Guardian </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Guardian entry</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>nextOfKin</tt> </td>
<td class="confluenceTd"> Participant/associatedEntity </td>
<td class="confluenceTd"> 0..* </td>
<td class="confluenceTd"> Next of kin participant entry</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>emergencyContact</tt> </td>
<td class="confluenceTd"> Participant/associatedEntity </td>
<td class="confluenceTd"> 0..* </td>
<td class="confluenceTd"> Emergency contact participant entry </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>caregiver</tt> </td>
<td class="confluenceTd"> Participant/associatedEntity </td>
<td class="confluenceTd"> 0..* </td>
<td class="confluenceTd"> Caregiver participant entry </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Support entries</b></div><div class="codeContent panelContent">
<pre class="code-java">continuityOfCareDocument {
    ...
    nextOfKin{
        id(root:'4ac71514-6a10-4164-9715-f8d96af48e6d')
        code(code:'65656005', codeSystem:'2.16.840.1.113883.6.96', displayName:'Biiological mother')
        telecom(value:'tel:(999)555-1212')
        associatedPerson{
            name{
                given('Henrietta')
                family('Levin')
            }
        }
    }<span class="code-comment">//next of kin
</span>    emergencyContact{
        id(root:'4ac71514-6a10-4164-9715-f8d96af48e6f')
        associatedPerson{
            name{
                given('Baba')
                family('John')
            }
        } 
    }<span class="code-comment">//emergency contact
</span>    caregiver{
        scopingOrganization{
            name('Very Good Health Clinic')
        }
    }<span class="code-comment">//patient caregiver
</span>    ...
}
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ....
  &lt;participant typeCode=<span class="code-quote">"IND"</span>&gt;
    &lt;associatedEntity classCode=<span class="code-quote">"NOK"</span>&gt;
      &lt;id root=<span class="code-quote">"4ac71514-6a10-4164-9715-f8d96af48e6d"</span>/&gt;
      &lt;code code=<span class="code-quote">"65656005"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Biiological mother"</span>/&gt;
      &lt;telecom value=<span class="code-quote">"tel:(999)555-1212"</span>/&gt;
      &lt;associatedPerson&gt;
        &lt;name&gt;&lt;given&gt;Henrietta&lt;/given&gt;&lt;family&gt;Levin&lt;/family&gt;&lt;/name&gt;
      &lt;/associatedPerson&gt;
    &lt;/associatedEntity&gt;
  &lt;/participant&gt;
  &lt;participant typeCode=<span class="code-quote">"IND"</span>&gt;
    &lt;associatedEntity classCode=<span class="code-quote">"ECON"</span>&gt;
      &lt;id root=<span class="code-quote">"4ac71514-6a10-4164-9715-f8d96af48e6f"</span>/&gt;
      &lt;associatedPerson&gt;
        &lt;name&gt;&lt;given&gt;Baba&lt;/given&gt;&lt;family&gt;John&lt;/family&gt;&lt;/name&gt;
      &lt;/associatedPerson&gt;
    &lt;/associatedEntity&gt;
  &lt;/participant&gt;
  &lt;participant typeCode=<span class="code-quote">"IND"</span>&gt;
    &lt;associatedEntity classCode=<span class="code-quote">"CAREGIVER"</span>&gt;
      &lt;scopingOrganization&gt;
        &lt;name&gt;Very Good Health Clinic&lt;/name&gt;
      &lt;/scopingOrganization&gt;
    &lt;/associatedEntity&gt;
  &lt;/participant&gt;
...
</pre>
</div></div>

<h4><a name="IPFreference-single-FunctionalStatussection"></a>Functional Status section</h4>

<p>Functional Status describes the patient's status of normal functioning at the time the Care Record was created.</p>

<h5><a name="IPFreference-single-FunctionalStatus"></a>Functional Status</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>funcationalStatus</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Functional Status section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemAct</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> see Problems section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>functionalStatusStaus</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Problem observation may contain a status observation of functional status </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Functional Status section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Funtional Stats (Chapter 3.4)
</span>functionalStatus{
    text{
        ...
    }
    problemAct{
        id(root:'6z2fa88d-4174-4909-aece-db44b60a3abb') 
        code(nullFlavor:'NA')
        problemObservation{
            id(root:'fd07111a-b15b-4dce-8518-1274d07f142a')
            code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4') 
            effectiveTime{low(value:'1998')}
            value( make{
                    cd(code:'105504002', 
                            codeSystem:'2.16.840.1.113883.6.96', 
                            displayName:'Dependence on cane')
                }
            )
            functionalStatusStatus{
                value(code:'55561003',
                        codeSystem:'2.16.840.1.113883.6.96',
                        displayName:'Active') 
            }
        }
    }
    problemAct{
       id(root:'64606e86-c080-11db-8314-0800200c9a66')
       problemObservation{
           id(root:'64606e86-c080-11db-8314-0800200c9a66')
            code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            value( make{
                    cd(code:'386807006',
                            codeSystem:'2.16.840.1.113883.6.96',
                            displayName:'Memory impairment')
                }
            )
            functionalStatusStatus{
                value(code:'55561003',
                        codeSystem:'2.16.840.1.113883.6.96',
                        displayName:'Active')
            }
       }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ....
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.5"</span>/&gt;
          &lt;code code=<span class="code-quote">"47420-5"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Functional status assessment"</span>/&gt;
          &lt;title&gt;Functional Status&lt;/title&gt;
          &lt;text&gt;...&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.27"</span>/&gt;
              &lt;id root=<span class="code-quote">"6z2fa88d-4174-4909-aece-db44b60a3abb"</span>/&gt;
              &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.28"</span>/&gt;
                  &lt;id root=<span class="code-quote">"fd07111a-b15b-4dce-8518-1274d07f142a"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime&gt;
                    &lt;low value=<span class="code-quote">"1998"</span>/&gt;
                  &lt;/effectiveTime&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"105504002"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Dependence on cane"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"REFR"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.44"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"33999-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Status"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"55561003"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Active"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/act&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.27"</span>/&gt;
              &lt;id root=<span class="code-quote">"64606e86-c080-11db-8314-0800200c9a66"</span>/&gt;
              &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.28"</span>/&gt;
                  &lt;id root=<span class="code-quote">"64606e86-c080-11db-8314-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"386807006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Memory impairment"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"REFR"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.44"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"33999-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Status"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"55561003"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Active"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/act&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;  
  ...
</pre>
</div></div>

<h4><a name="IPFreference-single-Problemssection"></a>Problems section</h4>

<p>This section lists and describes all relevant clinical problems at the time the summary is generated. At a minimum, all pertinent current and historical problems should be listed. CDA R2 represents problems as Observations.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>problems</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Problems section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemAct</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Problem clinical statement </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Related problem observations </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemStatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> The status of a given problem observation </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemHealthstatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Describes overall patient health status as a result of a particular problem </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>episodeObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> May be used to indicate that a problem act represents a new episode, distinct from other episodes of a similar concern </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>patientAwareness</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Patient awareness of a problem act or problem observation </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Problems section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Problems (Chapter 3.5)
</span>component {
    structuredBody {
    problems{
        text('Patient Problems Acts')
        problemAct{
            id(root:'d11275e9-67ae-11db-bd13-0800200c9a66')
                problemObservation{
                    id(root:'9d3d416d-45ab-4da1-912f-4583e0632000')
                    code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
                    value(make{
                            cd(code:'233604007',codeSystem:'2.16.840.1.113883.6.96',displayName:'Pneumonia')
                        }
                    ) 
                    problemStatus{
                        value(code:'413322009', codeSystem:'2.16.840.1.113883.6.96', displayName:'Resolved')
                    }
                    problemHealthstatus{
                        value(code:'162467007', codeSystem:'2.16.840.1.113883.6.96', displayName:'Symptom Free')
                    }
                }
                episodeObservation{
                    code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
                    value(make{
                            cd(code:'404684003', codeSystem:'2.16.840.1.113883.6.96', displayName:'Clinical finding')
                        }
                    )
                    entryRelationship(typeCode:'SAS'){
                        act(classCode:'ACT', moodCode:'EVN'){
                            id(root:'ec8a6ff8-ed4b-4f7e-82c3-e98e58b45de7')
                            code(nullFlavor:'NA')
                        }<span class="code-comment">//act
</span>                    }
                }
                patientAwareness{
                    awarenessCode(code:'TEST', codeSystem:'2.16.840.1.113883.5.4')
                    participantRole{ 
                        id(root:'c8a6ff8-ed4b-4f7e-82c3-e98e58b45de8') }
                    }
                }
            }
        }
    }
}
...

</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ....
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.11"</span>/&gt;
          &lt;code code=<span class="code-quote">"11450-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Problem list"</span>/&gt;
          &lt;title&gt;Problems&lt;/title&gt;
          &lt;text&gt;Patient Problems Acts&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.27"</span>/&gt;
              &lt;id root=<span class="code-quote">"d11275e9-67ae-11db-bd13-0800200c9a66"</span>/&gt;
              &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
              &lt;participant typeCode=<span class="code-quote">"SBJ"</span>&gt;
                &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.48"</span>/&gt;
                &lt;awarenessCode code=<span class="code-quote">"TEST"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                &lt;participantRole&gt;
                  &lt;id root=<span class="code-quote">"c8a6ff8-ed4b-4f7e-82c3-e98e58b45de8"</span>/&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.28"</span>/&gt;
                  &lt;id root=<span class="code-quote">"9d3d416d-45ab-4da1-912f-4583e0632000"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"233604007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Pneumonia"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.50"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"33999-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Status"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"413322009"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Resolved"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.51"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"11323-3"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Health status"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"162467007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Symptom Free"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.41"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"404684003"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Clinical finding"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SAS"</span>&gt;
                    &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;id root=<span class="code-quote">"ec8a6ff8-ed4b-4f7e-82c3-e98e58b45de7"</span>/&gt;
                      &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
                    &lt;/act&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/act&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
  ...
</pre>
</div></div>

<h4><a name="IPFreference-single-FamiliyHistorysection"></a>Familiy History section</h4>

<p>This section contains data defining the patient's genetic relatives in terms of possible or relevant health risk factors that have a potential impact on the patient's healthcare risk profile.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>familyHistory</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Family history section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>familyHistoryObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Family history observation </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemStatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> The status of a given family history observation (see Problem Observation)</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>causeOfDeath</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> A special family history observation describing the cause of death </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>cause</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd"> Family history observation of death </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>familyMember</tt> </td>
<td class="confluenceTd"> Organizer </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Family history organizer in order to group the family history observations related to a family member </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>familyPerson</tt> </td>
<td class="confluenceTd"> RelatedSubject </td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd"> Subject participant, representing the family member who is the subject of the family history observations </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>age</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd">  Representation of age </td>
</tr>
</tbody></table>


<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Family History Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Family History (Chapter 3.6)
</span>familyHistory {
    text('skipped') 
    familyMember {
        familyPerson {
            code(code:'9947008', codeSystem:'2.16.840.1.113883.6.96', displayName:'Biological father')
            subject {
                administrativeGenderCode('M')
                birthTime(value:'1912')
            }
        }
        causeOfDeath {
            id('d42ebf70-5c89-11db-b0de-0800200c9a66')
            code('ASSERTION')
            value(make { 
                ce(code:'22298006',codeSystem:'2.16.840.1.113883.6.96',displayName:'MI') 
            })
            cause {
                id('6898fae0-5c8a-11db-b0de-0800200c9a66')
                code('ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
                statusCode('completed')
                value(make {
                    ce(code:'419099009',codeSystem:'2.16.840.1.113883.6.96',displayName:'Dead')
                })
            }
            age {
                value(make { _int(57) })
            }
        }
    familyHistoryObservation{
            id('5bfe3ec0-5c8b-11db-b0de-0800200c9a66')
            code('ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            value(make {
                ce(code:'59621000',codeSystem:'2.16.840.1.113883.6.96',displayName:'HTN')
            })
            age {
                value(make { _int(40) })
            }
            problemStatus{
                value(code:'413322009', displayName:'Resolved')
            }
        }
    }                           
    familyMember {
        familyPerson {
            code(code:'65656005', codeSystem:'2.16.840.1.113883.6.96', displayName:'Biological mother')
            subject {
                administrativeGenderCode('F')
                birthTime(value:'1912')
            }
        }                               
        familyHistoryObservation{
            id('a13c6160-5c8b-11db-b0de-0800200c9a66')
            code('ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            value(make {
                ce(code:'195967001',codeSystem:'2.16.840.1.113883.6.96',displayName:'Asthma')
            })
            age {
                value(make { _int(30) })
            }
        }
    }                           
}        
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.4"</span>/&gt;
          &lt;code code=<span class="code-quote">"10157-6"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"History of family member diseases"</span>/&gt;
          &lt;title&gt;Family History&lt;/title&gt;
          &lt;text&gt;skipped&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;organizer classCode=<span class="code-quote">"CLUSTER"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.23"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;subject&gt;
                &lt;relatedSubject classCode=<span class="code-quote">"PRS"</span>&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"9947008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Biological father"</span>/&gt;
                  &lt;subject&gt;
                    &lt;administrativeGenderCode code=<span class="code-quote">"M"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.1"</span>/&gt;
                    &lt;birthTime value=<span class="code-quote">"1912"</span>/&gt;
                  &lt;/subject&gt;
                &lt;/relatedSubject&gt;
              &lt;/subject&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.42"</span>/&gt;
                  &lt;id root=<span class="code-quote">"d42ebf70-5c89-11db-b0de-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"22298006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"MI"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"CAUS"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"INT"</span>&gt;
                      &lt;id root=<span class="code-quote">"6898fae0-5c8a-11db-b0de-0800200c9a66"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"419099009"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Dead"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> inversionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"INT"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.38"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"397659008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> codeSystemName=<span class="code-quote">"SNOMED CT"</span> displayName=<span class="code-quote">"Age"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"INT"</span> value=<span class="code-quote">"57"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.22"</span>/&gt;
                  &lt;id root=<span class="code-quote">"5bfe3ec0-5c8b-11db-b0de-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"59621000"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"HTN"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> inversionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"INT"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.38"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"397659008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> codeSystemName=<span class="code-quote">"SNOMED CT"</span> displayName=<span class="code-quote">"Age"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"INT"</span> value=<span class="code-quote">"40"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
            &lt;/organizer&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;organizer classCode=<span class="code-quote">"CLUSTER"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.23"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;subject&gt;
                &lt;relatedSubject classCode=<span class="code-quote">"PRS"</span>&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"65656005"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Biological mother"</span>/&gt;
                  &lt;subject&gt;
                    &lt;administrativeGenderCode code=<span class="code-quote">"F"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.1"</span>/&gt;
                    &lt;birthTime value=<span class="code-quote">"1912"</span>/&gt;
                  &lt;/subject&gt;
                &lt;/relatedSubject&gt;
              &lt;/subject&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.22"</span>/&gt;
                  &lt;id root=<span class="code-quote">"a13c6160-5c8b-11db-b0de-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"195967001"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Asthma"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> inversionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"INT"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.38"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"397659008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> codeSystemName=<span class="code-quote">"SNOMED CT"</span> displayName=<span class="code-quote">"Age"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"INT"</span> value=<span class="code-quote">"30"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
            &lt;/organizer&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
...
</pre>
</div></div>

<h4><a name="IPFreference-single-SocialHistorysection"></a>Social History section</h4>

<p>This section contains data defining the patient's occupational, personal (e.g. lifestyle), social, and environmental history and health risk factors, as well as administrative data such as marital status, race, ethnicity and religious affiliation. Social history can have significant influence on a patient's physical, psychological and emotional health and wellbeing so should be considered in the development of a complete record.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>socialHistory</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Social History section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>socialHistoryObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Social history observation (see also Episode Observation) </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>socialHistoryStatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Social history observation status </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Social History Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Social History (Chapter 3.7)
</span>socialHistory{
    text{
        ....
    }
    socialHistoryObservation{
        id(root:'9b56c25d-9104-45ee-9fa4-e0f3afaa01c1')
        code(code:'230056004', codeSystem:'2.16.840.1.113883.6.96',  displayName:'Cigarette smoking')
        effectiveTime{
            low(value:'1947')
            high(value:'1972')
        }
        value(make{
            st('1 pack per day')
        }) 
    }
    socialHistoryObservation{
        id(root:'45efb604-7049-4a2e-ad33-d38556c9636c')
        code( code:'230056004', codeSystem:'2.16.840.1.113883.6.96', displayName:'Cigarette smoking')
        effectiveTime{
            low(value:'1973')
        }
        value(make{
            st('None')
        })
        episodeObservation{
            code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            entryRelationship(typeCode:'SAS'){
                observation(classCode:'OBS', moodCode:'EVN'){
                    id(root:'9b56c25d-9104-45ee-9fa4-e0f3afaa01c1')
                    code(code:'230056004', 
                            codeSystem:'2.16.840.1.113883.6.96',
                            displayName:'Cigarette smoking')
                }
            }
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">....
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.15"</span>/&gt;
          &lt;code code=<span class="code-quote">"29762-2"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Social history"</span>/&gt;
          &lt;title&gt;Social History&lt;/title&gt;
          &lt;text&gt;...&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.33"</span>/&gt;
              &lt;id root=<span class="code-quote">"9b56c25d-9104-45ee-9fa4-e0f3afaa01c1"</span>/&gt;
              &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"230056004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Cigarette smoking"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;effectiveTime&gt;
                &lt;low value=<span class="code-quote">"1947"</span>/&gt;
                &lt;high value=<span class="code-quote">"1972"</span>/&gt;
              &lt;/effectiveTime&gt;
              &lt;value xsi:type=<span class="code-quote">"ST"</span>&gt;1 pack per day&lt;/value&gt;
            &lt;/observation&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.33"</span>/&gt;
              &lt;id root=<span class="code-quote">"45efb604-7049-4a2e-ad33-d38556c9636c"</span>/&gt;
              &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"230056004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Cigarette smoking"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;effectiveTime&gt;
                &lt;low value=<span class="code-quote">"1973"</span>/&gt;
              &lt;/effectiveTime&gt;
              &lt;value xsi:type=<span class="code-quote">"ST"</span>&gt;None&lt;/value&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.41"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"404684003"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Clinical finding"</span>&gt;
                    &lt;qualifier&gt;
                      &lt;name code=<span class="code-quote">"246456000"</span> displayName=<span class="code-quote">"Episodicity"</span>/&gt;
                      &lt;value code=<span class="code-quote">"288527008"</span> displayName=<span class="code-quote">"New episode"</span>/&gt;
                    &lt;/qualifier&gt;
                  &lt;/value&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SAS"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;id root=<span class="code-quote">"9b56c25d-9104-45ee-9fa4-e0f3afaa01c1"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"230056004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Cigarette smoking"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/observation&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
  ...
</pre>
</div></div>

<h4><a name="IPFreference-single-Alertssection"></a>Alerts section</h4>

<p>This section is used to list and describe any allergies, adverse reactions, and alerts that are pertinent to the patient's current or past medical history. At a minimum, currently active and any relevant historical allergies and adverse reactions should be listed.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>alerts</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Problems section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemAct</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Problem clinical statement </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>alertObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Related alert observations </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>alertStatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> The status of a given alert observation </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>participantAgent</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> The agent responsible for an allergy or adverse reaction </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>reactionObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Reaction representation to an administered or exposed substance </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>reactionIntervention</tt> </td>
<td class="confluenceTd"> EntryRelationship </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Reaction observation may contain reaction interventions. Reaction Intervention may be represented by any clinical statement | <tt>medicationActivity</tt> | <tt>procedureActivityAct</tt> | <tt>procedureActivityObservation</tt> | <tt>procedureActivityProcedure</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>severityObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Reaction severity to a given reactions observation </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Alerts Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Alerts (Chapter 3.8)
</span>alerts{
    text('Patient Alerts')
    problemAct{
        id(root:'d11275e9-67ae-11db-bd13-0800200c9a66')
        alertObservation{
            id(root:'9d3d416d-45ab-4da1-912f-4583e0632000')
            code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            effectiveTime('20000328')
            alertStatus{
                value(code:'55561003', 
                        codeSystem:'2.16.840.1.113883.6.96', 
                        displayName:'Active')
            }
            participantAgent{
                playingEntity{
                    code(code:'70618', 
                            codeSystem:'2.16.840.1.113883.6.88',  
                            displayName:'Penicillin')
                }
            }
            reactionObservation{
                code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
                value(make{
                    cd(code:'247472004', 
                            codeSystem:'2.16.840.1.113883.6.96', 
                            displayName:'Hives')
                })
                severityObservation{
                    value(make{
                        cd(code:'247472004', 
                                    codeSystem:'2.16.840.1.113883.6.96', 
                                    displayName:'Hives')
                    })
               }
            }
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">  ....
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.2"</span>/&gt;
          &lt;code code=<span class="code-quote">"48765-2"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Allergies, adverse reactions, alerts"</span>/&gt;
          &lt;title&gt;Allergies and  adverse reactions, alerts&lt;/title&gt;
          &lt;text&gt;Patient Alerts&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.27"</span>/&gt;
              &lt;id root=<span class="code-quote">"d11275e9-67ae-11db-bd13-0800200c9a66"</span>/&gt;
              &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.18"</span>/&gt;
                  &lt;id root=<span class="code-quote">"9d3d416d-45ab-4da1-912f-4583e0632000"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime value=<span class="code-quote">"20000328"</span>/&gt;
                  &lt;participant typeCode=<span class="code-quote">"CSM"</span>&gt;
                    &lt;participantRole classCode=<span class="code-quote">"MANU"</span>&gt;
                      &lt;playingEntity classCode=<span class="code-quote">"MMAT"</span>&gt;
                        &lt;code code=<span class="code-quote">"70618"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.88"</span> displayName=<span class="code-quote">"Penicillin"</span>/&gt;
                      &lt;/playingEntity&gt;
                    &lt;/participantRole&gt;
                  &lt;/participant&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"REFR"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.39"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"33999-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Status"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"55561003"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Active"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"MFST"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.54"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"247472004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Hives"</span>/&gt;
                      &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                        &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.55"</span>/&gt;
                          &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"SEV"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span> displayName=<span class="code-quote">"Severity observation"</span>/&gt;
                          &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                          &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"247472004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Hives"</span>/&gt;
                        &lt;/observation&gt;
                      &lt;/entryRelationship&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/act&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
  ...
</pre>
</div></div>

<h4><a name="IPFreference-single-Medicationssection"></a>Medications section</h4>

<p>The Medications section defines a patient's current medications and pertinent medication history. At a minimum, the currently active medications should be listed, with an entire medication history as an option, particularly when the summary document is used for comprehensive data export. The section may also include a patient's prescription history, and enables the determination of the source of a medication list (e.g. from a pharmacy system vs. from the patient).</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>medications</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Social History section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>medicationActivity</tt> </td>
<td class="confluenceTd"> SubstanceAdministration </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Medication activity describes what is administered </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>consumable</tt> </td>
<td class="confluenceTd"> Consumable</td>
<td class="confluenceTd"> 1 </td>
<td class="confluenceTd"> Targets a product template </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>seriesNumber</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Medication activity series number observation. As of per definition the structure is strictly defined, seriesNumber accepts only int parameter seriesNumber(Integer) (see the example) </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>indication</tt> </td>
<td class="confluenceTd"> EntryRelationship</td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Shows the relation to problem observation or problem act (see Problems) </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>patientInstruction</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Additional information provided to a patient related to one of their medications </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>supplyActivity</tt> </td>
<td class="confluenceTd"> Supply </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Supply activity describes what has been dispensed </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>fulfillmentInstruction</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Additional information provided to the dispensing party </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>supplyLocation</tt> </td>
<td class="confluenceTd"> Participant</td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Indicates the supply location </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>product</tt> </td>
<td class="confluenceTd"> Product</td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Supply activity product </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>medicationStatus</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0..1 </td>
<td class="confluenceTd"> Medication status observation can be applied to medication or supply activity</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>productInstance</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Identify a particular product instance for medication and supply activities (see Procedures)  </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>reactionObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Reaction representation to an administered or exposed substance  (see Alerts )</td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Medications Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Medications (Chapter 3.9)
</span>medications{
    text {
        ....
    }
    informant {
        assignedEntity {
            id('996-756-495@2.16.840.1.113883.19.5')
            representedOrganization {
                id('2.16.840.1.113883.19.5')
                name('Good Health Clinic')
            }
        }
    }
    medicationActivity {
        id('cdbd33f0-6cde-11db-9fe1-0800200c9a66')
        effectiveTime(make {
            pivlts { period('6 h') }
        })
        routeCode(code:'IPINHL', displayName:<span class="code-quote">"Inhalation, oral"</span>)
        doseQuantity(value:2.0)
        administrationUnitCode(code:<span class="code-quote">"415215001"</span>,
                                codeSystem:<span class="code-quote">"2.16.840.1.113883.6.96"</span>,
                                displayName:<span class="code-quote">"Puff"</span>)
        consumable {
            manufacturedProduct {
                manufacturedMaterial {
                    code(code:<span class="code-quote">"307782"</span>,
                            codeSystem:<span class="code-quote">"2.16.840.1.113883.6.88"</span>,
                            displayName:<span class="code-quote">"Albuterol 0.09 MG/ACTUAT inhalant solution"</span>) { 
                                originalText('Albuterol inhalant') }
                }
            }
        }
        patientInstruction{
            id('cdbd5b08-6cde-11db-9fe1-0800200b8a66')
            code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            effectiveTime{
                low('20000338')
            }
            text('Read the instructions carefully')
        }
        seriesNumber(1)
        precondition {
            criterion {
                code(code:<span class="code-quote">"ASSERTION"</span>,codeSystem:<span class="code-quote">"2.16.840.1.113883.5.4"</span>)
                value(make {
                    ce(code:'56018004', codeSystem:'2.16.840.1.113883.6.96', displayName:'Wheezing')
                })
            }
        }
        reactionObservation{
            code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
            value(make{
                cd(code:'247472004', 
                        codeSystem:'2.16.840.1.113883.6.96',
                        displayName:'Hives')
            }
            )
            severityObservation{
                value(make{
                    cd(code:'247472004', 
                            codeSystem:'2.16.840.1.113883.6.96',
                            displayName:'Hives')
                })
            }
        }<span class="code-comment">//reaction observation
</span>    }
    medicationActivity {
        id('cdbd5b07-6cde-11db-9fe1-0800200c9a66')
        effectiveTime(make {
            ivlts {
                low('20000328')
                high('20000404')
            }
        })
        effectiveTime(make {
            pivlts(<span class="code-keyword">operator</span>:'A') { 
                period('6 h') }
            })
        routeCode(code:'PO')
        doseQuantity(value:1.0)
        consumable {
            manufacturedProduct {
                manufacturedMaterial {
                    code(code:<span class="code-quote">"197454"</span>,
                            codeSystem:<span class="code-quote">"2.16.840.1.113883.6.88"</span>,
                            displayName:<span class="code-quote">"Cephalexin 500 MG oral tablet"</span>) { originalText('Cephalexin') }
                }
            }
        }
        indication {
            problemObservation(classCode:'COND') {
                id('cdbd5b08-6cde-11db-9fe1-0800200c9a66')
                code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
                effectiveTime { low('20000328') }
                value(make {
                    ce(code:'32398004',
                            codeSystem:'2.16.840.1.113883.6.96',
                            displayName:'Bronchitis')
                    })
                }
            }
    }
}        
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.8"</span>/&gt;
          &lt;code code=<span class="code-quote">"10160-0"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"History of medication use"</span>/&gt;
          &lt;title&gt;Medication&lt;/title&gt;
          &lt;text&gt;...&lt;/text&gt;
          &lt;informant&gt;
            &lt;assignedEntity&gt;
              &lt;id extension=<span class="code-quote">"996-756-495"</span> root=<span class="code-quote">"2.16.840.1.113883.19.5"</span>/&gt;
              &lt;representedOrganization&gt;
                &lt;id root=<span class="code-quote">"2.16.840.1.113883.19.5"</span>/&gt;
                &lt;name&gt;Good Health Clinic&lt;/name&gt;
              &lt;/representedOrganization&gt;
            &lt;/assignedEntity&gt;
          &lt;/informant&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;substanceAdministration classCode=<span class="code-quote">"SBADM"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.24"</span>/&gt;
              &lt;id root=<span class="code-quote">"cdbd33f0-6cde-11db-9fe1-0800200c9a66"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;routeCode code=<span class="code-quote">"IPINHL"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.112"</span> codeSystemName=<span class="code-quote">"RouteOfAdministration"</span> displayName=<span class="code-quote">"Inhalation, oral"</span>/&gt;
              &lt;doseQuantity unit=<span class="code-quote">"1"</span> value=<span class="code-quote">"2.0"</span>/&gt;
              &lt;administrationUnitCode code=<span class="code-quote">"415215001"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Puff"</span>/&gt;
              &lt;consumable&gt;
                &lt;manufacturedProduct&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.53"</span>/&gt;
                  &lt;manufacturedMaterial&gt;
                    &lt;code code=<span class="code-quote">"307782"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.88"</span> displayName=<span class="code-quote">"Albuterol 0.09 MG/ACTUAT inhalant solution"</span>&gt;
                      &lt;originalText&gt;Albuterol inhalant&lt;/originalText&gt;
                    &lt;/code&gt;
                  &lt;/manufacturedMaterial&gt;
                &lt;/manufacturedProduct&gt;
              &lt;/consumable&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;act moodCode=<span class="code-quote">"INT"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.49"</span>/&gt;
                  &lt;id root=<span class="code-quote">"cdbd5b08-6cde-11db-9fe1-0800200b8a66"</span>/&gt;
                  &lt;code code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;text&gt;Read the instructions carefully&lt;/text&gt;
                  &lt;effectiveTime&gt;
                    &lt;low value=<span class="code-quote">"20000338"</span>/&gt;
                  &lt;/effectiveTime&gt;
                &lt;/act&gt;
              &lt;/entryRelationship&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.46"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"30973-2"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> displayName=<span class="code-quote">"Dose number"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"INT"</span> value=<span class="code-quote">"1"</span>/&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
&lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"CAUS"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.54"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"247472004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Hives"</span>/&gt;
                  &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                    &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.55"</span>/&gt;
                      &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"SEV"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span> displayName=<span class="code-quote">"Severity observation"</span>/&gt;
                      &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                      &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"247472004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Hives"</span>/&gt;
                    &lt;/observation&gt;
                  &lt;/entryRelationship&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
              &lt;precondition&gt;
                &lt;criterion&gt;
                  &lt;code code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"56018004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Wheezing"</span>/&gt;
                &lt;/criterion&gt;
              &lt;/precondition&gt;
            &lt;/substanceAdministration&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;substanceAdministration classCode=<span class="code-quote">"SBADM"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.24"</span>/&gt;
              &lt;id root=<span class="code-quote">"cdbd5b07-6cde-11db-9fe1-0800200c9a66"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;effectiveTime/&gt;
              &lt;routeCode code=<span class="code-quote">"PO"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.112"</span> codeSystemName=<span class="code-quote">"RouteOfAdministration"</span>/&gt;
              &lt;doseQuantity unit=<span class="code-quote">"1"</span> value=<span class="code-quote">"1.0"</span>/&gt;
              &lt;consumable&gt;
                &lt;manufacturedProduct&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.53"</span>/&gt;
                  &lt;manufacturedMaterial&gt;
                    &lt;code code=<span class="code-quote">"197454"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.88"</span> displayName=<span class="code-quote">"Cephalexin 500 MG oral tablet"</span>&gt;
                      &lt;originalText&gt;Cephalexin&lt;/originalText&gt;
                    &lt;/code&gt;
                  &lt;/manufacturedMaterial&gt;
                &lt;/manufacturedProduct&gt;
              &lt;/consumable&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"RSON"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"COND"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.28"</span>/&gt;
                  &lt;id root=<span class="code-quote">"cdbd5b08-6cde-11db-9fe1-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime&gt;
                    &lt;low value=<span class="code-quote">"20000328"</span>/&gt;
                  &lt;/effectiveTime&gt;
                  &lt;value xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"32398004"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Bronchitis"</span>/&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/substanceAdministration&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;
...
</pre>
</div></div>

<h4><a name="IPFreference-single-MedicalEquipmentsection"></a>Medical Equipment section</h4>

<p>The Medical Equipment section defines a patient's implanted and external medical devices and equipment that their health status depends on, as well as any pertinent equipment or device history. Medical equipment uses the same data objects and constraints as Medications.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>medicalEquipment</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Medical equipment section (see Medications) </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Medical Equipment Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
medicalEquipment{
    text{...}
    supplyActivity{
        id(root:'2413773c-2372-4299-bbe6-5b0f60664446')
        effectiveTime(make{
            ivlts{
                center(value:'199911')
            }
        })
        productInstance{
            playingDevice{
                code(code:'72506001',
                        codeSystem:'2.16.840.1.113883.6.96',
                        displayName:'Automatic implantable cardioverter/defibrillator')
            }
        }
    }
    supplyActivity{
        id(root:'230b0ab7-206d-42d8-a947-ab4f63aad795')
        effectiveTime(make{
            ivlts{
                center(value:'1998')
            }
        })
        productInstance{
            id(root:'03ca01b0-7be1-11db-9fe1-0800200c9a66')
            playingDevice{
                code(code:'304120007',
                        codeSystem:'2.16.840.1.113883.6.96',
                        displayName:'Total hip replacement prosthesis')
            }
            scopingEntity{
                id(root:'0abea950-5b40-4b7e-b8d9-2a5ea3ac5500')
                desc('Good Health Prostheses Company')
            }
        }
    }
    supplyActivity{
        id(root:'c4ffe98e-3cd3-4c54-b5bd-08ecb80379e0')
        effectiveTime(make{
            ivlts{
                center(value:'1999')
            }
        })
        productInstance{
            playingDevice{
                code(code:'58938008',
                        codeSystem:'2.16.840.1.113883.6.96',
                        displayName:'Wheelchair')
            }
        }
    }
}    
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">....
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.7"</span>/&gt;
          &lt;code code=<span class="code-quote">"46264-8"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"History of medical device use"</span>/&gt;
          &lt;title&gt;Equipment&lt;/title&gt;
          &lt;text&gt;...&lt;/text&gt;
          &lt;entry&gt;
            &lt;supply classCode=<span class="code-quote">"SPLY"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.34"</span>/&gt;
              &lt;id root=<span class="code-quote">"2413773c-2372-4299-bbe6-5b0f60664446"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;participant typeCode=<span class="code-quote">"DEV"</span>&gt;
                &lt;participantRole classCode=<span class="code-quote">"MANU"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.52"</span>/&gt;
                  &lt;playingDevice&gt;
                    &lt;code code=<span class="code-quote">"72506001"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Automatic implantable cardioverter/defibrillator"</span>/&gt;
                  &lt;/playingDevice&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
            &lt;/supply&gt;
          &lt;/entry&gt;
          &lt;entry&gt;
            &lt;supply classCode=<span class="code-quote">"SPLY"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.34"</span>/&gt;
              &lt;id root=<span class="code-quote">"230b0ab7-206d-42d8-a947-ab4f63aad795"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;participant typeCode=<span class="code-quote">"DEV"</span>&gt;
                &lt;participantRole classCode=<span class="code-quote">"MANU"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.52"</span>/&gt;
                  &lt;id root=<span class="code-quote">"03ca01b0-7be1-11db-9fe1-0800200c9a66"</span>/&gt;
                  &lt;playingDevice&gt;
                    &lt;code code=<span class="code-quote">"304120007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Total hip replacement prosthesis"</span>/&gt;
                  &lt;/playingDevice&gt;
                  &lt;scopingEntity&gt;
                    &lt;id root=<span class="code-quote">"0abea950-5b40-4b7e-b8d9-2a5ea3ac5500"</span>/&gt;
                    &lt;desc&gt;Good Health Prostheses Company&lt;/desc&gt;
                  &lt;/scopingEntity&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
            &lt;/supply&gt;
          &lt;/entry&gt;
          &lt;entry&gt;
            &lt;supply classCode=<span class="code-quote">"SPLY"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.34"</span>/&gt;
              &lt;id root=<span class="code-quote">"c4ffe98e-3cd3-4c54-b5bd-08ecb80379e0"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;participant typeCode=<span class="code-quote">"DEV"</span>&gt;
                &lt;participantRole classCode=<span class="code-quote">"MANU"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.52"</span>/&gt;
                  &lt;playingDevice&gt;
                    &lt;code code=<span class="code-quote">"58938008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Wheelchair"</span>/&gt;
                  &lt;/playingDevice&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
            &lt;/supply&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;  
...
</pre>
</div></div>

<h4><a name="IPFreference-single-Immunizationssection"></a>Immunizations section</h4>

<p>The Immunizations section defines a patient's current immunization status and pertinent immunization history. Immunizations section uses the same data objects and constraints as Medications.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>immunizations</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Immunizations section (see Medications) </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Immunizations Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Immunizations (Chapter 3.11)
</span>immunizations{
    text{...}
    medicationActivity{
        id(root:'e6f1ba43-c0ed-4b9b-9f12-f435d8ad8f92')
        effectiveTime(make{
            ivlts{
                center(value:'199911')
            }
        })
        routeCode(code:'IM', displayName:<span class="code-quote">"Intramuscular injection"</span>)
        consumable {
            manufacturedProduct {
                manufacturedMaterial {
                    code(code:'88',
                            codeSystem:'2.16.840.1.113883.6.59',
                            displayName:'Influenza virus vaccine') { 
                        originalText('Influenza virus vaccine') 
                    }
                }
            }
        }
    }
    medicationActivity{
        id(root:'115f0f70-1343-4938-b62f-631de9749a0a')
        effectiveTime(make{
            ivlts{
                center(value:'199812')
            }
        })
        routeCode(code:'IM', displayName:<span class="code-quote">"Intramuscular injection"</span>)
        consumable {
            manufacturedProduct {
                manufacturedMaterial {
                    code(code:'88',
                            codeSystem:'2.16.840.1.113883.6.59',
                            displayName:'Influenza virus vaccine') { 
                        originalText('Influenza virus vaccine') 
                    }
                }
            }
        }
    }
    medicationActivity{
        id(root:'78598407-9f16-42d5-8ffd-09281a60fe33')
        effectiveTime(make{
            ivlts{
                center(value:'199812')
            }
        })
        routeCode(code:'IM', displayName:<span class="code-quote">"Intramuscular injection"</span>)
        consumable {
            manufacturedProduct {
                manufacturedMaterial {
                    code(code:'33',
                            codeSystem:'2.16.840.1.113883.6.59',
                            displayName:'Pneumococcal polysaccharide vaccine') { 
                        originalText('Pneumococcal polysaccharide vaccine') 
                    }
                }
            }
        }
    }
    medicationActivity{
        id(root:'261e94a0-95fb-4975-b5a5-c8e12c01c1bc')
        effectiveTime(make{
            ivlts{
                center(value:'1997')
            }
        })
        routeCode(code:'IM', displayName:<span class="code-quote">"Intramuscular injection"</span>)
        consumable {
            manufacturedProduct {
                manufacturedMaterial {
                    code(code:'09',
                            codeSystem:'2.16.840.1.113883.6.59',
                            displayName:'Tetanus and diphtheria toxoids') { 
                        originalText('Tetanus and diphtheria toxoids') 
                    }
                }
            }
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.6"</span>/&gt;
          &lt;code code=<span class="code-quote">"11369-6"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"History of immunizations"</span>/&gt;
          &lt;title&gt;Immunization&lt;/title&gt;
          &lt;text&gt;&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;substanceAdministration classCode=<span class="code-quote">"SBADM"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.24"</span>/&gt;
              &lt;id root=<span class="code-quote">"e6f1ba43-c0ed-4b9b-9f12-f435d8ad8f92"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;routeCode code=<span class="code-quote">"IM"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.112"</span> codeSystemName=<span class="code-quote">"RouteOfAdministration"</span> displayName=<span class="code-quote">"Intramuscular injection"</span>/&gt;
              &lt;consumable&gt;
                &lt;manufacturedProduct&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.53"</span>/&gt;
                  &lt;manufacturedMaterial&gt;
                    &lt;code code=<span class="code-quote">"88"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.59"</span> displayName=<span class="code-quote">"Influenza virus vaccine"</span>&gt;
                      &lt;originalText&gt;Influenza virus vaccine&lt;/originalText&gt;
                    &lt;/code&gt;
                  &lt;/manufacturedMaterial&gt;
                &lt;/manufacturedProduct&gt;
              &lt;/consumable&gt;
            &lt;/substanceAdministration&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;substanceAdministration classCode=<span class="code-quote">"SBADM"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.24"</span>/&gt;
              &lt;id root=<span class="code-quote">"115f0f70-1343-4938-b62f-631de9749a0a"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;routeCode code=<span class="code-quote">"IM"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.112"</span> codeSystemName=<span class="code-quote">"RouteOfAdministration"</span> displayName=<span class="code-quote">"Intramuscular injection"</span>/&gt;
              &lt;consumable&gt;
                &lt;manufacturedProduct&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.53"</span>/&gt;
                  &lt;manufacturedMaterial&gt;
                    &lt;code code=<span class="code-quote">"88"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.59"</span> displayName=<span class="code-quote">"Influenza virus vaccine"</span>&gt;
                      &lt;originalText&gt;Influenza virus vaccine&lt;/originalText&gt;
                    &lt;/code&gt;
                  &lt;/manufacturedMaterial&gt;
                &lt;/manufacturedProduct&gt;
              &lt;/consumable&gt;
            &lt;/substanceAdministration&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;substanceAdministration classCode=<span class="code-quote">"SBADM"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.24"</span>/&gt;
              &lt;id root=<span class="code-quote">"78598407-9f16-42d5-8ffd-09281a60fe33"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;routeCode code=<span class="code-quote">"IM"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.112"</span> codeSystemName=<span class="code-quote">"RouteOfAdministration"</span> displayName=<span class="code-quote">"Intramuscular injection"</span>/&gt;
              &lt;consumable&gt;
                &lt;manufacturedProduct&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.53"</span>/&gt;
                  &lt;manufacturedMaterial&gt;
                    &lt;code code=<span class="code-quote">"33"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.59"</span> displayName=<span class="code-quote">"Pneumococcal polysaccharide vaccine"</span>&gt;
                      &lt;originalText&gt;Pneumococcal polysaccharide vaccine&lt;/originalText&gt;
                    &lt;/code&gt;
                  &lt;/manufacturedMaterial&gt;
                &lt;/manufacturedProduct&gt;
              &lt;/consumable&gt;
            &lt;/substanceAdministration&gt;
          &lt;/entry&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
            &lt;substanceAdministration classCode=<span class="code-quote">"SBADM"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.24"</span>/&gt;
              &lt;id root=<span class="code-quote">"261e94a0-95fb-4975-b5a5-c8e12c01c1bc"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"active"</span>/&gt;
              &lt;effectiveTime/&gt;
              &lt;routeCode code=<span class="code-quote">"IM"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.112"</span> codeSystemName=<span class="code-quote">"RouteOfAdministration"</span> displayName=<span class="code-quote">"Intramuscular injection"</span>/&gt;
              &lt;consumable&gt;
                &lt;manufacturedProduct&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.53"</span>/&gt;
                  &lt;manufacturedMaterial&gt;
                    &lt;code code=<span class="code-quote">"09"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.59"</span> displayName=<span class="code-quote">"Tetanus and diphtheria toxoids"</span>&gt;
                      &lt;originalText&gt;Tetanus and diphtheria toxoids&lt;/originalText&gt;
                    &lt;/code&gt;
                  &lt;/manufacturedMaterial&gt;
                &lt;/manufacturedProduct&gt;
              &lt;/consumable&gt;
            &lt;/substanceAdministration&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;  
...
</pre>
</div></div>

<h4><a name="IPFreference-single-VitalSignssection"></a>Vital Signs section</h4>

<p>This section contains current and historically relevant vital signs, such as blood pressure, heart rate, respiratory rate, height, weight, body mass index, head circumference, crown-to-rump length, and pulse oximetry. The section may contain all vital signs for the period of time being summarized, but at a minimum should include notable vital signs such as the most recent, maximum and/or minimum, or both, baseline, or relevant trends.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>vitalSigns</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Vital Signs section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>vitalSignsOrganizer</tt> </td>
<td class="confluenceTd"> Organizer </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Container for observations </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>resultObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Related vital signs observation result </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Vital Signs Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// Chapter 3.12 Vital Signs
</span>vitalSigns{
    text('Patient Vital Signs')
    vitalSignsOrganizer(classCode:'CLUSTER'){
        id(root:'c6f88320-67ad-11db-bd13-0800200c9a66')
        code(code:'46680005', codeSystem:'2.16.840.1.113883.6.96', displayName:'Vital signs')
        statusCode(code:'completed')
        resultObservation{
            id(root:'c6f88321-67ad-11db-bd13-0800200c9a66')
            code(code:'50373000', codeSystem:'2.16.840.1.113883.6.96', displayName:'Body height')
            statusCode(code:'completed')
            value( make {
                pq(value:177.0, unit:'cm')
            })
        }
        resultObservation{
            id(root:'c6f88322-67ad-11db-bd13-0800200c9a66')
            code(code:'27113001', codeSystem:'2.16.840.1.113883.6.96', displayName:'Body weight')
            statusCode(code:'completed')
            effectiveTime(value:'19991114')
            value( make {
                pq('86 kg')
            })
        }
        resultObservation{
            id(root:'c6f88323-67ad-11db-bd13-0800200c9a66')
            code(code:'271649006', codeSystem:'2.16.840.1.113883.6.96', displayName:'Systolic BP')
            statusCode(code:'completed')
            effectiveTime(value:'19991114')
            value( make{
                pq(value:132.0, unit:'mm[Hg]')
            })
        }
        resultObservation{
            id(root:'c6f88324-67ad-11db-bd13-0800200c9a66')
            code(code:'271650006', codeSystem:'2.16.840.1.113883.6.96', displayName:'Diastolic BP')
            statusCode(code:'completed')
            effectiveTime(value:'19991114')
            value( make{
                pq(value:86.0, unit:'mm[Hg]')
            })
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.16"</span>/&gt;
          &lt;code code=<span class="code-quote">"8716-3"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Vital signs"</span>/&gt;
          &lt;title&gt;Vital signs&lt;/title&gt;
          &lt;text&gt;Patient Vital Signs&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;organizer classCode=<span class="code-quote">"CLUSTER"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.35"</span>/&gt;
              &lt;id root=<span class="code-quote">"c6f88320-67ad-11db-bd13-0800200c9a66"</span>/&gt;
              &lt;code code=<span class="code-quote">"46680005"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Vital signs"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.31"</span>/&gt;
                  &lt;id root=<span class="code-quote">"c6f88321-67ad-11db-bd13-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"50373000"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Body height"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"PQ"</span> unit=<span class="code-quote">"cm"</span> value=<span class="code-quote">"177.0"</span>/&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.31"</span>/&gt;
                  &lt;id root=<span class="code-quote">"c6f88322-67ad-11db-bd13-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"27113001"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Body weight"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime value=<span class="code-quote">"19991114"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"PQ"</span> unit=<span class="code-quote">"kg"</span> value=<span class="code-quote">"86.0"</span>/&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.31"</span>/&gt;
                  &lt;id root=<span class="code-quote">"c6f88323-67ad-11db-bd13-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"271649006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Systolic BP"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime value=<span class="code-quote">"19991114"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"PQ"</span> unit=<span class="code-quote">"mm[Hg]"</span> value=<span class="code-quote">"132.0"</span>/&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.31"</span>/&gt;
                  &lt;id root=<span class="code-quote">"c6f88324-67ad-11db-bd13-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"271650006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Diastolic BP"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime value=<span class="code-quote">"19991114"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"PQ"</span> unit=<span class="code-quote">"mm[Hg]"</span> value=<span class="code-quote">"86.0"</span>/&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
            &lt;/organizer&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;  
...
</pre>
</div></div>

<h4><a name="IPFreference-single-Resultssection"></a>Results section</h4>

<p>This section contains the results of observations generated by laboratories, imaging procedures, and other procedures. The scope includes hematology, chemistry, serology, virology, toxicology, microbiology, plain x-ray, ultrasound, CT, MRI, angiography, cardiac echo, nuclear medicine, pathology, and procedure observations. The section may contain all results for the period of time being summarized, but should include notable results such as abnormal values or relevant trends.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>results</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Results section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>resultOrganizer</tt> </td>
<td class="confluenceTd"> Organizer </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Container for result observations </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>resultObservation</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Related observation result </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Results Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Results (Chapter 3.13)
</span>results{
    text('Patient Observation Results')
    title('Other results')
    resultOrganizer(classCode:'BATTERY'){
        id(root:'7d5a02b0-67a4-11db-bd13-0800200c9a66')
        code(code:'43789009',
                codeSystem:'2.16.840.1.113883.6.96',
                displayName:'CBC WO DIFFERENTIAL')
        statusCode(code:'completed')
        effectiveTime(value:'200003231430')
        resultObservation{
            id(root:'107c2dc0-67a5-11db-bd13-0800200c9a66')
            code(code:'30313-1', codeSystem:'2.16.840.1.113883.6.1', displayName:'HGB')
            statusCode(code:'completed')
            effectiveTime(value:'200003231430')
            value(make {
                pq(value:13.2, unit:'g/dl')
            })
            interpretationCode(code:'N', codeSystem:'2.16.840.1.113883.5.83')
            referenceRange{
                observationRange{
                    text('M 13-18 g/dl; F 12-16 g/dl')
                }
            }
        }
        resultObservation{
            id(root:'8b3fa370-67a5-11db-bd13-0800200c9a66')
            code(code:'33765-9', codeSystem:'2.16.840.1.113883.6.1', displayName:'WBC')
            statusCode(code:'completed')
            value(make{
                pq(value:6.7, unit:'10+3/ul')
            })
            interpretationCode(code:'N', codeSystem:'2.16.840.1.113883.5.83')
            referenceRange{
                observationRange{
                    value( make {
                        ivlpq{
                            low(value:4.3, unit:'10+3/ul')
                            high(value:10.8, unit:'10+3/ul')
                        }
                    })
                }
            }
        }
    }
}
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.14"</span>/&gt;
          &lt;code code=<span class="code-quote">"30954-2"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Relevant diagnostic tests and/or laboratory data"</span>/&gt;
          &lt;title&gt;Other results&lt;/title&gt;
          &lt;text&gt;Patient Observation Results&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;organizer classCode=<span class="code-quote">"BATTERY"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.32"</span>/&gt;
              &lt;id root=<span class="code-quote">"7d5a02b0-67a4-11db-bd13-0800200c9a66"</span>/&gt;
              &lt;code code=<span class="code-quote">"43789009"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"CBC WO DIFFERENTIAL"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;effectiveTime value=<span class="code-quote">"200003231430"</span>/&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.31"</span>/&gt;
                  &lt;id root=<span class="code-quote">"107c2dc0-67a5-11db-bd13-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"30313-1"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> displayName=<span class="code-quote">"HGB"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;effectiveTime value=<span class="code-quote">"200003231430"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"PQ"</span> unit=<span class="code-quote">"g/dl"</span> value=<span class="code-quote">"13.2"</span>/&gt;
                  &lt;interpretationCode code=<span class="code-quote">"N"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.83"</span>/&gt;
                  &lt;referenceRange&gt;
                    &lt;observationRange&gt;
                      &lt;text&gt;M 13-18 g/dl; F 12-16 g/dl&lt;/text&gt;
                    &lt;/observationRange&gt;
                  &lt;/referenceRange&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
              &lt;component contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.31"</span>/&gt;
                  &lt;id root=<span class="code-quote">"8b3fa370-67a5-11db-bd13-0800200c9a66"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"33765-9"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> displayName=<span class="code-quote">"WBC"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"PQ"</span> unit=<span class="code-quote">"10+3/ul"</span> value=<span class="code-quote">"6.7"</span>/&gt;
                  &lt;interpretationCode code=<span class="code-quote">"N"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.83"</span>/&gt;
                  &lt;referenceRange&gt;
                    &lt;observationRange&gt;
                      &lt;value xsi:type=<span class="code-quote">"IVL_PQ"</span> unit=<span class="code-quote">"1"</span>&gt;
                        &lt;low unit=<span class="code-quote">"10+3/ul"</span> value=<span class="code-quote">"4.3"</span> inclusive=<span class="code-quote">"<span class="code-keyword">true</span>"</span>/&gt;
                        &lt;high unit=<span class="code-quote">"10+3/ul"</span> value=<span class="code-quote">"10.8"</span> inclusive=<span class="code-quote">"<span class="code-keyword">true</span>"</span>/&gt;
                      &lt;/value&gt;
                    &lt;/observationRange&gt;
                  &lt;/referenceRange&gt;
                &lt;/observation&gt;
              &lt;/component&gt;
            &lt;/organizer&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt; 
...
</pre>
</div></div>

<h4><a name="IPFreference-single-Proceduressection"></a>Procedures section</h4>

<p>This section defines all interventional, surgical, diagnostic, or therapeutic procedures or treatments pertinent to the patient historically at the time the document is generated.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>procedures</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Procedures section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>procedureActivity</tt> </td>
<td class="confluenceTd"> entry </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Procedures entry: <tt>procedureActivityAct</tt> | <tt>procedureActivityProcedure</tt> | <tt>procedureActivityObservation</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>procedureActivityAct</tt> | <tt>procedureActivityObservation</tt> | <tt>procedureActivityProcedure</tt> </td>
<td class="confluenceTd"> Act | Observation | Procedure </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Procedure activity instance may contain: Problem activities(see problemActReason), Problem observations(see ProblemObservationReason), Medication acticities, Age observation, result observations, patient instructions, product representations, encounter location. Refer to the CCD specification for details. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemActReason</tt> </td>
<td class="confluenceTd"> Act </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Indication or reason for the procedure targeting problem act </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>problemObservationReason</tt> </td>
<td class="confluenceTd"> Observation </td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Indication or reason for the procedure targeting problem observation </td>
</tr>
</tbody></table>


<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Procedures Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Procedures (Chapter 3.14)
</span>procedures{
    text('Patient Procedures')
    templateId(root:'2.16.840.1.113883.10.20.1.12')
    templateId(root:'1.3.6.1.4.1.19376.1.5.3.1.3.11',
            assigningAuthorityName:'IHE PCC')
    text{...}
    procedureActivity{
        procedureActivityProcedure{
            id(root:'e401f340-7be2-11db-9fe1-0800200c9a66')
            code(code:'52734007', codeSystem:'2.16.840.1.113883.6.96', displayName:'Total hip replacement'){
                originalText{ reference(value:'#Proc1') }
                qualifier{
                    name(code:'272741003', displayName:'Laterality')
                    value(code:'7771000', displayName:'Left')
                }
            }
            text('IHE Requires reference to go here instead of originalText of code.&lt;reference')
            statusCode('completed')
            effectiveTime('1998')
            performer{
                assignedEntity{
                    assignedPerson{ name('Procedure Performers Name') }<span class="code-comment">//assignedPerson
</span>                }
            }
            age {
                value(make { _int(57) }
                )
            }
            encounterLocation{
                id(root:'2.16.840.1.113883.19.5')
                playingEntity{ name('Very Good Health Clinic') }<span class="code-comment">//playingEntity 
</span>            }
            problemObservationReason{
                id(root:'9d3d416d-45ab-4da1-912f-4583e0632000')
                code(code:'ASSERTION', codeSystem:'2.16.840.1.113883.5.4')
                value(make{
                    cd(code:'233604007',
                    codeSystem:'2.16.840.1.113883.6.96',
                    displayName:'Pneumonia')
                })
                patientAwareness{
                    awarenessCode(code:'TEST', codeSystem:'2.16.840.1.113883.5.4')
                    participantRole{ 
                        id('996-756-495@2.16.840.1.113883.19.5')
                    }
                }
            }<span class="code-comment">//problem observation
</span>            productInstance{
                id(root:'03ca01b0-7be1-11db-9fe1-0800200c9a66')
                playingDevice{
                    code(code:'304120007', codeSystem:'2.16.840.1.113883.6.96', displayName:'Total hip replacement prosthesis')
                }
                scopingEntity{
                    id(root:'0abea950-5b40-4b7e-b8d9-2a5ea3ac5500')
                    desc('Good Health Prostheses Company')
                }
            }
            entryRelationship(typeCode:'REFR'){
                act(classCode:'ACT', moodCode:'EVN'){
                    templateId(root:'1.3.6.1.4.1.19376.1.5.3.1.4.4', assigningAuthorityName:'IHE PCC')
                    code(nullFlavor:'NA')
                    text{ reference(value:'PtrToSectionText') }<span class="code-comment">//text
</span>                    reference(typeCode:'REFR'){
                        externalDocument(classCode:'DOC', moodCode:'EVN'){ 
                            text('Location of Documentation -  URL or other') }
                    }
                }
            }
            informationSource{
                value(make{
                    st('Unknown')
                })
            }
        }
    }
}     
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.12"</span>/&gt;
          &lt;templateId assigningAuthorityName=<span class="code-quote">"IHE PCC"</span> root=<span class="code-quote">"1.3.6.1.4.1.19376.1.5.3.1.3.11"</span>/&gt;
          &lt;code code=<span class="code-quote">"47519-4"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"History of procedures"</span>/&gt;
          &lt;title&gt;Procedures&lt;/title&gt;
          &lt;text&gt;&lt;table border=<span class="code-quote">"1"</span> width=<span class="code-quote">"100%"</span>&gt;
              &lt;thead&gt;
                &lt;tr&gt;
                  &lt;th colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Procedure&lt;/th&gt;
                  &lt;th colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;Date&lt;/th&gt;
                &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;td colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;&lt;content ID=<span class="code-quote">"Proc1"</span>&gt;Total hip replacement, left&lt;/content&gt;&lt;/td&gt;
                  &lt;td colspan=<span class="code-quote">"1"</span> rowspan=<span class="code-quote">"1"</span>&gt;&lt;content&gt;1998&lt;/content&gt;&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;procedure classCode=<span class="code-quote">"PROC"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.29"</span>/&gt;
              &lt;id root=<span class="code-quote">"e401f340-7be2-11db-9fe1-0800200c9a66"</span>/&gt;
              &lt;code code=<span class="code-quote">"52734007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Total hip replacement"</span>&gt;
                &lt;originalText&gt;&lt;reference value=<span class="code-quote">"#Proc1"</span>/&gt;&lt;/originalText&gt;
                &lt;qualifier&gt;
                  &lt;name code=<span class="code-quote">"272741003"</span> displayName=<span class="code-quote">"Laterality"</span>/&gt;
                  &lt;value code=<span class="code-quote">"7771000"</span> displayName=<span class="code-quote">"Left"</span>/&gt;
                &lt;/qualifier&gt;
              &lt;/code&gt;
              &lt;text&gt;IHE Requires reference to go here instead of originalText of code.&amp;lt;reference&lt;/text&gt;
              &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
              &lt;effectiveTime value=<span class="code-quote">"1998"</span>/&gt;
              &lt;performer&gt;
                &lt;assignedEntity&gt;
                  &lt;assignedPerson&gt;
                    &lt;name&gt;Procedure Performers Name&lt;/name&gt;
                  &lt;/assignedPerson&gt;
                &lt;/assignedEntity&gt;
              &lt;/performer&gt;
              &lt;participant typeCode=<span class="code-quote">"LOC"</span>&gt;
                &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.45"</span>/&gt;
                &lt;participantRole classCode=<span class="code-quote">"SDLOC"</span>&gt;
                  &lt;id root=<span class="code-quote">"2.16.840.1.113883.19.5"</span>/&gt;
                  &lt;playingEntity classCode=<span class="code-quote">"PLC"</span>&gt;
                    &lt;name&gt;Very Good Health Clinic&lt;/name&gt;
                  &lt;/playingEntity&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
              &lt;participant typeCode=<span class="code-quote">"DEV"</span>&gt;
                &lt;participantRole classCode=<span class="code-quote">"MANU"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.52"</span>/&gt;
                  &lt;id root=<span class="code-quote">"03ca01b0-7be1-11db-9fe1-0800200c9a66"</span>/&gt;
                  &lt;playingDevice&gt;
                    &lt;code code=<span class="code-quote">"304120007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Total hip replacement prosthesis"</span>/&gt;
                  &lt;/playingDevice&gt;
                  &lt;scopingEntity&gt;
                    &lt;id root=<span class="code-quote">"0abea950-5b40-4b7e-b8d9-2a5ea3ac5500"</span>/&gt;
                    &lt;desc&gt;Good Health Prostheses Company&lt;/desc&gt;
                  &lt;/scopingEntity&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> inversionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"SUBJ"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"INT"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.38"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"397659008"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> codeSystemName=<span class="code-quote">"SNOMED CT"</span> displayName=<span class="code-quote">"Age"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"INT"</span> value=<span class="code-quote">"57"</span>/&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"RSON"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.28"</span>/&gt;
                  &lt;id root=<span class="code-quote">"9d3d416d-45ab-4da1-912f-4583e0632000"</span>/&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"ASSERTION"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"CD"</span> code=<span class="code-quote">"233604007"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Pneumonia"</span>/&gt;
                  &lt;participant typeCode=<span class="code-quote">"SBJ"</span>&gt;
                    &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.48"</span>/&gt;
                    &lt;awarenessCode code=<span class="code-quote">"TEST"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span>/&gt;
                    &lt;participantRole&gt;
                      &lt;id extension=<span class="code-quote">"996-756-495"</span> root=<span class="code-quote">"2.16.840.1.113883.19.5"</span>/&gt;
                    &lt;/participantRole&gt;
                  &lt;/participant&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"REFR"</span>&gt;
                &lt;act classCode=<span class="code-quote">"ACT"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;templateId assigningAuthorityName=<span class="code-quote">"IHE PCC"</span> root=<span class="code-quote">"1.3.6.1.4.1.19376.1.5.3.1.4.4"</span>/&gt;
                  &lt;code nullFlavor=<span class="code-quote">"NA"</span>/&gt;
                  &lt;text&gt;&lt;reference value=<span class="code-quote">"PtrToSectionText"</span>/&gt;&lt;/text&gt;
                  &lt;reference typeCode=<span class="code-quote">"REFR"</span>&gt;
                    &lt;externalDocument classCode=<span class="code-quote">"DOC"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                      &lt;text&gt;Location of Documentation -  URL or other&lt;/text&gt;
                    &lt;/externalDocument&gt;
                  &lt;/reference&gt;
                &lt;/act&gt;
              &lt;/entryRelationship&gt;
              &lt;entryRelationship contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"REFR"</span>&gt;
                &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
                  &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"48766-0"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Information source"</span>/&gt;
                  &lt;statusCode code=<span class="code-quote">"completed"</span>/&gt;
                  &lt;value xsi:type=<span class="code-quote">"ST"</span>&gt;Unknown&lt;/value&gt;
                &lt;/observation&gt;
              &lt;/entryRelationship&gt;
            &lt;/procedure&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt; 
...
</pre>
</div></div>

<h4><a name="IPFreference-single-Encounterssection"></a>Encounters section</h4>

<p>This section is used to list and describe any healthcare encounters pertinent to the patient's current health status or historical health history.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>encounters</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Encounters section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>encounterActivity</tt> </td>
<td class="confluenceTd"> Encounter </td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Encounter activity</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>encounterLocation</tt> </td>
<td class="confluenceTd"> ParticipantRole</td>
<td class="confluenceTd"> 0(1)..* </td>
<td class="confluenceTd"> Location participation </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Encounters Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">//CCD Encounters (Chpater 3.15)
</span>encounters {
    text('Encounter Location: Very Good Health Clinic')
    title('Encounters')
    encounterActivity{
        id(root:'2a620155-9d11-439e-92b3-5d9815ff4de8')
        code(code:'GENRL', codeSystem:'2.16.840.1.113883.5.4', displayName:'General'){
            originalText('Checkup Examination')
        }<span class="code-comment">//code
</span>        encounterLocation{
            id(root:'2.16.840.1.113883.19.5')
            playingEntity{
                name('Very Good Health Clinic')
            }<span class="code-comment">//playingEntity 
</span>        }
    }<span class="code-comment">//encounter        
</span>}  
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.3"</span>/&gt;
          &lt;code code=<span class="code-quote">"46240-8"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"History of encounters"</span>/&gt;
          &lt;title&gt;Encounters&lt;/title&gt;
          &lt;text&gt;Encounter Location: Very Good Health Clinic&lt;/text&gt;
          &lt;entry contextConductionInd=<span class="code-quote">"<span class="code-keyword">true</span>"</span> typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;encounter classCode=<span class="code-quote">"ENC"</span> moodCode=<span class="code-quote">"EVN"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.21"</span>/&gt;
              &lt;id root=<span class="code-quote">"2a620155-9d11-439e-92b3-5d9815ff4de8"</span>/&gt;
              &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"GENRL"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.5.4"</span> displayName=<span class="code-quote">"General"</span>&gt;
                &lt;originalText&gt;Checkup Examination&lt;/originalText&gt;
              &lt;/code&gt;
              &lt;participant typeCode=<span class="code-quote">"LOC"</span>&gt;
                &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.45"</span>/&gt;
                &lt;participantRole classCode=<span class="code-quote">"SDLOC"</span>&gt;
                  &lt;id root=<span class="code-quote">"2.16.840.1.113883.19.5"</span>/&gt;
                  &lt;playingEntity classCode=<span class="code-quote">"PLC"</span>&gt;
                    &lt;name&gt;Very Good Health Clinic&lt;/name&gt;
                  &lt;/playingEntity&gt;
                &lt;/participantRole&gt;
              &lt;/participant&gt;
            &lt;/encounter&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;  
...
</pre>
</div></div>

<h4><a name="IPFreference-single-PlanofCaresection"></a>Plan of Care section</h4>

<p>This section is used to list and describe any healthcare encounters pertinent to the patient's current health status or historical health history.</p>

<h5><a name="IPFreference-single-BuilderElements"></a>Builder Elements</h5>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Element</th>
<th class="confluenceTh"> CDA Type </th>
<th class="confluenceTh"> Cardinality </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>planOfCare</tt> </td>
<td class="confluenceTd"> Section </td>
<td class="confluenceTd"> 0(1) </td>
<td class="confluenceTd"> Plan of Care section </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>planOfCareActivity</tt> </td>
<td class="confluenceTd"> Entry</td>
<td class="confluenceTd"> 1..* </td>
<td class="confluenceTd"> Container for pending clinical events: Act, Encounter, Observation, Procedure, SubstanceAdministration, or Supply. </td>
</tr>
</tbody></table>

<h5><a name="IPFreference-single-Example"></a>Example</h5>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Plan of Care Section</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// CCD Plan Of Care (Chapter 3.16)
</span>planOfCare {
    text('Plan')
    text{
        ...
    }
    planOfCareActivity {
        observation(moodCode:'RQO') {
            id('9a6d1bac-17d3-4195-89a4-1121bc809b4a')
            code(code:'23426006', codeSystem:'2.16.840.1.113883.6.96', displayName:'Pulmonary function test')
            statusCode('<span class="code-keyword">new</span>')
            effectiveTime {
                center('20000421')
            }
        }
    }
}    
...
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Resulting CDA document part</b></div><div class="codeContent panelContent">
<pre class="code-java">...
  &lt;component&gt;
    &lt;structuredBody&gt;
      &lt;component&gt;
        &lt;section&gt;
          &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.10"</span>/&gt;
          &lt;code code=<span class="code-quote">"18776-5"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.1"</span> codeSystemName=<span class="code-quote">"LOINC"</span> displayName=<span class="code-quote">"Treatment Plan"</span>/&gt;
          &lt;title&gt;Plan&lt;/title&gt;
          &lt;text&gt;...&lt;/text&gt;
          &lt;entry typeCode=<span class="code-quote">"DRIV"</span>&gt;
            &lt;observation classCode=<span class="code-quote">"OBS"</span> moodCode=<span class="code-quote">"RQO"</span>&gt;
              &lt;templateId root=<span class="code-quote">"2.16.840.1.113883.10.20.1.25"</span>/&gt;
              &lt;id root=<span class="code-quote">"9a6d1bac-17d3-4195-89a4-1121bc809b4a"</span>/&gt;
              &lt;code xsi:type=<span class="code-quote">"CE"</span> code=<span class="code-quote">"23426006"</span> codeSystem=<span class="code-quote">"2.16.840.1.113883.6.96"</span> displayName=<span class="code-quote">"Pulmonary function test"</span>/&gt;
              &lt;statusCode code=<span class="code-quote">"<span class="code-keyword">new</span>"</span>/&gt;
              &lt;effectiveTime&gt;
                &lt;center value=<span class="code-quote">"20000421"</span>/&gt;
              &lt;/effectiveTime&gt;
            &lt;/observation&gt;
          &lt;/entry&gt;
        &lt;/section&gt;
      &lt;/component&gt;
    &lt;/structuredBody&gt;
  &lt;/component&gt;  
...
</pre>
</div></div>


<h1><a name="IPFreference-single-Flowmanagement"></a>Flow management</h1>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Sample application</b><br><p>For a flow management sample application refer to the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a>.</p></td></tr></tbody></table></div>

<h2><a name="IPFreference-single-Concept"></a>Concept</h2>

<p>The flow manager is a service that monitors and controls application-specific message flows. It stores each incoming message as a flow object in a database and updates the flow object as the message travels through the integration application. If the message was processed and has been successfully delivered to a destination system, an acknowledgement (ACK) is stored with that particular message flow. If the processing of a message has failed, a negative acknowledgement (NAK) is stored with that message flow.</p>

<p>The following figure shows a sample integration solution managed by a flow manager. There's a single entry point for a message and two possible exit points. An interceptor at the entry point initializes a flow object in the flow manager database. The flow object contains the original message. Interceptors at the exit points acknowledge (ACK) the delivery of the message to a destination. You may also want to configure interceptors at destinations that handle error or fault messages. These interceptors negativly acknowledge (NAK) the message flow (interceptor is shown as a red box).</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/flowmgr.JPG" align="absmiddle" border="0"></p>

<p>With the flow manager you can also replay messages. A replay re-submits the initially stored message. In order to avoid duplicate delivery of messages to destination systems you can install duplicate filters. These recognize replayed messages that have already been delivered to an external destination and filter them out. Duplicate filtering can be turned on and off at runtime via the JMX interface. An additional feature that will be supported in the future is registration for compensation events. If a processor wants to be notified if an error occurs it can register at the flow manager for compensation messages that allow the processor to undo certain actions. This feature is comparable to a <tt>&lt;compensate&gt;</tt> action in <a href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbpel" rel="nofollow">BPEL</a>.</p>

<p>Message replays can be useful if a destination system is unavailable for a longer time than covered by a redelivery policy of internal message buffers. In this case the buffer gives up redelivery and leaves the administrator with the duty to run a manual redelivery (replay) once the destination system is available again. Note that a message that has already been acknowledged will by default not be re-delivered to the destination system. This allows for non-idempotent message receivers. Only NAKed  messages or unacknowledged message flows can be sent to a destination system during a replay, otherwise they are filtered out. However, the duplicate filtering functionality can be turned on and off for each application individually.</p>

<p>The flow manager can also store string representations of messages that enter and leave an integration solution. These string representations are rendered at the flow interceptors. Application developers can provide custom renderers if needed, i.e. message rendering can be customized when a message flow is initialized, acknowledged or negatively acknowledged.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/flowmanager_rendering.jpg" align="absmiddle" border="0"></p>

<p>Stored string representations of inbound- and outbound messages (also called incoming- and outgoing messages) allow administrators and auditors to keep track which messages entered and left the system. These string representations can be visualized either via a generic JMX client or via the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a>. Also, you can perform fulltext searches based on the string representations of messages. Messages can also be encrypted in the database and still be searched via fulltext message searches.</p>

<h2><a name="IPFreference-single-JMXinterface"></a>JMX interface</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Rich flow management client</b><br><p>The IPF flow manager exposes its functionality over a JMX interface. You can use any JMX client to work with the flow manager. This is shown here using the <a href="http://java.sun.com/javase/6/docs/technotes/guides/management/jconsole.html" rel="nofollow">JConsole</a> from the Java SDK 6. Alternatively, you can use a rich flow management client that is based on Eclipse RCP technology. You can find details about it in the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager#IPFManager-Flowmanagementclient">IPF Manager</a> section of the reference manual. The <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a> provides a generic <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager#IPFManager-JMXclient">JMX client</a> as well.</p></td></tr></tbody></table></div>

<p>The following figure shows the flow manager JMX interface on the <a href="http://java.sun.com/javase/6/docs/technotes/guides/management/jconsole.html" rel="nofollow">JConsole</a> that is delivered with the Java SDK 6. In order to use the flow manager with the JConsole you must put the <tt>commons-flow-&lt;version&gt;.jar</tt> file on its classpath. This is explained in section <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JConsoleextension">JConsole extension</a>. You can find the <tt>FlowManager</tt> MBean under the <tt>org.openehealth.ipf/service</tt> folder on the <tt>MBeans</tt> tab.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fm-jmx-1.JPG" align="absmiddle" border="0"></p>

<p>Via the <tt>FlowManager</tt> JMX interface you can:</p>

<ul>
	<li>Search for message flows with a given identifier, status, time-span or content (fulltext search).</li>
	<li>Replay message flows with a given identifier, status or time-span.</li>
	<li>Display flow properties and message contents (inbound, outbound)</li>
</ul>


<p>Time-spans can be given in units of milliseconds (no symbol), seconds (s), minutes (m), hours (h) and days (d). Examples:</p>

<ul>
	<li>2000 = 2000 milliseconds</li>
	<li>4s = four seconds</li>
	<li>3m = three minutes</li>
	<li>1h = one hour</li>
	<li>1d = one day</li>
</ul>


<p>For example, when clicking the <tt>findLastFlows</tt> button with an argument of <tt>3m</tt> the flow manager displays all message flows of the last 3 minutes. By default the upper value of the time-span is the current point in time. It can also be be set to any fixed point in time (see below). Here's a snippet from the result list:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fm-jmx-2.JPG" align="absmiddle" border="0"></p>

<p>The latest flow is at the top of the result list. In our example, this flow has the flow identifier 9. For each message flow the following properties are displayed:</p>

<p><a name="IPFreference-single-flowProperties"></a></p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Flow property </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>overall status</tt> </td>
<td class="confluenceTd"> <tt>CLEAN</tt> or <tt>ERROR</tt>. If a flow has been negativly acknowledged at least once it has the overall state <tt>ERROR</tt>, otherwise <tt>CLEAN</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>application</tt> </td>
<td class="confluenceTd"> Name of the integration application that processes the message. Flow management operations are scoped by application name. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>create time</tt> </td>
<td class="confluenceTd"> Time when the message flow was created. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>replay time</tt> </td>
<td class="confluenceTd"> Time when the message flow was last replayed. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>replay count</tt> </td>
<td class="confluenceTd"> Number of times a message flow was replayed. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>replayable</tt> </td>
<td class="confluenceTd"> Whether or not the message flow can be replayed. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>ACK count (expected)</tt> </td>
<td class="confluenceTd"> The expected number of acknowledgements in case of successful message processing. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>ACK count (actual)</tt> </td>
<td class="confluenceTd"> The actual number of acknowledgements. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>NAK count</tt> </td>
<td class="confluenceTd"> The actual number of negative acknowledgements. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>text</tt> </td>
<td class="confluenceTd"> String representation of the message that caused the flow creation. Only displayed if operation <tt>findFlow</tt> with parameter <tt>includeText</tt> is set to <tt>true</tt>. </td>
</tr>
</tbody></table>

<p>Flow parts give information about a message's copy or split history, i.e. if the message has been copied during a multicast operation or has been split using a splitter. If a message only has a single flow part then there was no split or multicast operation. Flow parts are created or updated during an ACK or NAK.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fm-jmx-3.JPG" align="absmiddle" border="0"></p>

<p>For each flow part the following properties are displayed:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Flow part property </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>status</tt> </td>
<td class="confluenceTd"> <tt>CLEAN</tt> (after an ACK) or <tt>ERROR</tt> (after a NAK). </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>flow duration</tt> </td>
<td class="confluenceTd"> Duration in milliseconds the message (represented by this flow part) needed from entering the message processing route until
<ul>
	<li>successful delivery to its final destination or</li>
	<li>processing by an error handler in case of a failure</li>
</ul>
</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>contribution time</tt> </td>
<td class="confluenceTd"> The time stamp when this flow part has been ACKed or NAKed. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>filter time</tt> </td>
<td class="confluenceTd"> The time stamp when this flow part was filtered during a replay. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>contribution count</tt> </td>
<td class="confluenceTd"> Number of times this flow part has been ACKed or NAKed. Can be greater than one in case of redeliveries. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>filter count</tt> </td>
<td class="confluenceTd"> Number of times a message has been filtered. Can be greater than zero in case of redeliveries. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>text</tt> </td>
<td class="confluenceTd"> String representation of the ACKed or NAKed message represented by this flow part. </td>
</tr>
</tbody></table>

<p>For each flow part the flow <tt>path</tt> is shown as well. If a message has not been split or multicast to more than one recipient the path will always be <tt>0</tt>. If a message is, for example, split into two parts their paths will be <tt>0.0</tt> and <tt>0.1</tt>. If the second message is again split into two parts then you finally end up with three messages with paths <tt>0.0</tt>, <tt>0.1.0</tt> and <tt>0.1.1</tt>. The next figure shows the JMX attributes of the flow manager.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fm-jmx-4.JPG" align="absmiddle" border="0"></p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Attribute </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>UpperTimeLimit</tt> </td>
<td class="confluenceTd"> Should be set if you don't want time-span values to be relative to the current time but instead to a fixed point in time (time-spans are entered by the user for flow searches and flow replay operations). For example, if you want to find all flows that have been NAKed between 1:51:25pm and 2:51:25pm on 28th Nov. 2008 then you enter the upper value of the time-span into to <tt>UpperTimeLimit</tt> field and use <tt>1h</tt> (1 hour) as time-span argument for the <tt>findLastErrorFlows</tt> operation. With the <tt>setUpperTimeLimitToCurrentTime</tt> operation you can create an entry in the <tt>UpperTimeLimit</tt> field that represents the point in time when you invoked the operation i.e. pressed the button. If you always want to have the current time for the upper time limit then leave the <tt>UpperTimeLimit</tt> field blank. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Application</tt> </td>
<td class="confluenceTd"> The name of the application an administrator currently wants to monitor. JMX operations for different <tt>Application</tt> values will give different results. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>EnableFiltering</tt> </td>
<td class="confluenceTd"> Controls whether duplicate filters are enabled or disabled. Setting <tt>EnableFiltering</tt> to <tt>false</tt> can be helpful for testing purposes. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>EnableCleanup</tt> </td>
<td class="confluenceTd"> Controls whether a flow shall be cleaned up if the number of expected acknowledgements are reached. Cleanup means that the incoming message is removed from the flow object in the database. This saves disk space and still allows clients to retrieve the flow history. However, a replay of cleaned-up flows is not possible any more because this requires the initial message. <tt>EnableCleanup</tt> is set to <tt>false</tt> by default. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>MaxFlows</tt> </td>
<td class="confluenceTd"> Limits the size of result sets returned by flow finder operations. By default the maximum number of flows returned is 100. If a finder operation finds more than 100 flows in the database then only the 100 most recent flows will be shown. To return all flows matching certain criteria leave the <tt>maxFlows</tt> field blank. </td>
</tr>
</tbody></table>

<p><tt>EnableCleanup</tt> and <tt>EnableFiltering</tt> settings are persisted by the flow manager in context of a certain <tt>Application</tt> value.</p>

<h3><a name="IPFreference-single-Messagecontent"></a>Message content</h3>

<p>The following JMX operation are related to message content of fulltext searches:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Operation </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>findFlowMessageText(identifier)</tt> </td>
<td class="confluenceTd"> Returns the rendered message content of the inbound message of flow identified by <tt>identifier</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>findFlowPartMessageText(identifier, flowPath)</tt> </td>
<td class="confluenceTd"> Returns the rendered message content of the outbound message of flow part identified by <tt>identifier</tt> and path <tt>flowPath</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>findFlow(identifier, includeText)</tt> </td>
<td class="confluenceTd"> Returns the flow object identified by <tt>identifier</tt>. If <tt>includeText</tt> is set to <tt>true</tt> the <tt>text</tt> attributes of the flow object and its parts contain the rendered messages (if stored in the database). If there's no rendered message in the database or the flow object is returned from another operation then <tt>N/A</tt> will be displayed for the <tt>text</tt> attribute. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>findLastFlowsWithMessageText(timespan, searchExpression)</tt> </td>
<td class="confluenceTd"> Returns a list of flows within <tt>timespan</tt> that match the fulltext <tt>searchExpression</tt>. Leaving <tt>searchExpression</tt> empty means 'any content'. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>findLastErrorFlowsWithMessageText(timespan, searchExpression)</tt> </td>
<td class="confluenceTd"> Returns a list of flows within <tt>timespan</tt> that have been negatively acknowledged and that match the fulltext <tt>searchExpression</tt>. Leaving <tt>searchExpression</tt> empty means 'any content'. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>findLastUnackFlowsWithMessageText(timespan, searchExpression)</tt> </td>
<td class="confluenceTd"> Returns a list of flows within <tt>timespan</tt> that have not been acknowledged and that match the fulltext <tt>searchExpression</tt>. Leaving <tt>searchExpression</tt> empty means 'any content'. </td>
</tr>
</tbody></table>

<p>Here's an example from the <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a>. We want to see the inbound- and outbound message content of flow with identifier <tt>20037</tt>. The inbound message content can be obtained via <tt>findFlowMessageText(20037)</tt>. The outbound message content (i.e. the transformation result) can be obtained via <tt>findFlowMessageText(20037, 0)</tt>. Since there is only one flow path through the reference application the <tt>flowPath</tt> argument is <tt>0</tt>.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fulltext-1.PNG" align="absmiddle" border="0"></p>

<p>The invocation result of <tt>findFlowMessageText(20037)</tt> is:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fulltext-2.PNG" align="absmiddle" border="0"></p>

<p>The invocation result of <tt>findFlowPartMessageText(20037, 0)</tt> is:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fulltext-3.PNG" align="absmiddle" border="0"></p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Search and view message content with IPF Manager</b><br><p>For searching and displaying message content via a rich user interface refer to the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a> documentation.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-JConsoleextension"></a>JConsole extension</h3>

<p>JConsole requires the <tt>commons-flow-&lt;version&gt;.jar</tt> on its classpath because the flow manager uses data transfer objects (DTOs) to communicate flow data to JMX clients. The <tt>version</tt> placeholder must be replaced with the IPF version you want to use. Let's say we use version IPF <tt>1.5.0</tt>. Copy <tt>commons-flow-1.5.0.jar</tt> to the <tt>bin</tt> folder of your Java SDK 6 installation. On Windows, also create a <tt>flowmgr-console.bat</tt> file with the following content in that folder.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>flowmgr-console.bat</b></div><div class="codeContent panelContent">
<pre class="code-java">@echo off

rem --------------------------------------------------------
rem  Start JConsole with flow manager jar containing DTOs
rem --------------------------------------------------------
jconsole -J-Djava.class.path=../lib/jconsole.jar;../lib/tools.jar;commons-flow-1.5.0.jar
</pre>
</div></div>

<p><a name="IPFreference-single-flowconfiguration"></a></p>

<h2><a name="IPFreference-single-Configuration"></a>Configuration</h2>

<p>The flow manager is made up of two components.</p>

<ul>
	<li>The Camel-independent <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Architecture#IPFArchitecture-Platformcorecomponents"><tt>commons-flow</tt></a> component that implements the flow management services.</li>
	<li>The Camel-dependent <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Architecture#IPFArchitecture-Platformcorecomponents"><tt>platform-camel-flow</tt></a> component that integrates flow management services into Camel routes. This component also implements the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-flowDSLextensions">flow management DSL</a>.</li>
</ul>


<p>By default, the flow manager uses <a href="http://www.hibernate.org/" rel="nofollow">Hibernate</a> to store flow data and messages in a <a href="http://db.apache.org/derby/" rel="nofollow">Derby</a> database. Oracle has been tested as well. Usage of other databases should be possible by replacing the JDBC driver but this has not been tested yet. For storing fulltext indices and running fulltext searches the flow manager uses <a href="http://lucene.apache.org/" rel="nofollow">Lucene</a> and <a href="http://www.hibernate.org/410.html" rel="nofollow">Hibernate Search</a>. Encryption of rendered messages is done with the <a href="http://www.jasypt.org/" rel="nofollow">Jasypt</a> crypto library. Here's an example how to configure <tt>commons-flow</tt> and <tt>lplatform-camel-flow</tt> within a Spring application context XML file (it was taken from the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a>).</p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Configuration files created by archetypes</b><br><p>If you use the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">archetypes</a> <tt>ipf-archetype-default</tt> and <tt>ipf-archetype-cluster</tt> for creating an IPF application then all required flow management configuration files will be created for you.</p></td></tr></tbody></table></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-flowmgr.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:ctx</span>=<span class="code-quote">"http://www.springframework.org/schema/context"</span>
       <span class="code-keyword">xmlns:tx</span>=<span class="code-quote">"http://www.springframework.org/schema/tx"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"&gt;

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Declarative Transaction Management                               --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  <span class="code-tag">&lt;tx:annotation-driven transaction-manager=<span class="code-quote">"hibernateTransactionManager"</span>/&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Flow Manager                                                      --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  &lt;bean id=<span class="code-quote">"flowManager"</span>
    class=<span class="code-quote">"org.openehealth.ipf.platform.camel.flow.PlatformFlowManager"</span>&gt;
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Flow Processors (bean definition optional since IPF 1.6.0)        --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean scope=<span class="code-quote">"prototype"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.flow.process.FlowBeginProcessor"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"messageRenderer"</span> ref=<span class="code-quote">"messageRenderer"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean scope=<span class="code-quote">"prototype"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.flow.process.FlowEndProcessor"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"messageRenderer"</span> ref=<span class="code-quote">"messageRenderer"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean scope=<span class="code-quote">"prototype"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.flow.process.FlowErrorProcessor"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"messageRenderer"</span> ref=<span class="code-quote">"messageRenderer"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Dedupe (bean definition optional since IPF 1.6.0)                 --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean scope=<span class="code-quote">"prototype"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.flow.dedupe.Dedupe"</span> /&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Repositories                                                     --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  &lt;bean id=<span class="code-quote">"sequenceRepository"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.flow.repository.SequenceRepositoryImpl"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"hibernateTemplate"</span> ref=<span class="code-quote">"hibernateTemplate"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"flowRepository"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.flow.repository.FlowRepositoryImpl"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"hibernateTemplate"</span> ref=<span class="code-quote">"hibernateTemplate"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"configRepository"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.flow.repository.ConfigRepositoryImpl"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"hibernateTemplate"</span> ref=<span class="code-quote">"hibernateTemplate"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Hibernate Setup                                                  --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"hibernateSessionFactory"</span> class=<span class="code-quote">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"dataSource"</span> ref=<span class="code-quote">"flowDataSource"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"configLocation"</span> value=<span class="code-quote">"/hibernate-flow.xml"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"configurationClass"</span> value=<span class="code-quote">"org.hibernate.cfg.AnnotationConfiguration"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"hibernateProperties"</span>&gt;</span>
      <span class="code-tag">&lt;props&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.dialect"</span>&gt;</span>org.openehealth.ipf.commons.flow.derby.DerbyDialect<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.show_sql"</span>&gt;</span>false<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.format_sql"</span>&gt;</span>false<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.search.autoregister_listeners"</span>&gt;</span>false<span class="code-tag">&lt;/prop&gt;</span>
        &lt;!--
            THESE SETTINGS ARE PRELIMINARY. CLUSTER-SUPPORT FOR LUCENE INDEX TO FOLLOW.
         --&gt;
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.search.default.directory_provider"</span>&gt;</span>org.hibernate.search.store.FSDirectoryProvider<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.search.default.indexBase"</span>&gt;</span>./lucene<span class="code-tag">&lt;/prop&gt;</span>
      <span class="code-tag">&lt;/props&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
    &lt;!--
         Enables rendered message encryption and full text indexing:
         * To use rendering without both encryption and full text indexing,
           delete the 'eventListeners' property.
         * To use rendering with encryption only, delete the
           post-insert, post-update and post-delete entries.
         * To use rendering with full text indexing only, delete the bean
           references to textDecryptorEventListener in the post-insert and
           post-update event listeners. Delete the pre-update, pre-insert
           and post-load entries as well.
     --&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"eventListeners"</span>&gt;</span>
      <span class="code-tag">&lt;map&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"pre-update"</span> value-ref=<span class="code-quote">"textEncryptorEventListener"</span>/&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"post-update"</span>&gt;</span>
          <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"textDecryptorEventListener"</span>/&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"textIndexEventListener"</span>/&gt;</span>
          <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/entry&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"pre-insert"</span> value-ref=<span class="code-quote">"textEncryptorEventListener"</span>/&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"post-insert"</span>&gt;</span>
          <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"textDecryptorEventListener"</span>/&gt;</span>
            <span class="code-tag">&lt;ref bean=<span class="code-quote">"textIndexEventListener"</span>/&gt;</span>
          <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/entry&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"post-delete"</span> value-ref=<span class="code-quote">"textIndexEventListener"</span>/&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"post-load"</span> value-ref=<span class="code-quote">"textDecryptorEventListener"</span>/&gt;</span>
      <span class="code-tag">&lt;/map&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"hibernateTemplate"</span>
    class=<span class="code-quote">"org.springframework.orm.hibernate3.HibernateTemplate"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"sessionFactory"</span> ref=<span class="code-quote">"hibernateSessionFactory"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"hibernateTransactionManager"</span>
    class=<span class="code-quote">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"sessionFactory"</span> ref=<span class="code-quote">"hibernateSessionFactory"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Datasource Setup                                                 --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"flowDataSource"</span> class=<span class="code-quote">"org.apache.commons.dbcp.BasicDataSource"</span> destroy-method=<span class="code-quote">"close"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"driverClassName"</span> value=<span class="code-quote">"org.apache.derby.jdbc.ClientDriver"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"url"</span> value=<span class="code-quote">"jdbc:derby://localhost:1527/flowmgr;create=true"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"defaultAutoCommit"</span> value=<span class="code-quote">"false"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"initialSize"</span> value=<span class="code-quote">"10"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"maxActive"</span> value=<span class="code-quote">"50"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;!--&lt;bean id=<span class="code-quote">"flowDataSource"</span> class=<span class="code-quote">"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"databaseName"</span> value=<span class="code-quote">"flowmgr"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"createDatabase"</span> value=<span class="code-quote">"create"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>--&gt;

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  JMX Setup                                                         --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean class=<span class="code-quote">"org.springframework.jmx.export.MBeanExporter"</span> lazy-init=<span class="code-quote">"false"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"autodetect"</span> value=<span class="code-quote">"false"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"assembler"</span> ref=<span class="code-quote">"assembler"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"namingStrategy"</span> ref=<span class="code-quote">"namingStrategy"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"beans"</span>&gt;</span>
      <span class="code-tag">&lt;map&gt;</span>
        &lt;entry
            key=<span class="code-quote">"org.openehealth.ipf.platform:type=service,name=FlowManager"</span>
            value-ref=<span class="code-quote">"flowManagerMBean"</span> /&gt;
      <span class="code-tag">&lt;/map&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"flowManagerMBean"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.flow.jmx.FlowManagerMBean"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"application"</span> value=<span class="code-quote">"tutorial"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  JMX Annotation Support                                           --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  &lt;bean id=<span class="code-quote">"jmxAttributeSource"</span>
      class=<span class="code-quote">"org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"</span>/&gt;

  &lt;bean id=<span class="code-quote">"assembler"</span>
      class=<span class="code-quote">"org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"attributeSource"</span> ref=<span class="code-quote">"jmxAttributeSource"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"namingStrategy"</span>
      class=<span class="code-quote">"org.springframework.jmx.export.naming.MetadataNamingStrategy"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"attributeSource"</span> ref=<span class="code-quote">"jmxAttributeSource"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Encryption setup                                                 --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"stringEncryptor"</span> class=<span class="code-quote">"org.jasypt.encryption.pbe.StandardPBEStringEncryptor"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"password"</span>&gt;</span>
      <span class="code-tag">&lt;value&gt;</span>test_password<span class="code-tag">&lt;/value&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"textEncryptorEventListener"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.flow.hibernate.RenderedMessageEncryptEventListener"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"stringEncryptor"</span> ref=<span class="code-quote">"stringEncryptor"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"textDecryptorEventListener"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.flow.hibernate.RenderedMessageDecryptEventListener"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"stringEncryptor"</span> ref=<span class="code-quote">"stringEncryptor"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Fulltext indexing/search setup                                   --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"textIndexEventListener"</span> class=<span class="code-quote">"org.hibernate.search.event.FullTextIndexEventListener"</span>/&gt;</span>
  <span class="code-tag">&lt;bean id=<span class="code-quote">"flowSearchCallback"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.flow.repository.search.DefaultSearchCallback"</span> /&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Message renderer                                                  --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  &lt;bean id=<span class="code-quote">"messageRenderer"</span>
    class=<span class="code-quote">"org.openehealth.ipf.platform.camel.flow.render.SimpleMessageRenderer"</span>&gt;
  <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>The beans contained in this configuration files have been grouped into sections. These are further explained in the following table.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Section </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>Declarative Transaction Management</tt> </td>
<td class="confluenceTd"> For transaction management we use Spring's transaction management infrastructure and a Hibernate transaction manager (see config section <tt>Hibernate Setup</tt>). Transaction boundaries are defined with <tt>@Transactional</tt> annotations on the <tt>FlowManager</tt> interface. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Flow Manager</tt> </td>
<td class="confluenceTd"> The Camel-specific flow manager implementation provided by the <tt>platform-camel-flow</tt> component. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Flow Processors</tt> </td>
<td class="confluenceTd"> This section defines the interceptors that create, acknowledge and negatively acknowledge flows in the flow manager database. These beans have <tt>prototype</tt> scope because several instances of a certain interceptor type can be configured differently in a route builder. These interceptors are injected a <tt>FlowManager</tt> instance and a <tt>CamelContext</tt> either via auto-wiring (as in our example) or explicitly using setters. You can also inject message renderers (see below) via explicit setters as in our example. All instances created from a certain prototype share the injected message renderer. If you want to configure message renderers for individual instances you can do so via the flow management <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-flowDSLextensions">DSL extensions</a>. As of IPF 1.6.0 definition of flow processor beans is optional. They're created by flow DSL model classes if flow processor bean definitions are omitted. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Dedupe</tt> </td>
<td class="confluenceTd"> A <tt>Predicate</tt> implementation used in combination with a Camel filter to filter out flow duplicates. As of IPF 1.6.0 definition of flow dedupe is optional. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Repositories</tt> </td>
<td class="confluenceTd"> This section defines the data access objects (DAOs) for flows, configrations and sequence numbers. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Hibernate Setup</tt> </td>
<td class="confluenceTd"> This section defines Hibernate-specific beans. The <tt>hibernateSessionFactory</tt> bean is configured to use a Derby-specific <tt>DataSource</tt> and a mapping configuration based on annotations on persistent domain objects. The referenced <tt>hibernate-flow.xml</tt> configuration file is contained in the <tt>commons-flow</tt> component and needs not be created by the application developer. The <tt>hibernateProperties</tt> contain settings for the Derby database and the Lucene index. The <tt>eventListeners</tt> property configures event listeners for fulltext indexing and encryption of rendered messages. The <tt>hibernateTemplate</tt> is required by the data access objects defined in the <tt>Repositories</tt> section. The <tt>hibernateTransactionManager</tt> bean is the local database transaction manager used by Spring's transaction management infrastructure. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Datasource Setup</tt> </td>
<td class="confluenceTd"> Defines the <tt>DataSource</tt> to use for the <tt>hibernateSessionFactory</tt>. Here we use a data source implementation that connects to a standalone Derby server. If you want to start an embedded Derby database (which makes sense for single-node deployments) use the second data source bean which is commented out in our example. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>JMX Setup</tt> </td>
<td class="confluenceTd"> This section sets up the flow manager MBean and the MBean exporter. The MBean exporter is configured to use only the <tt>flowManagerMBean</tt> instead of scanning all beans in the application context. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>JMX Annotation Support</tt> </td>
<td class="confluenceTd"> This section sets up the required infrastructure for processing JMX annotations on the <tt>FlowManagerMBean</tt> class. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Encryption setup</tt> </td>
<td class="confluenceTd"> Defines the Hibernate event listeners for encryption and decryption of stored messages. These listeners use a password-based encryptor. The password used for crypto operations is set via the <tt>password</tt> property of the <tt>stringEncryptor</tt> bean. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Fulltext indexing/search setup</tt> </td>
<td class="confluenceTd"> Defines the Hibernate event listener for fulltext indexing (<tt>textIndexEventListener</tt> bean) and a <tt>flowSearchCallback</tt> bean that is auto-injected into the <tt>flowRepository</tt> bean. The <tt>flowSearchCallback</tt> bean is required to perform fulltext searches and can be customized via its <tt>inboundTextAnalyzer</tt> and <tt>outboundTextAnalyzer</tt> properties. The type of these properties is <tt>org.apache.lucene.analysis.Analyzer</tt> and their default values <tt>org.apache.lucene.analysis.standard.StandardAnalyzer</tt> instances. You might want to change these property values if you want to have different analyzers for inbound and outbound message text analysis. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>Message renderer</tt> </td>
<td class="confluenceTd"> Defines one or more message renderer beans. These are either directly injected into flow interceptors or referenced via the flow management <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-flowDSLextensions">DSL extensions</a>. </td>
</tr>
</tbody></table>

<p>Message renderers must implement the <tt>org.openehealth.ipf.platform.camel.flow.PlatformMessageRenderer</tt> interface. IPF provides a trivial message renderer implementation (<tt>org.openehealth.ipf.platform.camel.flow.render.SimpleMessageRenderer</tt>) that is also used in the <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a>. It simply creates a string representation from the in-message body of a Camel exchange.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SimpleMessageRenderer.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.ipf.platform.camel.flow.render;

<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.flow.PlatformMessage;
<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.flow.PlatformMessageRenderer;

<span class="code-keyword">public</span> class SimpleMessageRenderer <span class="code-keyword">implements</span> PlatformMessageRenderer {

    @Override
    <span class="code-keyword">public</span> <span class="code-object">String</span> render(PlatformMessage message) {
        <span class="code-keyword">return</span> message.getExchange().getIn().getBody(<span class="code-object">String</span>.class);
    }

}
</pre>
</div></div>

<p>Clients must only use the following interfaces or classes to interact with the flow manager.</p>

<ul>
	<li><tt>org.openehealth.ipf.commons.flow.FlowManager</tt> interface for Java clients.</li>
	<li><tt>org.openehealth.ipf.commons.flow.jmx.FlowManagerMBean</tt> for JMX clients.</li>
	<li>A RESTful HTTP service interface is currently work in progress.</li>
</ul>


<h3><a name="IPFreference-single-Derbydatabase"></a>Derby database</h3>

<p>Usage of <a href="http://db.apache.org/derby/" rel="nofollow">Derby</a> for persisting flow management information is described in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-flowconfiguration">previous section</a>.</p>

<h3><a name="IPFreference-single-OracleDatabase"></a>Oracle Database</h3>

<p>This section describes the configuration steps necessary to run the flow manager with an Oracle database. We tested the configuration with an installation of Oracle Database 10g Enterprise Edition Release 10.2.0.3.0. Please note that the <tt>ojdbc</tt> jar file can not be downloaded directly from a central Maven repository because its license does not permit to be redistributed by anyone but the vendor. Therefore the jar file should be installed manually into your local Maven repository. Since there are differences between the e.g. <tt>ojdbc14.jar</tt> for Oracle 10.2.0.3 and 10.2.0.4, it is probably a good way to reference the jars like this:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;properties&gt;</span>
    <span class="code-tag">&lt;oracle-rdbms-version&gt;</span>...<span class="code-tag">&lt;/oracle-rdbms-version&gt;</span>
<span class="code-tag">&lt;/properties&gt;</span>

<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>com.oracle<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>ojdbc14<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${oracle-rdbms-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>From the oracle download site you can pick the ojdbc driver you need.</p>

<p><a href="http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html" rel="nofollow">http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html</a></p>

<p>If you don't know which oracle edition/release your system is running on, it could be easily found out by the following SQL statement:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">SELECT * from v$version;
</pre>
</div></div>

<p>The output may look like this:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/fm-oracle-1.JPG" align="absmiddle" border="0"></p>

<p>After downloading the file manually, for the sake of the consistency of your maven repository you should rename this file like we did in our example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">Win: ren ojdbc14.jar ojdbc14-10.2.0.3.jar
Linux: mv ojdbc14.jar ojdbc14-10.2.0.3.jar
</pre>
</div></div>

<p>and then install it into you maven cache using the command:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.3 -Dpackaging=jar -Dfile=&lt;path-to-drivers-folder&gt;/ojdbc14-10.2.0.3.jar
</pre>
</div></div>

<p>If the maven task was successful you will be able now to reference this driver from your pom.xml in a following way:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">&lt;dependency&gt;
    &lt;groupId&gt;com.oracle&lt;/groupId&gt;
    &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;
    &lt;version&gt;10.2.0.3&lt;/version&gt;
&lt;/dependency&gt;
</pre>
</div></div>

<p>For Oracle 11g releases you should use the <tt>ojdbc5.jar</tt> or <tt>ojdbc6.jar</tt>. Additionally you will need the dependencies to</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>commons-dbcp<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>commons-dbcp<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${commons-dbcp-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>Prerequisites:</p>

<p>To provide the correlating DB schema/user the following statements should be executed on your Oracle instance. The user with the sufficient privileges should run these two statements:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">CREATE USER platform IDENTIFIED BY &lt;your_password&gt; DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp;
GRANT connect, resource TO platform IDENTIFIED BY &lt;your_password&gt;;
</pre>
</div></div>

<p>Here are the Oracle-specific bean definitions in the Spring application context</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-flowmgr.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">  ...

  <span class="code-tag">&lt;ctx:property-placeholder location=<span class="code-quote">"/path/to/context-flowmgr.properties"</span> /&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!--================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Hibernate Setup                  --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"hibernateSessionFactory"</span> class=<span class="code-quote">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"dataSource"</span> ref=<span class="code-quote">"flowDataSource"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"configLocation"</span> value=<span class="code-quote">"/hibernate-flow.xml"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"configurationClass"</span> value=<span class="code-quote">"org.hibernate.cfg.AnnotationConfiguration"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"hibernateProperties"</span>&gt;</span>
      <span class="code-tag">&lt;props&gt;</span>
        <span class="code-tag"><span class="code-comment">&lt;!-- use the appropriate dialect --&gt;</span></span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.Oracle10gDialect<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.show_sql"</span>&gt;</span>false<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.format_sql"</span>&gt;</span>false<span class="code-tag">&lt;/prop&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"hibernate.search.autoregister_listeners"</span>&gt;</span>false<span class="code-tag">&lt;/prop&gt;</span>
      <span class="code-tag">&lt;/props&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!--================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Data Source                      --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"flowDataSource"</span> class=<span class="code-quote">"org.apache.commons.dbcp.BasicDataSource"</span> destroy-method=<span class="code-quote">"close"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"driverClassName"</span> value=<span class="code-quote">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"url"</span> value=<span class="code-quote">"jdbc:oracle:thin:@${flowmgr.database.host}:${flowmgr.database.port}:${flowmgr.database.name}"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"username"</span> value=<span class="code-quote">"${flowmgr.database.username}"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"password"</span> value=<span class="code-quote">"${flowmgr.database.password}"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"defaultAutoCommit"</span> value=<span class="code-quote">"false"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"initialSize"</span> value=<span class="code-quote">"10"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"maxActive"</span> value=<span class="code-quote">"50"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  ...
</pre>
</div></div>

<p>And finally the snippet from the corresponding properties file</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-flowmgr.properties</b></div><div class="codeContent panelContent">
<pre class="code-java">flowmgr.database.name=&lt;oracle_DB_SID&gt;
flowmgr.database.host=&lt;oracle_DB_hostname&gt;
flowmgr.database.port=1521
flowmgr.database.username=platform
flowmgr.database.password=&lt;your_password&gt;
</pre>
</div></div>

<p><a name="IPFreference-single-flowDSLextensions"></a></p>

<h2><a name="IPFreference-single-DSLextensions"></a>DSL extensions</h2>

<p>The Flow Management DSL extensions are defined in the <tt>org.openehealth.ipf.platform.camel.flow.extend.FlowModelExtension.groovy</tt> class. Their purpose is to make the flow management functionality available in Camel routes. The DSL extensions are summarized in the next table and explained in detail in the following subsections.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> DSL extension </th>
<th class="confluenceTh"> Description </th>
<th class="confluenceTh"> Model class </th>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-initflowextension">initFlow</a> </td>
<td class="confluenceTd"> Starts recording a message flow. </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.flow.model.FlowBeginProcessorType</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ackflowextension">ackFlow</a> </td>
<td class="confluenceTd"> Logs the successful delivery of a message (i.e. flow part). </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.flow.model.FlowEndProcessorType</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-nakflowextension">nakFlow</a> </td>
<td class="confluenceTd"> Logs the erroneous processing of a message (i.e. flow part). </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.flow.model.FlowErrorProcessorType</tt> </td>
</tr>
<tr>
<td class="confluenceTd"> <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-dedupeextension">dedupeFlow</a> </td>
<td class="confluenceTd"> Filters messages during flow replay operations to avoid delivery of duplicates. </td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.flow.model.DedupeType</tt> </td>
</tr>
</tbody></table>

<p>The <em>Model Class</em> column contains the DSL model classes that are created by these DSL extensions. These model classes allow further parameterization of the DSL extensions.</p>

<p><a name="IPFreference-single-initflowextension"></a></p>

<h3><a name="IPFreference-single-The%7B%7BinitFlow%7D%7DDSLextension"></a>The <tt>initFlow</tt> DSL extension</h3>

<p>With the <tt>initFlow</tt> DSL extension you define the location in your route where flow management should start. For example</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('jetty:http:<span class="code-comment">//localhost:8080/example')
</span>  .initFlow(myUniqueId)
  .to('file:...')
</pre>
</div></div>

<p>creates a flow interceptor directly after the <tt>jetty</tt> endpoint. When a message arrives on this endpoint it will be stored in the flow management database. Argument to <tt>initFlow</tt> must be a unique identifier. This identifier is needed during message replay because the flow manager must know from which flow interceptor to start the replay.</p>

<h4><a name="IPFreference-single-Parameterizationof%7B%7BinitFlow%7D%7D"></a>Parameterization of <tt>initFlow</tt></h4>

<p>Let's start with an example.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('direct:example')
    .initFlow('test')
        .application('test')
        .expectedAckCount(1)
    .process { exchange -&gt; ...}
    ...
</pre>
</div></div>

<p>Here we assign the flow interceptor the unique id <tt>test</tt> (probably not the best one for production use <img class="emoticon" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/smile.gif" height="20" width="20" align="absmiddle" alt="" border="0"> ). Each flow is stored in context of a certain application name which is <tt>test</tt> in our case. When you search for flows in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JMXinterface">JMX console</a> or via the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a> you refer to this name. With <tt>expectedAckCount</tt> you define how many acknowledgement you expect for a certain flow. Definition of this expectation is optional but allows you to do some optimizations like cleanup of the flow message content after successful delivery. Flow cleanup is primarily used to save disk space. The full list of <tt>initFlow</tt> parameters is given in the next table.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Parameter </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>application(String)</tt> </td>
<td class="confluenceTd"> Assigns created flows an application name. When you search for flows in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JMXinterface">JMX console</a> or via the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a> you refer to this name. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>expectedAckCount(int)</tt> </td>
<td class="confluenceTd"> Defines how many acknowledgements you expect for a certain flow. Definition of this expectation is optional but allows you to do some optimizations like cleanup of the flow message content after successful delivery. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>replayErrorHandler(String)</tt> </td>
<td class="confluenceTd"> Defines the endpoint URI for error messages in case a flow replay fails. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>inType(Class)</tt> </td>
<td class="confluenceTd"> For an incoming message, the flow manager tries to convert the in-message message body into a byte array. This doesn't work for all body types, so you first have to convert it into a type from which the flow manager can create a byte array. The byte array is stored as BLOB in the flow management database. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>outType(Class)</tt> </td>
<td class="confluenceTd"> For an outgoing message, the flow manager by default tries to convert the previously created byte array from the input message to an <tt>InputStream</tt> object. This will be sent to subsequent processors in the route. If you want to have a different type instead then you can define it here. Please note that this setting is ignored if <tt>outConversion</tt> is set to <tt>false</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>inFormat(org.apache.camel.spi.DataFormat)</tt> </td>
<td class="confluenceTd"> Serves the same purpose as <tt>inType</tt> except that you <em>marshal</em> the in-message body to a stream using a <tt>DataFormat</tt>. If you specify both <tt>inType</tt> and <tt>inFormat</tt> then <tt>inType</tt> will be ignored. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>outFormat(org.apache.camel.spi.DataFormat)</tt> </td>
<td class="confluenceTd"> Serves the same purpose as <tt>outType</tt> except that you <em>unmarshal</em> the in-message body from a stream using a <tt>DataFormat</tt>. If you specify both <tt>outType</tt> and <tt>outFormat</tt> then <tt>outType</tt> will be ignored. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>outConversion(boolean)</tt> </td>
<td class="confluenceTd"> If set to <tt>false</tt> then no operation using <tt>outType</tt> or <tt>outFormat</tt> will be performed. The in-message body will contain the original body. If <tt>inType</tt> is defined it will contain a body of that type. This setting is ignored during replay of messages because in this case the flow manager must reconstruct the message from a byte array. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>renderer(String)</tt> </td>
<td class="confluenceTd"> Sets the message renderer for this interceptor. Argument is the name of the message renderer bean defined in the Spring application context. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>renderer(org.openehealth.ipf.platform.camel.flow.PlatformMessageRenderer)</tt> </td>
<td class="confluenceTd"> Sets the message renderer for this interceptor. Argument is a messager renderer instance. </td>
</tr>
</tbody></table>

<p><a name="IPFreference-single-ackflowextension"></a></p>

<h3><a name="IPFreference-single-The%7B%7BackFlow%7D%7DDSLextension"></a>The <tt>ackFlow</tt> DSL extension</h3>

<p>With the <tt>ackFlow</tt> DSL extension you define the location in the route where the successful delivery of a message should be confirmed. This is typically done after sending the message to a target system via an outbound endpoint. The confirmation is then written to the flow management database. Here's an example</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
.to('http:<span class="code-comment">//www.example.org/webapp/path')
</span>.ackFlow()
</pre>
</div></div>

<p>After the message is successfully delivered to <tt><a href="http://www.example.org/webapp/path" rel="nofollow">http://www.example.org/webapp/path</a></tt> the corresponding flow object is updated in the database. If an error occurs during delivery <tt>ackFlow</tt> won't process the message.</p>

<h4><a name="IPFreference-single-Parameterizationof%7B%7BackFlow%7D%7D"></a>Parameterization of <tt>ackFlow</tt></h4>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Parameter </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>renderer(String)</tt> </td>
<td class="confluenceTd"> Sets the message renderer for this interceptor. Argument is the name of the message renderer bean defined in the Spring application context. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>renderer(org.openehealth.ipf.platform.camel.flow.PlatformMessageRenderer)</tt> </td>
<td class="confluenceTd"> Sets the message renderer for this interceptor. Argument is a messager renderer instance. </td>
</tr>
</tbody></table>

<p><a name="IPFreference-single-nakflowextension"></a></p>

<h3><a name="IPFreference-single-The%7B%7BnakFlow%7D%7DDSLextension"></a>The <tt>nakFlow</tt> DSL extension</h3>

<p>The <tt>nakFlow</tt> DSL extension is usually used within routes for error handling. Here's an example</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">onException(MyException.class).to('direct:error')

from('direct:example')
    .initFlow(...)
    .process { ... }  <span class="code-comment">// <span class="code-keyword">throws</span> MyException
</span>
from('direct:error')
    ...
    .nakFlow()
</pre>
</div></div>

<p>First we define an error handler specific for the <tt>MyException</tt> class. When the exception is thrown in the first route the error handler will route the message to the <tt>direct:error</tt> endpoint. Here, we install the flow error interceptor with the <tt>nakFlow</tt> DSL extension. This interceptor logs an error for the flow part that corresponds to the message that caused the error.</p>

<h4><a name="IPFreference-single-Parameterizationof%7B%7BnakFlow%7D%7D"></a>Parameterization of <tt>nakFlow</tt></h4>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Parameter </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>renderer(String)</tt> </td>
<td class="confluenceTd"> Sets the message renderer for this interceptor. Argument is the name of the message renderer bean defined in the Spring application context. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>renderer(org.openehealth.ipf.platform.camel.flow.PlatformMessageRenderer)</tt> </td>
<td class="confluenceTd"> Sets the message renderer for this interceptor. Argument is a messager renderer instance. </td>
</tr>
</tbody></table>

<p><a name="IPFreference-single-dedupeextension"></a></p>

<h3><a name="IPFreference-single-The%7B%7Bdedupe%7D%7DDSLextension"></a>The <tt>dedupe</tt> DSL extension</h3>

<p>The <tt>dedupe</tt> DSL extension is used to filter duplicates during replay of flows. In the following example the <tt>dedupe</tt> checks whether a certain message has already been sent via the outbound <tt>http</tt> endpoint.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('direct:example')
    .initFlow(...)
    ...
    .dedupe()
    .to('http:<span class="code-comment">//...')</span>
</pre>
</div></div>

<p>You can enable and disable dedupes at runtime via the flow management <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-JMXinterface">JMX interface</a>.</p>

<h2><a name="IPFreference-single-Splitsandmulticasts"></a>Splits and multicasts</h2>

<h3><a name="IPFreference-single-IPFversion%3C%3D1.6.0"></a>IPF version &lt;= 1.6.0</h3>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>Documentation in this subsection only applies to IPF version 1.6.0 or earlier. For later versions, see <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-loadtimewaeving">next section</a>.</p></td></tr></tbody></table></div>

<p>When you use recipient lists (multicast) and splitters in your routes then it is necessary that the copies of a certain incoming message contain different <em>flow path</em> information. This information must be updated by mutlicast and split processors. Since Camel's multicast and split processors don't know about the flow manager we applied additional logic to these processor using AOP with <a href="http://www.eclipse.org/aspectj/" rel="nofollow">AspectJ</a>. During the build of the <tt>platform-camel-core</tt> component we weave flow-management-specific aspects into <tt>camel-core</tt> classes. The weaved classes togehter with all other <tt>camel-core</tt> classes are then packaged with <tt>platform-camel-core</tt>. It is therefore important to remove the original <tt>camel-core</tt> jar file from the classpath when you include <tt>platform-camel-core</tt>, otherwise, flow management won't work correctly when using recipient lists or splitters in your routes.</p>

<p>To exclude <tt>camel-core</tt> from Maven's dependency calculation define an exclusion list for each dependency that directly or transitively depends on <tt>camel-core</tt>. In the following example the version numbers of the dependencies are omitted because they've been declared separately in a <tt>&lt;dependencyManagement&gt;</tt> section (not shown here).</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml - dependencies with camel-core exclusions</b></div><div class="codeContent panelContent">
<pre class="code-xml">    ...
    <span class="code-tag">&lt;dependencies&gt;</span>
        ...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-flow<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${pom.version}<span class="code-tag">&lt;/version&gt;</span>
            <span class="code-tag">&lt;exclusions&gt;</span>
                <span class="code-tag">&lt;exclusion&gt;</span>
                    <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
                    <span class="code-tag">&lt;artifactId&gt;</span>camel-core<span class="code-tag">&lt;/artifactId&gt;</span>
                <span class="code-tag">&lt;/exclusion&gt;</span>
            <span class="code-tag">&lt;/exclusions&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>camel-jetty<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;exclusions&gt;</span>
                <span class="code-tag">&lt;exclusion&gt;</span>
                    <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
                    <span class="code-tag">&lt;artifactId&gt;</span>camel-core<span class="code-tag">&lt;/artifactId&gt;</span>
                <span class="code-tag">&lt;/exclusion&gt;</span>
            <span class="code-tag">&lt;/exclusions&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>camel-jms<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;exclusions&gt;</span>
                <span class="code-tag">&lt;exclusion&gt;</span>
                    <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
                    <span class="code-tag">&lt;artifactId&gt;</span>camel-core<span class="code-tag">&lt;/artifactId&gt;</span>
                <span class="code-tag">&lt;/exclusion&gt;</span>
            <span class="code-tag">&lt;/exclusions&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.activemq<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>activemq-core<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;exclusions&gt;</span>
                <span class="code-tag">&lt;exclusion&gt;</span>
                    <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
                    <span class="code-tag">&lt;artifactId&gt;</span>camel-core<span class="code-tag">&lt;/artifactId&gt;</span>
                <span class="code-tag">&lt;/exclusion&gt;</span>
            <span class="code-tag">&lt;/exclusions&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        ...
    <span class="code-tag">&lt;/dependencies&gt;</span>
    ...
</pre>
</div></div>

<p><a name="IPFreference-single-loadtimeweaving"></a></p>
<h3><a name="IPFreference-single-IPFversion%3E1.6.0"></a>IPF version &gt; 1.6.0</h3>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>Documentation in this subsection only applies to IPF versions later than 1.6.0. </p></td></tr></tbody></table></div>

<p>Beginning with IPF 1.7.x development, weaving of flow management aspects was changed from compile-time weaving to <a href="http://static.springframework.org/spring/docs/2.5.x/reference/aop.html#aop-aj-ltw" rel="nofollow">load-time weaving</a>. If you use multicasts or splitters in your routes then you must do the following additional configuration:</p>

<ul>
	<li>Add a <tt>context:load-time-weaver</tt> element in your Spring application context.</li>
	<li>Put a <tt>spring-agent-&lt;version&gt;.jar</tt> file into some folder of your project  where <tt>&lt;version&gt;</tt> must be replaced by a released Springframework version.</li>
	<li>Start the application JVM with the additional option <tt>-javaagent:&lt;path&gt;/spring-agent-&lt;version&gt;.jar</tt> where <tt>&lt;path&gt;</tt> must be replaced by the path where you put the jar file.</li>
	<li>The <tt>camel-core-&lt;version&gt;.jar</tt> must be on the classpath in any case.</li>
</ul>


<p>For example, when you put <tt>spring-agent-2.5.6</tt> in the lib folder of your project then you'll need to start the JVM (on Windows) with</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>%JAVA_HOME%\bin\java.exe -javaagent:lib\spring-agent-2.5.6.jar ...
</pre>
</div></div>

<p>The Spring application context must also contain the <tt>context:load-time-weaver</tt> element.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-java">&lt;beans xmlns=<span class="code-quote">"http:<span class="code-comment">//www.springframework.org/schema/beans"</span>
</span>       xmlns:xsi=<span class="code-quote">"http:<span class="code-comment">//www.w3.org/2001/XMLSchema-instance"</span>
</span>       xmlns:context=<span class="code-quote">"http:<span class="code-comment">//www.springframework.org/schema/context"</span>
</span>       xsi:schemaLocation="
http:<span class="code-comment">//www.springframework.org/schema/beans 
</span>http:<span class="code-comment">//www.springframework.org/schema/beans/spring-beans-2.5.xsd
</span>http:<span class="code-comment">//www.springframework.org/schema/context
</span>http:<span class="code-comment">//www.springframework.org/schema/context/spring-context-2.5.xsd"&gt;
</span>
  &lt;context:load-time-weaver/&gt;


  ...

</pre>
</div></div>

<p>Refer to the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a> source code for a running example of AspectJ load-time weaving.</p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Heap space</b><br><p>Using load time weaving requires some additional heap space, so maybe you need to adjust the -Xmx JVM option to a higher value.</p></td></tr></tbody></table></div>
<h1><a name="IPFreference-single-Flowremoval"></a>Flow removal</h1>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Sample application</b><br><p>For a flow management sample application refer to the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a>.</p></td></tr></tbody></table></div>

<p>The <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">IPF flow manager</a> tracks the messages that have been processed by IPF applications and allows the replay of these messages for failure recovery or testing purposes. For a complete overview of the IPF flow manager functionality refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a> section of the IPF reference. </p>

<p>Depending on the number of messages tracked the flow manager the flow management database may reach a critical size. Besides options for manual database backups and cleanups IPF also provides a service that purges flows from the flow management database whose age exceeds a certain limit. For example, you can configure the <em>flow purge</em> service to remove all flows from the flow management database that are older than 30 days. Purge schedules are configured with <a href="http://en.wikipedia.org/wiki/Cron" rel="nofollow">cron</a> expressions. All settings are persistent and purge jobs are re-activated automatically after JVM restarts or crashes.</p>

<h2><a name="IPFreference-single-JMXinterface"></a>JMX interface</h2>

<p>To configure and interact with the flow purge service, any JMX client can be used. This section explains it based on the <a href="http://java.sun.com/javase/6/docs/technotes/guides/management/jconsole.html" rel="nofollow">JConsole</a> from the Java SDK 6. In order to use the flow removal functionality with the JConsole you must put the <tt>commons-flow-&lt;version&gt;.jar</tt> file on its classpath. This is explained in section <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management#Flowmanagement-JConsoleextension">JConsole extension</a> of the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a> chapter. The flow purge service is available via the <tt>FlowPurger</tt> MBean under the <tt>org.openehealth.ipf/service</tt> folder on the <tt>MBeans</tt> tab.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/purge-1.JPG" align="absmiddle" border="0"></p>

<p>The <tt>FlowPurger</tt> MBean has the following attributes</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Attribute</th>
<th class="confluenceTh">Default</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd"><tt>Application</tt></td>
<td class="confluenceTd">See <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">Configuration</a></td>
<td class="confluenceTd">Name of the integration application. Flow purge operations are scoped by application name.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>DoNotePurgeErrorFlows</tt></td>
<td class="confluenceTd"><tt>false</tt></td>
<td class="confluenceTd">Set to <tt>true</tt> if you don't want that flows with status <tt>ERROR</tt> shall be removed from the database.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>PurgeFlowOlderThan</tt></td>
<td class="confluenceTd"><tt>30d</tt></td>
<td class="confluenceTd">Flows older than the given value will be removed from the database. The default is 30 days (<tt>30d</tt>). Valid units are seconds (s), minutes (m), hours (h) and days.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>PurgeSchedule</tt></td>
<td class="confluenceTd"><tt>0 0 1 * * ?</tt></td>
<td class="confluenceTd">A <tt>cron</tt> expression that defines when purge operations are executed. Here's a small <a href="http://www.opensymphony.com/quartz/wikidocs/CronTriggers%20Tutorial.html" rel="nofollow">tutorial on cron expressions</a>. By default, the schedule is to run a purge operation every day at 1:00 am.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>PurgeScheduled</tt></td>
<td class="confluenceTd"><tt>false</tt></td>
<td class="confluenceTd">A read-only attribute that indicates whether the purge scheduler is activated. By default the scheduler is not activated. Below, it will be explained how to activate it.</td>
</tr>
</tbody></table>

<p>The operations <tt>schedule</tt>, <tt>unschedule</tt> and <tt>execute</tt>, provided by the <tt>FlowPurger</tt> MBean, are described in the following table.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Operation</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd"><tt>schedule</tt></td>
<td class="confluenceTd">Activates the flow purge scheduler for the current application. Once the flow purger has been activated the <tt>PurgeScheduled</tt> attribute is set to <tt>true</tt>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>unschedule</tt></td>
<td class="confluenceTd">Deactivates the flow purge scheduler for the current application. Once the flow purger has been deactivated the <tt>PurgeScheduled</tt> attribute is set to <tt>false</tt>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>execute</tt></td>
<td class="confluenceTd">Runs a single flow purge operation immediatly for the current application. This operation doesn't influence the <tt>PurgeScheduled</tt> attribute and can be used for manual (i.e. non-scheduled) flow database cleanups.</td>
</tr>
</tbody></table>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/purge-2.JPG" align="absmiddle" border="0"></p>

<h2><a name="IPFreference-single-Configuration"></a>Configuration</h2>

<p>The configuration of the <tt>FlowPurger</tt> MBean is shown in the following Spring application context XML snippet. This configuration is made as part of a complete <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management#Flowmanagement-Configuration">flow manager configuration</a>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>FlowPurger MBean configuration</b></div><div class="codeContent panelContent">
<pre class="code-xml">  <span class="code-tag">&lt;bean class=<span class="code-quote">"org.springframework.jmx.export.MBeanExporter"</span> lazy-init=<span class="code-quote">"false"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"autodetect"</span> value=<span class="code-quote">"false"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"assembler"</span> ref=<span class="code-quote">"assembler"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"namingStrategy"</span> ref=<span class="code-quote">"namingStrategy"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"beans"</span>&gt;</span>
      <span class="code-tag">&lt;map&gt;</span>
        &lt;entry
            key=<span class="code-quote">"org.openehealth.ipf.platform:type=service,name=FlowPurger"</span>
            value-ref=<span class="code-quote">"flowPurgerMBean"</span> /&gt;
      <span class="code-tag">&lt;/map&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"flowPurgerMBean"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.flow.jmx.FlowPurgerMBean"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"application"</span> value=<span class="code-quote">"tutorial"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>The <tt>application</tt> property value is the default value for the <tt>Application</tt> MBean property. The latter configuration will configure the <tt>FlowPurger</tt> MBean with default settings of internaly used <a href="http://www.quartz-scheduler.org/docs/configuration/index.html" rel="nofollow">Quartz scheduler</a>. You can override these properties by additional configuration of the <tt>FlowPurger</tt> MBean. For example the following XML snippet sets the <tt>threadCount</tt> value of Quartz schedulers threadPool to 1 (using defaults would configure the value of 10):</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>FlowPurger custom scheduler configuration</b></div><div class="codeContent panelContent">
<pre class="code-xml">  <span class="code-tag">&lt;bean id=<span class="code-quote">"flowPurgerMBean"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.flow.jmx.FlowPurgerMBean"</span>&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"application"</span> value=<span class="code-quote">"tutorial"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"scheduler"</span> ref=<span class="code-quote">"purgerScheduler"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
  
  &lt;bean id=<span class="code-quote">"purgerScheduler"</span>
    class=<span class="code-quote">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span> lazy-init=<span class="code-quote">"false"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"schedulerName"</span> value=<span class="code-quote">"FlowPurgerScheduler"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"quartzProperties"</span>&gt;</span>
      <span class="code-tag">&lt;props&gt;</span>
        <span class="code-tag">&lt;prop key=<span class="code-quote">"org.quartz.threadPool.threadCount"</span>&gt;</span>1<span class="code-tag">&lt;/prop&gt;</span>
      <span class="code-tag">&lt;/props&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/purge-3.png" align="absmiddle" border="0"></p>
<div class="error"><span class="error">Unable to render {include}</span> Couldn't find a page to include called: Platform manager</div>
<h1><a name="IPFreference-single-Eventinfrastructure"></a>Event infrastructure</h1>

<h2><a name="IPFreference-single-Overview"></a>Overview</h2>

<h3><a name="IPFreference-single-Architecture"></a>Architecture</h3>

<p>The IPF event infrastructure defines how to manage and handle system and application events inside IPF applications. An implementation of this infrastructure is provided by the <tt>platform-camel-event</tt> component. Examples of domain-neutral events (from an IPF application viewpoint) are message arrived, message successfully processed or message delivery failed, to mention a few. Depending on the application domain there are additional domain-specific events like patient data updated or discharge letter created. Events usually require to trigger some subsequent actions e.g. storing an incoming message after a message arrived event or writing an entry in an error log file after a message delivery failed event. Triggering domain-specific actions is usually coded in the form of IPF route definitions. Domain-neutral events are usually processed by event consumers that communicate with event publishers via resources (event channels) created via the <tt>platform-camel-event</tt> component.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/event architecture.png" align="absmiddle" border="0"></p>

<p>To communicate events, publisher components add event messages to event channels via channel adapters. For creation of events inside route definitions <tt>platform-camel-event</tt> provides a domain-specific language (DSL). Before event messages are send to event channels they must be transformed to fit the needs of the channel.</p>

<p>The <tt>platform-camel-event</tt> component provides event channels for asynchronous and synchronous communication. This is important because some actions triggered by events must be executed synchronously such as storing inbound messages in a database. Event handlers receive event messages via event channels. Some event handlers trigger actions in backend systems or write log files while others may analyse event streams for occurences of certain patterns and trigger complex events if such patterns exist (this is done by complex event processing (CEP) engines). It is up to the application which event handlers to configure. Support classes for implementing them are provided by the IPF.</p>

<h3><a name="IPFreference-single-Terminology"></a>Terminology</h3>

<p><b>Event</b><br>
An event can be anything that occurs in a system (state change, action ...). If the system wants to notify observers about that event it creates an event object, wraps it into an event message and sends it to an event channel (see below).</p>

<p><b>Event (notification) object</b><br>
An instance of a class that represents the state change or action used to transfer information relating to an event. It is quite common to use the term "event" to refer to the (notification) object as well, e.g. "A sends an event to B". It would be more precise to say "A sends an event (notification) object to B". This document uses both terms freely.</p>

<p><b>Event Property</b><br>
A single attribute of an event object.</p>

<p><b>Event Meta Data</b><br>
A set of attributes that are relevant to the event infrastructure. The meta data is independent of the type of event that occurred.</p>

<p><b>Event notification</b><br>
The process of informing interested parties about an event.</p>

<p><b>Event Source</b><br>
A component that sends event objects.</p>

<p><b>Event Handler</b><br>
A component that processes event objects.</p>

<p><b>Event Filter</b><br>
A component that filters events before they are passed on to an event handler.</p>

<p><b>Event Channel</b><br>
A resource that decouples handlers and sources. Event objects are send to a channel, handlers subscribe to the channel to receive the event objects. How the objects are distributed is controlled by the channel. This includes allocations of physical or logical resources (connections), quality of service aspects, etc.</p>

<p><b>Event Channel Adapter</b><br>
A component that understands details of the actual channel implementation and adapts the channel to the general contract defined by the infrastructure.</p>

<p><b>Event Message</b><br>
The data related to an event that is actually distributed via a messaging system.</p>

<p><b>Topic</b><br>
Topics are used to categorize events by means other than their type. Publishers can specify the topic of the event and handlers can subscribe to only event of a specific topic.</p>

<h3><a name="IPFreference-single-Usagesummary"></a>Usage summary</h3>

<p>Here is a brief example of how an application might implement event objects, event sources and event handlers and how these are used in subscriptions and publishing:</p>

<p><b>Event engine config (Spring)</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">    <span class="code-tag">&lt;bean id=<span class="code-quote">"eventEngine"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.event.AutoDiscoveryEventEngine"</span>/&gt;</span>
</pre>
</div></div>

<p><b>Event implementation (Java)</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class MyEventObject <span class="code-keyword">extends</span> EventObject {
    /** Serial version UID */
    <span class="code-keyword">private</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> <span class="code-object">long</span> serialVersionUID = -6112721595017049322L;
    <span class="code-keyword">private</span> <span class="code-keyword">final</span> <span class="code-object">String</span> prop;

    <span class="code-keyword">public</span> MyEventImpl1(<span class="code-object">String</span> prop) {
        <span class="code-keyword">super</span>();
        <span class="code-keyword">this</span>.prop = prop;
    }

    <span class="code-keyword">public</span> <span class="code-object">String</span> getProp() {
        <span class="code-keyword">return</span> prop;
    }
}
</pre>
</div></div>

<p><b>Event source and publishing (Groovy)</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">    from('...')
        ...
        publish { <span class="code-keyword">new</span> MyEventObject('hello world') }.toTopic('myTopic')
        ...
</pre>
</div></div>

<p><b>Event handler (Groovy)</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">class MyEventHandler <span class="code-keyword">implements</span> EventHandler {
    void handle(EventObject eventObject) {
        <span class="code-comment">// react on event
</span>    }
}
</pre>
</div></div>

<p><b>Event filter (Groovy)</b></p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class MyEventFilter <span class="code-keyword">implements</span> EventFilter {
    <span class="code-keyword">public</span> <span class="code-object">boolean</span> accepts(EventObject eventObject) {
        <span class="code-comment">// <span class="code-keyword">return</span> <span class="code-keyword">true</span> <span class="code-keyword">for</span> events that must be passed to the handler
</span>    }
}
</pre>
</div></div>

<p><b>Handler subscription (Spring)</b></p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">    <span class="code-tag">&lt;bean id=<span class="code-quote">"myEventHandler"</span> class=<span class="code-quote">"MyEventHandler"</span> /&gt;</span>
    
    <span class="code-tag">&lt;bean id=<span class="code-quote">"myEventFilter"</span> class=<span class="code-quote">"MyEventFilter"</span> /&gt;</span>

    <span class="code-tag">&lt;bean id=<span class="code-quote">"mySubscription"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.event.Subscription"</span>&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"handler"</span> ref=<span class="code-quote">"myEventHandler"</span> /&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"filter"</span> ref=<span class="code-quote">"myEventFilter"</span> /&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"topic"</span> value=<span class="code-quote">"myTopic"</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<h2><a name="IPFreference-single-Details"></a>Details</h2>

<h3><a name="IPFreference-single-EventEngine"></a>Event Engine</h3>

<p>The engine serves as a registry of event handlers and channels. If an event object is published via an engine, it will distribute it to the event handlers by using the configured channels. By default the engine has a single channel to provide synchronous delivery within the same Java VM. Although subscriptions of handlers can be performed directly via the API of the engine, it is easier to use the Spring application context. The <tt>AutoDiscoveryEventEngine</tt> automatically subscribes any <tt>Subcription</tt> beans that it find within the context. Other than that it behaves identical to its base class, the standard <tt>EventEngine</tt>.</p>

<h3><a name="IPFreference-single-Events"></a>Events</h3>

<p>Events (or more precisely event objects) should contain:</p>

<ul>
	<li>Domain-neutral meta data: Data provided by the IPF. This data can be for internal use (i.e. it should only be visible to the IPF or specific channel adapter implementations) or it can be of general interest</li>
	<li>Domain-specific payload data: Data provided by the sender, not interpreted by the infrastructure and usually not used to route or filter an event message</li>
</ul>


<p>Domain-neutral meta data is stored and retrieved via the base class of all custom event objects (<tt>EventObject</tt>). The domain-specific data is set by the event publisher. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/event meta data.png" align="absmiddle" border="0"></p>

<p>The meta data contained in <tt>EventObject</tt> is defined by the IPF event infrastructure and the channel adapters. Metadata can be set and retrieved via a key. The IPF defines various keys of which some might also be of interest to event handlers. All of these are contained in the enum <tt>EventObject.MetaDataKeys</tt>.</p>

<p>The following meta data is public:</p>
<ul>
	<li>the time stamp of the creation of the event</li>
	<li>the event object ID</li>
	<li>the topic</li>
</ul>


<p>The engine creates a unique ID for each event object that is published. This ID is created using a random UUID.</p>

<h3><a name="IPFreference-single-Eventsources"></a>Event sources</h3>

<p>Event sources publish events by using the IPF event infrastructure. The different event source types require different support for publishing:</p>
<ul>
	<li>via DSL elements</li>
	<li>directly via the IPF event API</li>
</ul>


<h4><a name="IPFreference-single-EventpublishingviatheDSL"></a>Event publishing via the DSL <a name="IPFreference-single-DSLextensions"></a></h4>

<p>Route publishing via the DSL works via the <tt>publish</tt> processor that is provided by the IPF event infrastructure. In Groovy:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('...')
    ...
    .publish { Exchange exchange -&gt;
        <span class="code-comment">// Create and configure the event
</span>    }
    .toTopic('topicName')
    ...
</pre>
</div></div>

<p>The <tt>publish</tt> processor calls the provided closure when an exchange is processed. The closure creates and configures the event object with information about the event. The processor adds the meta data upon returning the new event object. Additional delivery aspects can be configured via the <tt>publish</tt> processor as well (e.g. synchronous vs. asynchronous delivery). The optional <tt>toTopic</tt> DSL element of the <tt>publish</tt> processor specifies the topic that the event object is distributed with. If not specified it default to <tt>"default"</tt>. </p>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>It is important that the <tt>publish</tt> processor does not use an <tt>EventObject</tt> as its parameter. Such an <tt>EventObject</tt> would be a single instance created when the route is build. In general this would not be thread-safe. Therefore, the closure must return a new instance of an event object every time it is called.</p></td></tr></tbody></table></div>

<h4><a name="IPFreference-single-EventpublishingviaAPI"></a>Event publishing via API</h4>

<p>The IPF also offers an API (in the form of the <tt>EventEngine</tt>) to create events and publish them outside of routes. E.g. to publish a custom event with synchronous delivery the following call is used:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">eventEngine.publish(topic, <span class="code-keyword">new</span> MyEvent(<span class="code-quote">"hello world"</span>), <span class="code-keyword">true</span>);
</pre>
</div></div>

<h3><a name="IPFreference-single-Eventhandlersandfilters"></a>Event handlers and filters</h3>

<p>Event handlers and filters are simple beans, that implement the interfaces <tt>EventHandler</tt> and <tt>EventFilter</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class MyEventHandler <span class="code-keyword">implements</span> EventHandler {
    <span class="code-keyword">public</span> void handle(EventObject eventObject) {
        <span class="code-comment">// handle events
</span>    }
}

<span class="code-keyword">public</span> class MyEventFilter <span class="code-keyword">implements</span> EventFilter {
    <span class="code-keyword">public</span> <span class="code-object">boolean</span> accepts(EventObject eventObject) {
        <span class="code-comment">// filter events
</span>    }
}
</pre>
</div></div>

<p>The Spring beans are used to subscribe with the event engine. Filter and topic are optional. Without a filter, the handler receives all event objects send to the topic. The topic default to <tt>"default"</tt> if it is not specified.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">    <span class="code-tag">&lt;bean id=<span class="code-quote">"myEventHandler"</span> class=<span class="code-quote">"MyEventHandler"</span> /&gt;</span>
    
    <span class="code-tag">&lt;bean id=<span class="code-quote">"myEventFilter"</span> class=<span class="code-quote">"MyEventFilter"</span> /&gt;</span>

    <span class="code-tag">&lt;bean id=<span class="code-quote">"mySubscription"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.event.Subscription"</span>&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"handler"</span> ref=<span class="code-quote">"myEventHandler"</span> /&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"filter"</span> ref=<span class="code-quote">"myEventFilter"</span> /&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"topic"</span> value=<span class="code-quote">"myTopic"</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>To distribute an event object the engine calls the filter first. Only if the <tt>accept</tt> method returns <tt>true</tt>, the handler will be called. Event handlers are always passive components, i.e. they do not perform any kind of polling. If a specific event channel requires polling, the event engine or the channel adapters provide this feature.</p>

<h3><a name="IPFreference-single-Eventchannelsandadapters"></a>Event channels and adapters</h3>

<p>Event channels are accessed by the IPF event infrastructure via channel adapters. Adapters address specific channel implementations, e.g. they transform a message into a format required by the concrete channel implementation or they accept messages via polling or callbacks. They also provide quality and delivery aspects, such as reliability via persistence and ordering, synchronous/asynchronous behavior and queuing. Of course these aspects might be provided by the channel implementation itself and the adapter simply reuses these mechanisms.</p>

<p>It is important to note that event channels are usually only addressed internally by the event engine. Publishing and handling of event objects does not require knowledge of event channels and their adapters.</p>

<h4><a name="IPFreference-single-UsingCamelroutesaschannels"></a>Using Camel routes as channels</h4>

<p>Camel offers a simple way to address various messaging systems. With the IPF event infrastructure it is possible to use two Camel routes as the basis of a channel adapter. These routes define how to send and receive events. E.g.:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">        <span class="code-comment">// Sender route
</span>        from(<span class="code-quote">"direct:send"</span>)
            .to(<span class="code-quote">"jms:FOO.BAR"</span>);

        <span class="code-comment">// Receiver route
</span>        from(<span class="code-quote">"jms:FOO.BAR"</span>)
            .to(<span class="code-quote">"bean:adapter?method=distributeToHandlers"</span>);
</pre>
</div></div>
<p>The sender route receives an exchange that contains the event object in its input body. Similarly, it is expected that the receiver route sends the event object in the input body to the bean called "adapter". The above routes only work if the event object is serializable. However, it is possible to transform the event into a format compatible with the Camel JMS endpoint - in the IPF terminology this done via a transmogrifier.</p>

<p>The IPF event infrastructure provides a simple channel adapter stub that can be configured for usage with these two routes. The stub implements the adapter interface and sends and receives the exchanges.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/event camel.png" align="absmiddle" border="0"></p>

<h3><a name="IPFreference-single-Modularization"></a>Modularization</h3>

<p>In general the event infrastructure is neither tied to a single Java VM instance, nor is it strictly Java-based. Therefore, event object implementations are required to be available for all components involved in the system. The following diagram shows the intended usage of the event engine as a decentralized component, i.e. it is provided as a simple library and not as a service. The library requires access to the event implementations used by the application.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/event modules.png" align="absmiddle" border="0"></p>
<h1><a name="IPFreference-single-Largebinarysupport"></a>Large binary support</h1>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Tutorial</b><br><p>A tutorial is available for the Large Binary Support: <a href="http://repo.openehealth.org/confluence/display/ipf2/Tutorial+for+Routing+to+a+Webservice+via+HTTP" title="Tutorial for Routing to a Webservice via HTTP">Routing to a Webservice via HTTP</a></p></td></tr></tbody></table></div>

<h2><a name="IPFreference-single-Concept"></a>Concept</h2>

<p>The idea of the LBS is to handle large binaries that are part of a Camel message without keeping the complete binary in memory. The LBS provides functionality for the following Camel endpoints:</p>
<ul>
	<li>HTTP</li>
	<li>CXF</li>
	<li>MINA (MLLP, HL7)</li>
</ul>


<p>There are several ways to handle the transfer of binary data:</p>
<ul>
	<li>Implicit transfer: Use Camel exchanges/messages to transfer the binaries</li>
	<li>Download by receiver: Tell the receiver where the binary is stored and allow the download of the binary via a file transfer protocol</li>
	<li>Upload by sender: Upload the binary using a file transfer protocol and tell the receiver about the upload location</li>
</ul>


<p>The choosen alternative depends on the components within the system. For example, within a system where a client has to transfer a file to the server it might be impossible to use the second option if the client is behind a firewall. Often binaries are contained in the messages themselves for historical reasons. While it is obvious that the implicit transfer has disadvantages when dealing with larger files, it is not always possible to avoid this option. Protocols might support such transfer for historical or simplicity reasons. HL7, for example, can transfer documents within a normal HL7 message. Because of this, the IPF offers large binary support (LBS) for such scenarios and simplifies the handling.</p>

<p>The following diagram shows the LBS when up- and downloading large binaries:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/store and fetch processors.png" align="absmiddle" border="0"></p>

<p>A binary is received as part of a message send to an endpoint. Before the message is processed, the LBS stores the binary on disk and replaces the original message to allow access to the stored file. When sending the binary to another outgoing endpoint, the LBS fetches the binary from disk and packs it into a message format that is compatible with the endpoint.</p>

<h2><a name="IPFreference-single-DSLextensions"></a>DSL extensions</h2>

<p>The LBS offers DSL extensions to provide the extraction and integration of large binary content:</p>
<ul>
	<li><tt>store()</tt> to extract content</li>
	<li><tt>fetch()</tt> to integrate content</li>
</ul>


<p>The following example shows the extensions:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('jetty:http:<span class="code-comment">//localhost:8080/router')
</span>    .store().with('resourceHandlers')
    ...
    .fetch().with('resourceHandlers')
    .to('http:<span class="code-comment">//localhost:8080/receiver')</span>
</pre>
</div></div>

<p>Note that the <tt>store()</tt> and <tt>fetch()</tt> processors are both configured via <tt>with()</tt> to define the resource handlers. These define the set of strategies that are used to find content within the message and are usually protocol specific. There are predefined handlers (for HTTP and CXF), but it is also possible to implement custom handlers (via the interface <tt>org.openehealth.ipf.platform.camel.lbs.core.process.ResourceHandler</tt>). <tt>with()</tt> requires the name of a bean within the Spring application context. This bean is a <tt>List</tt> of <tt>ResourceHandlers</tt>, such as:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">    <span class="code-tag"><span class="code-comment">&lt;!-- This bean is a list of resource handlers. Add all handlers used within the routes to this list --&gt;</span></span>
    <span class="code-tag">&lt;util:list id=<span class="code-quote">"resourceHandlers"</span>&gt;</span>
        <span class="code-tag">&lt;bean class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.cxf.process.CxfPojoResourceHandler"</span>&gt;</span>
           <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span>/&gt;</span>
        <span class="code-tag">&lt;/bean&gt;</span>
        <span class="code-tag">&lt;bean class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.http.process.HttpResourceHandler"</span>&gt;</span>
            <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span> /&gt;</span>
        <span class="code-tag">&lt;/bean&gt;</span>
    <span class="code-tag">&lt;/util:list&gt;</span>
</pre>
</div></div>

<h2><a name="IPFreference-single-UsingtheLBS"></a>Using the LBS</h2>

<p>This section is meant to quickly set up and use the LBS depending on the actual use cases. In short the process is:</p>
<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ConfigureaprojecttousetheLBS">Configure a project to use the LBS</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Setupadiskstore">Set up a disk store</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-UsetheLBSinaroute">Use the LBS in a route</a></li>
</ul>


<h3><a name="IPFreference-single-ConfigureaprojecttousetheLBS"></a>Configure a project to use the LBS</h3>

<p>For projects that use Maven 2, the dependencies of the required endpoints are added to the <tt>pom.xml</tt> file. The other jars will be added automatically via the Maven dependency management. E.g. to use all three endpoints the following dependencies need to be added:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-http<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-mina<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-cxf<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>The LBS adds new processors to the route builder. To do so, it must tie itself into the IPF route extender mechanism. Usually the route model extender is part of the Spring application context (e.g. in <tt>context.xml</tt>). The following is a typical set of beans needed by an LBS enabled route:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    <span class="code-tag"><span class="code-comment">&lt;!-- This is the standard model extension from the IPF (not LBS related) --&gt;</span></span>
    <span class="code-tag">&lt;bean id=<span class="code-quote">"coreModelExtension"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span> /&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Add this bean to provide the LBS specific processors (store and fetch) to your routes --&gt;</span></span>
    <span class="code-tag">&lt;bean id=<span class="code-quote">"lbsModelExtension"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.core.extend.LbsModelExtension"</span> /&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- This is the standard route model extender, it picks up all the extensions to allow the IPF to use them --&gt;</span></span>
    <span class="code-tag">&lt;bean id=<span class="code-quote">"routeModelExtender"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag"><span class="code-comment">&lt;!-- Reference to the core extension from the IPF (not LBS related) --&gt;</span></span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
                <span class="code-tag"><span class="code-comment">&lt;!-- You might have additional extensions here, for flow management or any custom extension --&gt;</span></span>

                <span class="code-tag"><span class="code-comment">&lt;!-- Reference to the LBS extension bean to tell the IPF about it --&gt;</span></span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"lbsModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Setupadiskstore"></a>Set up a disk store</h3>

<p>The easiest way to set up a disk store is to create a bean in the Spring application context.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag"><span class="code-comment">&lt;!-- Stores binaries in the location on disk defined by the constructor argument --&gt;</span></span>
<span class="code-tag">&lt;bean id=<span class="code-quote">"diskStore"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.lbs.store.DiskStore"</span>&gt;</span>
    <span class="code-tag">&lt;constructor-arg value=<span class="code-quote">"location/on/disk"</span>/&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag"><span class="code-comment">&lt;!-- Creates a DataSource for a stored binary --&gt;</span></span>
<span class="code-tag">&lt;bean id=<span class="code-quote">"resourceFactory"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.lbs.resource.ResourceFactory"</span>&gt;</span>
    <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"diskStore"</span>/&gt;</span>
    <span class="code-tag">&lt;constructor-arg value=<span class="code-quote">"unnamed"</span>/&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>This creates a <tt>DiskStore</tt> bean that uses the given location as the base directory to store all binaries. The resource factory creates standard data sources (<tt>javax.activation.DataSource</tt>) for stored binaries. The data sources allow a simplified access to the stored binary within routes via <tt>message.getBody(InputStream.class)</tt>.</p>

<h3><a name="IPFreference-single-AddingsupportfortheHTTPendpoint"></a>Adding support for the HTTP endpoint</h3>

<p>A Maven dependency has to be added to the <tt>pom.xml</tt> file to use the LBS with the HTTP or Jetty endpoint.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-http<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>Routes use the HTTP endpoint functionality by accessing a list of handlers. The handlers "know" how to decode and encode messages of the corresponding endpoint. The <tt>HttpResourceHandler</tt> is used for the HTTP/Jetty support. It is best to create a list of the handlers in the application context:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">    <span class="code-tag"><span class="code-comment">&lt;!-- This bean is a list of resource handlers. Add all handlers used within the routes to this list --&gt;</span></span>
    <span class="code-tag">&lt;util:list id=<span class="code-quote">"resourceHandlers"</span>&gt;</span>
        <span class="code-tag">&lt;bean class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.http.process.HttpResourceHandler"</span>&gt;</span>
            <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span> /&gt;</span>
        <span class="code-tag">&lt;/bean&gt;</span>
    <span class="code-tag">&lt;/util:list&gt;</span>
</pre>
</div></div>

<p>It is recommeded to add additional handlers to this list if the LBS is used with multiple endpoints. The Spring <tt>util</tt> namespace must be defined within the <tt>beans</tt> tag within the same file:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans ... other namespaces ...
    <span class="code-keyword">xmlns:util</span>=<span class="code-quote">"http://www.springframework.org/schema/util"</span>
    xsi:schemaLocation="
... other locations
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util-2.5.xsd
..."&gt;
</pre>
</div></div>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Jetty Component and Camel 2.3.0</b><br><p>Due to changes in Camel 2.3.0 it is necessary to use a modified version of the Jetty component. This component ensures that the LBS has access to the pure InputStream received by Jetty. To use this version of the component you have to define it as a bean in your application context, e.g.:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">    &lt;bean id=<span class="code-quote">"jetty"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.http.LbsJettyHttpComponent"</span> /&gt;
</pre>
</div></div></td></tr></tbody></table></div>

<h4><a name="IPFreference-single-Storingsinglepartuploads"></a>Storing singlepart uploads</h4>

<p>The <tt>store</tt> processor is used to store a binary within a route that receives messages from a Jetty endpoint:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('jetty:http:<span class="code-comment">//localhost:8080/test')          // Standard Jetty endpoint
</span>    .store().with('resourceHandlers')             <span class="code-comment">// Stores content in the disk store via the handlers
</span>    ...
</pre>
</div></div>

<p>This will store the HTTP input message contents via the <tt>resourceHandlers</tt>. It is useful to process HTTP POST or PUT methods. The result is a message that contains a <tt>org.openehealth.ipf.platform.camel.lbs.http.process.ResourceList</tt> in its input body. To process the binary it is recommended to ask the message for an <tt>InputStream</tt> and use standard stream handling. Although it is possible to ask for a <tt>String</tt> it is important to note that this will always read the whole binary into memory, making the LBS useless. However, it can be an useful when testing routes.</p>

<p>Here is an example of a custom processor that scans an uploaded text file for a token and sets a header field if it found the token:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('jetty:http:<span class="code-comment">//localhost:8080/lbstestpost')
</span>    <span class="code-comment">// Replace the message content with a data source
</span>    .store().with('resourceHandlers') 
    <span class="code-comment">// Custom processing to find a token
</span>    .process { Exchange exchange -&gt;
        <span class="code-comment">// Get the stream from the data source and read it
</span>        def inputStream = exchange.in.getBody(InputStream.class)                
        def reader = <span class="code-keyword">new</span> BufferedReader(<span class="code-keyword">new</span> InputStreamReader(inputStream))
        <span class="code-keyword">try</span> {
            def line = reader.readLine()
            <span class="code-comment">// Look <span class="code-keyword">for</span> the token
</span>            <span class="code-keyword">while</span> (line != <span class="code-keyword">null</span> &amp;&amp; !line.contains('blu')) {
                line = reader.readLine()
            }
            <span class="code-comment">// If found set the header
</span>            <span class="code-keyword">if</span> (line != <span class="code-keyword">null</span>) {
                exchange.in.setHeader('tokenfound', 'yes')
            }
        }
        <span class="code-keyword">finally</span> {
            reader.close()
        }
    }
</pre>
</div></div>

<h4><a name="IPFreference-single-Storingmultipartuploads"></a>Storing multipart uploads</h4>

<p>Storing multipart uploads is very similar to <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Storingsinglepartuploads">storing singlepart uploads</a>. The main difference is that the resource list contains multiple stored binaries. Multipart uploads are supported for HTTP POST methods only. The following is an example of a custom processor that checks if one of the uploaded binaries is a text file and sets a header entry if it found one:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('jetty:http:<span class="code-comment">//localhost:8080/lbstest_example2')
</span>    <span class="code-comment">// Replace the message content with data sources
</span>    .store().with('resourceHandlers')
    <span class="code-comment">// Custom processing to look <span class="code-keyword">for</span> text resources
</span>    .process { Exchange exchange -&gt;
        <span class="code-comment">// Run through all resources and check the content type
</span>        exchange.in.getBody(ResourceList.class).each {
            <span class="code-keyword">if</span> (it.contentType.startsWith('text/plain')) {
                exchange.in.setHeader('textfound', 'yes')
            }
        }
    }
</pre>
</div></div>

<p>Note that the resource list is also present in the singlepart case. Routes that do not know how many parts are uploaded in advance can assume that the resource list in the message body is always set for HTTP messages.</p>

<h4><a name="IPFreference-single-Storingdownloads"></a>Storing downloads</h4>

<p>Similar to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Storingsinglepartuploads">upload</a>, downloads can be stored via the route:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
.to('http:<span class="code-comment">//localhost:8080/lbstestget')     // Standard way to send an HTTP message
</span>.store().with('resourceHandlers')           <span class="code-comment">// Store the response of the HTTP message
</span>...
</pre>
</div></div>

<p>This is useful when sending an HTTP GET request to retrieve binary data. Instead of directly processing the data, it is first stored and then processed further in the route. A resource list with <tt>DataSources</tt> is accessible in the same way as in the upload case.</p>

<h4><a name="IPFreference-single-Uploadingstoredbinaries"></a>Uploading stored binaries</h4>

<p>By using the <tt>fetch</tt> processor a singlepart or multipart HTTP POST request is created:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
.fetch().with('resourceHandlers')           <span class="code-comment">// Put a binary from the store into an HttpMessage
</span>.to('http:<span class="code-comment">//localhost:8080/receiver')       // and send it</span>
</pre>
</div></div>

<p>This will generate a POST request containing the binary and send it via the HTTP endpoint. The binary can be added manually to the store before fetching it:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
.process { Exchange exchange -&gt;
    <span class="code-comment">// The resource factory can be used to create resources manually
</span>    def resourceFactory = bean(ResourceFactory.class, 'resourceFactory') 
    def inputStream = <span class="code-keyword">new</span> ByteArrayInputStream('hello world'.bytes)
    
    <span class="code-comment">// Using the unit of work from the original exchange we can ensure that the
</span>    <span class="code-comment">// resource is removed once the message has been processed by the route
</span>    def resource = resourceFactory.createResource(exchange.unitOfWork.id, 'text/xml', <span class="code-keyword">null</span>, 'hello', inputStream)
    def resourceList = exchange.in.getBody(ResourceList.class)
    resourceList.add(resource)
}
<span class="code-comment">// Create a POST request with the resources
</span>.fetch().with('resourceHandlers')
.to('http:<span class="code-comment">//localhost:8080/receiver')</span>
</pre>
</div></div>

<p>Of course, the results of the <tt>store</tt> processor can be fed directly into the <tt>fetch</tt> processor without further processing, allowing simple routing that does not care about the resources:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('jetty:http:<span class="code-comment">//localhost:8080/router')
</span>    .store().with('resourceHandlers')
    .setHeader('tag').constant('I was here')
    .fetch().with('resourceHandlers')
    .to('http:<span class="code-comment">//localhost:8080/receiver')</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-AddingsupportfortheCXFendpoint"></a>Adding support for the CXF endpoint</h3>

<p>The CXF endpoint support is added to a project in the <tt>pom.xml</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-cxf<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>In addition a CXF endpoint is configured inside of a Spring application context. It is necessary to declare the <tt>cxf</tt> namespace and import additional resources provided by Camel. The following is an example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span> 
    <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span> 
    <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
    <span class="code-keyword">xmlns:cxf</span>=<span class="code-quote">"http://camel.apache.org/schema/cxf"</span>
    <span class="code-keyword">xmlns:util</span>=<span class="code-quote">"http://www.springframework.org/schema/util"</span>
    xsi:schemaLocation="
http://camel.apache.org/schema/cxf 
http://camel.apache.org/schema/cxf/camel-cxf.xsd
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://www.springframework.org/schema/util 
http://www.springframework.org/schema/util/spring-util-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd 
"&gt;

    <span class="code-tag"><span class="code-comment">&lt;!-- Imports used for the CXF endpoint --&gt;</span></span>
    <span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf.xml"</span> /&gt;</span>
    <span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf-extension-soap.xml"</span> /&gt;</span>
    <span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf-extension-http-jetty.xml"</span> /&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Definition of a CXF endpoint via a service using a WSDL. --&gt;</span></span>
    &lt;cxf:cxfEndpoint id=<span class="code-quote">"soapEndpointNoExtract"</span>
        serviceClass=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.cxf.process.Greeter"</span>
        address=<span class="code-quote">"http://localhost:9002/SoapContext/NoExtractPort"</span> endpointName=<span class="code-quote">"s:SoapOverHttp"</span>
        serviceName=<span class="code-quote">"s:SOAPService"</span> wsdlURL=<span class="code-quote">"hello_world.wsdl"</span>
        <span class="code-keyword">xmlns:s</span>=<span class="code-quote">"http://cxf.process.lbs.camel.platform.ipf.openehealth.org/"</span>&gt;

        <span class="code-tag"><span class="code-comment">&lt;!-- Enabling MTOM is recommended with large binaries --&gt;</span></span>
        <span class="code-tag">&lt;cxf:properties&gt;</span>
            <span class="code-tag">&lt;entry key=<span class="code-quote">"mtom-enabled"</span> value=<span class="code-quote">"true"</span> /&gt;</span>
        <span class="code-tag">&lt;/cxf:properties&gt;</span>
    <span class="code-tag">&lt;/cxf:cxfEndpoint&gt;</span>

    ...
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>Note that this configuration highly depends on the service and is pure Camel configuration. See <a href="http://camel.apache.org/cxf.html" rel="nofollow">http://camel.apache.org/cxf.html</a> for more details on the CXF component in Camel.</p>

<p>In this example, CXF will use MTOM. SwA can also be used with the LBS by simply removing the <tt>mtom-enabled</tt> property. However, it is recommeded to use MTOM with large binaries because the transfer is more efficient.</p>

<p>Routes use the CXF endpoint functionality of the LBS by accessing a list of handlers. The handlers "know" how to decode and encode messages of the corresponding endpoint. The <tt>CxfPojoResourceHandler</tt> is used for the CXF support. It is best to create a list of the handlers in the application context:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">    <span class="code-tag"><span class="code-comment">&lt;!-- This bean is a list of resource handlers. Add all handlers used within the routes to this list --&gt;</span></span>
    <span class="code-tag">&lt;util:list id=<span class="code-quote">"resourceHandlers"</span>&gt;</span>
        <span class="code-tag">&lt;bean class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.cxf.process.CxfPojoResourceHandler"</span>&gt;</span>
           <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span>/&gt;</span>
        <span class="code-tag">&lt;/bean&gt;</span>
    <span class="code-tag">&lt;/util:list&gt;</span>
</pre>
</div></div>

<p>It is recommeded to add additional handlers to this list if the LBS is used with multiple endpoints. Note that the <tt>util</tt> namespace must be defined in the <tt>beans</tt> tag.</p>

<h4><a name="IPFreference-single-StoringbinariesfromaSOAPrequest"></a>Storing binaries from a SOAP request</h4>

<p>Storing the binaries is done via the <tt>store</tt> processor:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('cxf:bean:imageBinServer')                  <span class="code-comment">// Standard POJO CXF endpoint usage
</span>    .store().with('resourceHandlers')            <span class="code-comment">// Stores any binaries into the disk store
</span>    ...
</pre>
</div></div>

<p>For usage with the LBS it is important that the POJO data format is used. This is the default for CXF endpoints. In POJO data format the CXF endpoint puts a <tt>MessageContentsList</tt> in the input body. This is a flat list of the parameters passed to the operation. The <tt>CxfPojoResourceHandler</tt> interprets all parameters of type <tt>DataHandler</tt> and <tt>Holder&lt;DataHandler&gt;</tt> as binaries and stores their content into the attached store. The original <tt>DataHandler</tt> is then replaced with a version that points to the store. For later processing this change is completely transparent.</p>

<p>Here is an example of a custom processor handling a SOAP request:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('cxf:bean:soapEndpointExample1')
    <span class="code-comment">// Store the binaries of the operation paremeters
</span>    .store().with('resourceHandlers')
    <span class="code-comment">// Custom processing to find a token in a binary
</span>    .process { Exchange exchange -&gt;
        <span class="code-comment">// Operation parameters are contained in a list
</span>        def params = exchange.in.getBody(List.class)
        <span class="code-comment">// In <span class="code-keyword">this</span> example, the parameter with index 1 contains a binary
</span>        def inputStream = params.get(1).value.inputStream
        def reader = <span class="code-keyword">new</span> BufferedReader(<span class="code-keyword">new</span> InputStreamReader(inputStream))
        <span class="code-keyword">try</span> {
            def line = reader.readLine()
            <span class="code-comment">// Look <span class="code-keyword">for</span> the token
</span>            <span class="code-keyword">while</span> (line != <span class="code-keyword">null</span> &amp;&amp; !line.contains('blu')) {
                line = reader.readLine()
            }
            <span class="code-comment">// If found set the header
</span>            <span class="code-keyword">if</span> (line != <span class="code-keyword">null</span>) {
                exchange.in.setHeader('tokenfound', 'yes')
            }
        }
        <span class="code-keyword">finally</span> {
            reader.close()
        }
    }
</pre>
</div></div>

<p>The SOAP message contains a <tt>Holder&lt;DataHandler&gt;</tt> in the parameter with index 1. The binary contained in this parameter is scanned for a token and a header is set if the token was found.</p>

<h4><a name="IPFreference-single-StoringbinariesfromaSOAPresponse"></a>Storing binaries from a SOAP response</h4>

<p>Just like using the <tt>store</tt> processor to <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-StoringbinariesfromaSOAPrequest">handle a request</a>, it can also be used to store binaries contained in a response. The <tt>store</tt> processor is simply called after the request was send to CXF endpoint:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
.to('cxf:bean:soapEndpoint')
.store().with('resourceHandlers')
</pre>
</div></div>

<p>Processing the response is identical to processing the request. The only thing to keep in mind is that the CXF endpoint places response parameters in a <tt>MessageContentsList</tt> that contains the <tt>return</tt> value of the operation as the first element. If the method returns <tt>void</tt> the first element in the list is <tt>null</tt>.</p>

<h4><a name="IPFreference-single-PreparingaSOAPrequestwithstoredbinaries"></a>Preparing a SOAP request with stored binaries</h4>

<p>For CXF it is not necessary to use the <tt>fetch</tt> processor because the CXF message is always kept in a format that can be understood by the CXF endpoint. Therefore, the only thing to decide is where the binaries come from. Everything else is identical to normal CXF message generation.</p>

<p>The following example performs a SOAP request by using two parameters that access stored binaries:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-comment">// Custom processor to manually create a SOAP call
</span>.process { Exchange exchange -&gt;
    <span class="code-comment">// The resource factory can be used to create resources manually
</span>    def resourceFactory = bean(ResourceFactory.class, 'resourceFactory') 
    def inputStream1 = <span class="code-keyword">new</span> ByteArrayInputStream('hello world'.bytes)

    <span class="code-comment">// Using the unit of work from the original exchange we can ensure that the
</span>    <span class="code-comment">// resource is removed once the message has been processed by the route
</span>    def resource1 = resourceFactory.createResource(exchange.unitOfWork.id, 'text/plain', <span class="code-keyword">null</span>, <span class="code-keyword">null</span>, inputStream1)
    def inputStream2 = <span class="code-keyword">new</span> ByteArrayInputStream('<span class="code-keyword">this</span> is me'.bytes)
    def resource2 = resourceFactory.createResource(exchange.unitOfWork.id, 'text/plain', <span class="code-keyword">null</span>, <span class="code-keyword">null</span>, inputStream2)
    
    <span class="code-comment">// The list of parameters <span class="code-keyword">for</span> the operation call
</span>    def params = <span class="code-keyword">new</span> MessageContentsList()                
    params.set(0, <span class="code-keyword">new</span> Holder&lt;<span class="code-object">String</span>&gt;('Hello world'))
    params.set(1, <span class="code-keyword">new</span> Holder&lt;DataHandler&gt;(<span class="code-keyword">new</span> DataHandler(resource1)))
    params.set(2, <span class="code-keyword">new</span> DataHandler(resource2))
    
    <span class="code-comment">// postMe is the operation being called
</span>    exchange.in.setHeader(CxfConstants.OPERATION_NAME, <span class="code-quote">"postMe"</span>)
    exchange.in.body = params
}
.to('cxf:bean:soapEndpoint')
</pre>
</div></div>

<p>Any binaries contained in the result of the call can be stored as described in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-StoringBinariesfromaSOAPresponse">previous section</a>.</p>

<h3><a name="IPFreference-single-AddingsupportfortheMINAendpoint"></a>Adding support for the MINA endpoint</h3>

<p>The MINA endpoint support is added to a project in the <tt>pom.xml</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-mina<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>The endpoint is created implicitly by using it in a route:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('mina:tcp:<span class="code-comment">//localhost:6123?sync=<span class="code-keyword">true</span>')
</span>...
</pre>
</div></div>

<p>The endpoint uses the query syntax to define various options. One of these is the definition of a codec that encodes and decodes data streams based on a protocol specification. In the case of MLLP and HL7, Camel offers a codec (<tt>HL7MLLPCodec</tt>). Unfortunately this codec does not efficiently handle large binaries. Therefore, the LBS offers its own codec implementation via <tt>MllpStoreCodec</tt>. This codec does not directly support HL7, it only works with MLLP. The individual messages need to be processed by a marshaller to get access to the HL7 data model. As with most components, it is best to define the codec inside the Spring application context:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag"><span class="code-comment">&lt;!-- This codec is used with a MINA endpoint to efficiently process large binaries wrapped by MLLP --&gt;</span></span>
<span class="code-tag">&lt;bean id=<span class="code-quote">"mllpStoreCodec"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.mina.mllp.MllpStoreCodec"</span>&gt;</span>
    <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span> /&gt;</span>
    <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"camelContext"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>The codec is then used inside the route definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('mina:tcp:<span class="code-comment">//localhost:6125?sync=<span class="code-keyword">true</span>&amp;codec=mllpStoreCodec')
</span>...
</pre>
</div></div>

<p>All MLLP messages arriving at the endpoint are now stored in the disk store and the message contains a data source to the store location. Note that this is done without using the <tt>store</tt> or <tt>fetch</tt> processors.</p>

<h4><a name="IPFreference-single-ProcessingmessagesfromtheMINAendpointwiththeLBS"></a>Processing messages from the MINA endpoint with the LBS</h4>

<p>Once the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-AddingsupportfortheMINAendpoint">endpoint has been configured</a>, the actual message can be read from a data source in the input message:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('mina:tcp:<span class="code-comment">//localhost:6125?sync=<span class="code-keyword">true</span>&amp;codec=mllpStoreCodec')
</span>    <span class="code-comment">// Custom processing to find the token
</span>    .process { Exchange exchange -&gt;
        <span class="code-comment">// Get the stream from the data source and read it
</span>        def inputStream = exchange.in.getBody(InputStream.class)
        def reader = <span class="code-keyword">new</span> BufferedReader(<span class="code-keyword">new</span> InputStreamReader(inputStream))
        <span class="code-keyword">try</span> {
            def line = reader.readLine()
            <span class="code-comment">// Look <span class="code-keyword">for</span> the token
</span>            <span class="code-keyword">while</span> (line != <span class="code-keyword">null</span> &amp;&amp; !line.contains('blu')) {
                line = reader.readLine()
            }
            <span class="code-comment">// If found set the header
</span>            <span class="code-keyword">if</span> (line != <span class="code-keyword">null</span>) {
                exchange.in.setHeader('tokenfound', 'yes')
            }
        }
        <span class="code-keyword">finally</span> {
            reader.close()
        }
    }
</pre>
</div></div>

<p>In this example the message is scanned for a token and a header is set if the token is found.</p>

<h4><a name="IPFreference-single-ReceivingHL7messagesfromtheMINAendpointwiththeLBS"></a>Receiving HL7 messages from the MINA endpoint with the LBS</h4>

<p>MLLP is mostly used with HL7 messages. The standard HL7 support from Camel provides a data format for HL7 that can be used to marshall messages. This dataformat is also compatible with the <tt>MllpStoreCodec</tt>. Therefore, it can be used in routes:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('mina:tcp:<span class="code-comment">//localhost:6127?sync=<span class="code-keyword">true</span>&amp;codec=mllpStoreCodec')
</span>    .unmarshal().hl7()
    ...
</pre>
</div></div>

<p>Once the message is unmarshalled it can be processed with the standard HAPI based support that the Camel HL7 component offers, e.g.:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">from('mina:tcp:<span class="code-comment">//localhost:6127?sync=<span class="code-keyword">true</span>&amp;codec=mllpStoreCodec')
</span>    .unmarshal().hl7()
    .process { Exchange exchange -&gt;
        def hl7Message = exchange.getIn().getBody(ca.uhn.hl7v2.model.Message.class)
        ...
    }
</pre>
</div></div>

<h4><a name="IPFreference-single-SendingHL7messagestotheMINAendpointwiththeLBS"></a>Sending HL7 messages to the MINA endpoint with the LBS</h4>

<p>Just like <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-ReceivingHL7messagesfromtheMINAendpointwiththeLBS">receiving messages</a> is done by unmarshalling via the HL7 data format, sending messages is done by marshalling:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">.marshal().hl7()
.to('mina:tcp:<span class="code-comment">//localhost:6127?sync=<span class="code-keyword">true</span>&amp;codec=mllpStoreCodec')</span>
</pre>
</div></div>

<p>To send a message to this endpoint, the body has to contain an HL7 message (<tt>ca.uhn.hl7v2.model.Message</tt>).</p>

<h1><a name="IPFreference-single-Performancemeasurement"></a>Performance measurement</h1>

<p>The performance measurement component can be used to determine the performance characteristics of IPF applications. It provides DSL (domain specific language) extensions, that can be used to measure: </p>
<ul>
	<li>Processing time of messages
	<ul>
		<li>for route parts</li>
		<li>for the whole route</li>
	</ul>
	</li>
	<li>Throughput</li>
</ul>


<p>The component has statistics objects, which transform the measurements made by the DSL extensions to statistical data. The statistical data is accessible through a HTTP interface in form of statistical reports.</p>

<h2><a name="IPFreference-single-Performancequestionstobeanswered"></a>Performance questions to be answered</h2>
<p>The following figure illustrates the problem addressed by the IPF performance measurement component, with an example application. The IPF route of the application has 3 message transformers - <tt>T1</tt>, <tt>T2</tt> and <tt>T3</tt>: <br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/times.png" align="absmiddle" border="0"><br>
We want to find the <em>processing times</em> (how long it takes to process a message) for:</p>
<ul>
	<li><tt>T1</tt></li>
	<li><tt>T2</tt></li>
	<li>the whole example route</li>
</ul>


<p>We are also interested to know what is the <em>throughput</em> of the example application (how many requests are processed per second), and how it is distributed for the time of the performance tests:</p>
<ul>
	<li>for a single node</li>
	<li>for a cluster</li>
</ul>


<h2><a name="IPFreference-single-Usageofthecomponent"></a>Usage of the component</h2>
<p>The following figure illustrates how the DSL extensions, that the component provides, are used to measure:</p>
<ul>
	<li>the processing times of: <tt>T1</tt> and <tt>T2</tt></li>
	<li>the processing time for the whole route</li>
	<li>the throughput</li>
</ul>


<p>of a node, on which the above example application is deployed:<br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/times-instrumented.png" align="absmiddle" border="0"><br>
Here is the initial IPF route of the example transformer application, followed by the same route instrumented with the performance measurement DSL extensions:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Transformer route (Groovy)</b></div><div class="codeContent panelContent">
<pre class="code-java">...
class TransformerRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
	void configure() {
		from('direct:input')
		    .process {
		        <span class="code-comment">//implementation of transformer T1
</span>		    }
		    .process {
		        <span class="code-comment">//implementation of transformer T2
</span>		    }
		    .process {
		        <span class="code-comment">//implementation of transformer T3
</span>		    }
		    .to('direct:output')
	}
}
</pre>
</div></div>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Transformer route with performance measurement (Groovy)</b></div><div class="codeContent panelContent">
<pre class="code-java">...
class TransformerPerformanceMeasurementRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
	void configure() {
		
		from('direct:input')
		.measure().time()
		.process {
		        <span class="code-comment">//implementation of transformer T1
</span>		}
		.measure().checkpoint('T1 time')
		.process{ 
		        <span class="code-comment">//implementation of transformer T2
</span>		}
		.measure().checkpoint('T2 time')
		.process{ 
		        <span class="code-comment">//implementation of transformer T3
</span>		}    
		.to('direct:output')
		.measure().finish('Total time')
	}
}
</pre>
</div></div>
<p>In the second route, the performance measurement DSL extensions <tt>measure().time()</tt> and <tt>measure().checkpoint('T1 time')</tt>, that surround the transformer <tt>T1</tt>, are used to measure the processing duration of <tt>T1</tt>. The <tt>measure().checkpoint('T1 time')</tt> and <tt>measure().checkpoint('T2 time')</tt> extensions, that surround transformer <tt>T2</tt>, are used to measure the processing duration of <tt>T2</tt>.  The <tt>measure().finish('Total time')</tt> extension is used at the end of the route to determine the processing duration of the whole route, enclosed within <tt>measure().time()</tt> and <tt>measure().finish('Total time')</tt>, and to provide data for the throughput. The String arguments <tt>'T1 time'</tt>, <tt>'T2 time'</tt> and <tt>'Total time'</tt> of the DSL extensions name their corresponding measurement locations in the IPF route. The names are used to distinguish the measurements for different locations in the statistical reports, that the component generates. Details about the performance measurement DSL extensions can be found <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-dslextensions">here</a>. <br>
When a message enters the location of <tt>measure().finish('Total time')</tt>, a measurement history object (containing initial measurement from <tt>measure.time()</tt> and the two measurements from the preceding <tt>measure().checkpoint('T1 time')</tt> and <tt>measure().checkpoint('T2 time')</tt>) is created, and sent to a statistics manager, that holds statistics objects. The statistics manager updates those statistics objects with the measurements, created by the performance measurement DSL extensions. At the end of the performance tests, the data from the statistics objects (in form of statistical reports) will represent the measurements, and thus the performance characteristics of the IPF application. Details about the configuration of the performance measurement context can be found <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-contexttransformerperformancemeasurement.xml">here</a>. </p>
<h3><a name="IPFreference-single-Statisticalreportsgeneratedbythecomponent"></a>Statistical reports generated by the component</h3>
<p>The type of statistical reports, generated by the component, depends on the used statistics objects, that give interpretation of the measurement data collected by the DSL extensions. To demonstrate some basic reports, we use statistics objects that provide summary of processing times (min, max, mean and standard deviation) for route parts and throughput (details are available in section <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-contexttransformerperformancemeasurement.xml">configuration</a>). We will implement the transformers in the example to simulate some activity, and then execute a performance test that sends messages to the application (single node). After the performance test has finished, the statistical reports can be viewed with a web browser. Details about the HTTP interface, of the component, are available <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-restinterface">here</a>. Here is an example performance report, that summarizes the processing times of the transformers <tt>T1</tt>, <tt>T2</tt> and the whole route; and the throughput of the node with the example transformer application:<br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/statistics.png" align="absmiddle" border="0"><br>
Below is the implementation of the transformers, followed by the performance test, that sends messages to the inbound <tt>direct:input</tt> endpoint of the route: </p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Transformer route with performance measurement and simulated transformation activity (Groovy)</b></div><div class="codeContent panelContent">
<pre class="code-java">...
class TransformerPerformanceMeasurementRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
	void configure() {
		
		from('direct:input')
		.measure().time()
		.process { 
			<span class="code-comment">//implementation of transformer T1
</span>			<span class="code-object">long</span> sleepTime = 5 + (<span class="code-object">long</span>)(<span class="code-object">Math</span>.random() *  5)
			<span class="code-object">Thread</span>.sleep(sleepTime)
		}
		.measure().checkpoint('T1 time')
		.process { 
			<span class="code-comment">//implementation of transformer T2
</span>			<span class="code-object">long</span> sleepTime = 5 + (<span class="code-object">long</span>)(<span class="code-object">Math</span>.random() *  5)
			<span class="code-object">Thread</span>.sleep(sleepTime)
		}
		.measure().checkpoint('T2 time')
		.process {
			<span class="code-comment">//implementation of transformer T3
</span>			<span class="code-object">long</span> sleepTime = 5 + (<span class="code-object">long</span>)(<span class="code-object">Math</span>.random() *  5)
			<span class="code-object">Thread</span>.sleep(sleepTime)
		}
		.to('direct:output')
        .measure().finish('Total time')
	}
}
</pre>
</div></div>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>PerformanceTest.java</b></div><div class="codeContent panelContent">
<pre class="code-java">...
@RunWith(SpringJUnit4ClassRunner.class)
@TestExecutionListeners( { DependencyInjectionTestExecutionListener.class })
@ContextConfiguration(locations = { <span class="code-quote">"/context-transformer-performance-measurement.xml"</span> })
<span class="code-keyword">public</span> class PerformanceTest{
   /**
    *  Autowired by the Spring dependency injection facilities.
    */    
    @Autowired 
    <span class="code-keyword">private</span> ProducerTemplate producerTemplate;

    @Test
    <span class="code-keyword">public</span> void testInput() <span class="code-keyword">throws</span> Exception {
        <span class="code-keyword">for</span> (<span class="code-object">int</span> t = 0; t &lt; 1000; t ++){ 
            <span class="code-comment">//sends <span class="code-quote">"test"</span> message to the transformer route, defined in TransformerPerformanceMeasurementRouteBuilder 
</span>            producerTemplate.sendBody(<span class="code-quote">"direct:input"</span>, <span class="code-quote">"test"</span>);
        }
    }
}
</pre>
</div></div>
<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>The sleep time in <tt>Thread.sleep(sleepTime)</tt> is, according to its javadoc, "subject to the precision and accuracy of system timers and schedulers". The <tt>platform-camel-test</tt> component implementation uses <tt>System.nanoTime()</tt> to determine the duration measurements, as the method uses the most precise available system timer (according to its javadoc). Due to the use of <tt>System.nanoTime()</tt>, on some platforms the calculated duration with <tt>System.nanoTime()</tt> may significantly differ from the value of the <tt>sleepTime</tt> argument in <tt>Thread.sleep(sleepTime)</tt>.</p></td></tr></tbody></table></div>
<h3><a name="IPFreference-single-Configuration"></a>Configuration</h3>
<p>To configure the use of the performance measurement component, the following dependency must be added in the <tt>pom.xml</tt> file of the project configuration, where <tt>${ipf-version</tt>} is the version (since 1.7.0) of IPF:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
        <span class="code-tag">&lt;dependency&gt;</span> 
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-test<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
...
</pre>
</div></div>
<p><a name="IPFreference-single-contexttransformerperformancemeasurement.xml"></a><br>
Below is the Spring configuration file, used in the example transformer application, that configures the IPF performance measurement component:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-transformer-performance-measurement.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
  <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
  <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
  xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

 <span class="code-tag"><span class="code-comment">&lt;!-- ====================================================================================== --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!--  Configuration of the statistics objects, used by the component, and their renderers   --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- ====================================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id = <span class="code-quote">"throughtputStatistics"</span> class = <span class="code-quote">"org.openehealth.ipf.commons.test.performance.throughput.ThroughputStatistics"</span>/&gt;</span>
  <span class="code-tag">&lt;bean id = <span class="code-quote">"throughputStatisticsRenderer"</span> class = <span class="code-quote">"org.openehealth.ipf.commons.test.performance.throughput.ThroughputStatisticsRenderer"</span>/&gt;</span>

  <span class="code-tag">&lt;bean id = <span class="code-quote">"processingTimeStatistics"</span> class = <span class="code-quote">"org.openehealth.ipf.commons.test.performance.processingtime.ProcessingTimeStatistics"</span>/&gt;</span>
  <span class="code-tag">&lt;bean id = <span class="code-quote">"processingTimeStatisticsRenderer"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.test.performance.processingtime.ProcessingTimeStatisticsRenderer"</span>/&gt;</span>

 <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- Configuration of the performance measurement component           --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
   
   &lt;bean id=<span class="code-quote">"statisticsManager"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.test.performance.StatisticsManager"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"bindings"</span>&gt;</span>
        <span class="code-tag">&lt;map&gt;</span> 
            <span class="code-tag">&lt;entry key-ref=<span class="code-quote">"throughtputStatistics"</span> value-ref=<span class="code-quote">"throughputStatisticsRenderer"</span>/&gt;</span>
            <span class="code-tag">&lt;entry key-ref=<span class="code-quote">"processingTimeStatistics"</span> value-ref=<span class="code-quote">"processingTimeStatisticsRenderer"</span>/&gt;</span>
        <span class="code-tag">&lt;/map&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
 
  &lt;bean id=<span class="code-quote">"measurementDispatcher"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.test.performance.dispatcher.SynchronousMeasurementDispatcher"</span>&gt;
   <span class="code-tag">&lt;property name=<span class="code-quote">"statisticsManager"</span> ref=<span class="code-quote">"statisticsManager"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"performanceModelExtension"</span>
    class=<span class="code-quote">"org.openehealth.ipf.platform.camel.test.performance.extend.PerformanceModelExtension"</span>&gt;
  <span class="code-tag">&lt;/bean&gt;</span>

 <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- Configuration of the HTTP interface, exposed by the component     --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

  &lt;bean id=<span class="code-quote">"performanceRouteBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
    class=<span class="code-quote">"org.openehealth.ipf.platform.camel.test.performance.route.PerformanceRouteBuilder"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"httpPort"</span> value=<span class="code-quote">"8081"</span>/&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"requestHandlerBean"</span> value=<span class="code-quote">"performanceRequestHandler"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"performanceRequestHandler"</span>
    class=<span class="code-quote">"org.openehealth.ipf.commons.test.performance.handler.PerformanceRequestHandler"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"statisticsManager"</span> ref=<span class="code-quote">"statisticsManager"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

 <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- Typical configuration of an IPF application                       --&gt;</span></span>
 <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================= --&gt;</span></span>

 <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
    <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>
 <span class="code-tag">&lt;/camel:camelContext&gt;</span>
  
 &lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
      class=<span class="code-quote">"org.openehealth.TransformerPerformanceMeasurementRouteBuilder"</span>&gt;
 <span class="code-tag">&lt;/bean&gt;</span>
 &lt;bean id=<span class="code-quote">"coreModelExtension"</span> 
       class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span>&gt;
 <span class="code-tag">&lt;/bean&gt;</span>
 &lt;bean id=<span class="code-quote">"routeModelExtender"</span> 
      class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
     <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
         <span class="code-tag">&lt;list&gt;</span>
             <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span>/&gt;</span>
             <span class="code-tag">&lt;ref bean=<span class="code-quote">"performanceModelExtension"</span>/&gt;</span>
         <span class="code-tag">&lt;/list&gt;</span>
     <span class="code-tag">&lt;/property&gt;</span>
 <span class="code-tag">&lt;/bean&gt;</span>
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>The following table provides description of the Spring beans in the <tt>context-transformer-performance-measurement.xml</tt> context file:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Bean</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd"><tt>throughputStatistics</tt></td>
<td class="confluenceTd">Tracks the count of the messages that the IPF application have processed, and the time for which they have been processed. The ratio <em>count / time</em> gives the throughput. The IPF application <em>must</em> denote a message as processed by using <tt>measure().finish(String</tt> DSL extension after the route location, on which it has processed the message. Implements the <tt>org.openehealth.ipf.commons.test.performance.Statistics</tt> interface.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>throughputStatisticsRenderer</tt></td>
<td class="confluenceTd"> Implementation of <tt>org.openehealth.ipf.commons.test.performance.StatisticsRenderer</tt> to provide HTML report of the data in <tt>throughputStatistics</tt>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>processingTimeStatistics</tt></td>
<td class="confluenceTd">Collects min, max, mean and standard deviation of processing times for instrumented IPF routes. Instrumented IPF routes are enclosed within route locations of <tt>measure().checkpoint(String)</tt> and their <em>former</em> <tt>measure().time()</tt> or <tt>measure().checkpoint(String)</tt> locations, and enclosed within the <em>initial</em> <tt>measure().time()</tt> and the last <tt>measure().finish(String)</tt> locations. The statistics are grouped by measurement locations. Fore more details check the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-dslextensions">description of the DSL extensions</a>. Implements the <tt>org.openehealth.ipf.commons.test.performance.Statistics</tt> interface.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>processingTimeStatisticsRenderer</tt></td>
<td class="confluenceTd"> Implementation of <tt>org.openehealth.ipf.commons.test.performance.StatisticsRenderer</tt> to provide HTML representation of the data in <tt>processingTimeStatistics</tt>. The statistical reports are grouped names of the measurement locations.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>statisticsManager</tt></td>
<td class="confluenceTd">The bean statisticsManager is a holder of statistics objects of type <tt>org.openehealth.ipf.commons.test.performance.Statistics</tt>. The statistical objects will be used to collect performance statistics. It exposes methods to update the contained statistics objects with performance measurements and to reset their data. Every configured statistics object in the <tt>statisticsManager</tt> must have a renderer. The renderers are used to create statistical reports from the data in the statistics objects.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>measurementDispatcher</tt></td>
<td class="confluenceTd">Dispatches the measurements, created in the <tt>measure().finish()</tt> to the <tt>statisticsManager</tt> synchronously. To use asynchronous dispatching, use <tt>org.openehealth.ipf.commons.test.performance.dispatcher.AsynchronousMeasurementDispatcher</tt> class. You must have a single instance of type <tt>org.openehealth.ipf.commons.test.performance.dispatcher.MeasurementDispatcher</tt> (the super type of <tt>SynchronousMeasurementDispatcher</tt> and <tt>AsynchronousMeasurementDispatcher</tt>) defined in your Spring application context. The single instance is looked-up by the performance measurement DSL extensions. Supports optional dispatching to a <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-deploymentperformanceserver">IPF performance measurement server</a>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>performanceModelExtension</tt></td>
<td class="confluenceTd">Contains the DSL extensions of the IPF performance measurement component.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>performanceMeasurementRouteBuilder</tt></td>
<td class="confluenceTd"> Uses the Jetty component to provide HTTP interface for the statistical reports and for resetting the statistics objects. Starts a HTTP consumer at URL <tt><a href="http://localhost:8081/statistics" rel="nofollow">http://localhost:8081/statistics</a></tt> (<tt>8081</tt> is the value of the <tt>httpPort</tt> property in the configuration), that delegates the incoming HTTP requests to the <tt>performanceRequestHandler</tt>. HTTP GET requests return statistical reports, while HTTP DELETE requests reset the data in the statistics. Fore more details check out the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-restinterface">HTTP interface details</a>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>performanceRequestHandler</tt></td>
<td class="confluenceTd">The bean handles the request from the HTTP interface (provided by <tt>performanceMeasurementRouteBuilder</tt>), and delegates the requests to the <tt>statisticsManager</tt>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>camelContext</tt></td>
<td class="confluenceTd"><a href="http://camel.apache.org/spring.html" rel="nofollow">Description from Camel</a>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>routeBuilder</tt></td>
<td class="confluenceTd">Contains the IPF route of the example transformer application, that uses the performance measurement DSL.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>coreModelExtension</tt></td>
<td class="confluenceTd">Description is available in <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features" title="Core features">IPF Core features</a>.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>routeModelExtender</tt></td>
<td class="confluenceTd">Provides the DSL extensions to the IPF route. More information is available in <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features" title="Core features">IPF Core features</a>.</td>
</tr>
</tbody></table>
<p><a name="IPFreference-single-deploymentperformanceserver"></a></p>
<h2><a name="IPFreference-single-Singlenodedeploymentwithaperformancemeasurementserver"></a>Single node deployment with a performance measurement server</h2>
<p>The IPF performance measurement component contains a server, called <em>performance measurement server</em>, to provide the performance reports at a single place, for both single node and cluster deployment cases of an IPF application (independent from the number of nodes, with deployed IPF application). When the server is used, you must not aggregate the performance reports for each node, to determine the performance characteristics of a cluster. The server exposes HTTP interface for communication. Details of the exposed HTTP interface can be found <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-restinterface">here</a>.</p>

<p>The performance measurement server has a predefined set of statistics objects. Those statistics objects characterize:</p>
<ul>
	<li>Throughput</li>
	<li>Distribution of the throughput for the duration of the performance tests</li>
	<li>Processing times for
	<ul>
		<li>route parts</li>
		<li>the whole route</li>
	</ul>
	</li>
</ul>


<p>The following figure shows how the single node scenario with the example transformer application looks like, when the server is used:<br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/standalone-performance-server.png" align="absmiddle" border="0"></p>
<h3><a name="IPFreference-single-Statisticalreportsgeneratedbytheperformancemeasurementserver"></a>Statistical reports generated by the performance measurement server</h3>
<p>Here are statistical reports, generated by the performance measurement server, for a single node, on which the example transformer application is deployed and configured to send measurements to the server. The performance reports summarize the processing times of transformers <tt>'T1'</tt> and '<tt>T2'</tt>, the whole rote and provide the distribution of the throughput for the duration of the tests. The test duration interval is split into 30 equally sized sub-intervals, whose throughput (count of messages within the sub-interval / interval length) is being reported. The report below shows that the throughput of the example transformer application does not change significantly within the sub-intervals.<br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/performance-reports-server.PNG" align="absmiddle" border="0"></p>
<h3><a name="IPFreference-single-Configurationoftheapplicationtouseaperformancemeasurementserver"></a>Configuration of the application to use a performance measurement server</h3>
<p>To demonstrate the scenario with the example IPF transformer application, a small configuration change is required in its Spring configuration file <tt>context-transformer-performance-measurement.xml</tt>. The configuration change will instruct the IPF application to send the performance measurements additionally to the performance measurement server. More precisely, the <tt>measurementDispatcher</tt> bean will dispatch the measurements it receives from the <tt>measure().finish(String)</tt> DSL extension to both the <tt>statisticsManager</tt> and the performance measurement server. This is done by setting its property <tt>performanceMeasurementServerURL</tt>. Note that the measurements (in form of measurement history) are sent only by the <tt>measure().finish(String)</tt> DSL extension. This must be done <em>after</em> the application has processed the message. Here is the configuration change in the <tt>measurementDispatcher</tt>, defined above in <tt>context-transformer-performance-measurement.xml</tt>: </p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-transformer-performance-measurement.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
 &lt;bean id=<span class="code-quote">"measurementDispatcher"</span>
   class=<span class="code-quote">"org.openehealth.ipf.commons.test.performance.dispatcher.SynchronousMeasurementDispatcher"</span>&gt;
  <span class="code-tag">&lt;property name=<span class="code-quote">"statisticsManager"</span> ref=<span class="code-quote">"statisticsManager"</span>/&gt;</span>
  <span class="code-tag">&lt;property name=<span class="code-quote">"performanceMeasurementServerURL"</span> value=<span class="code-quote">"http://server_host:9191/statistics"</span>/&gt;</span>
 <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>
<p>With the above configuration <tt>measurementDispatcher</tt> will send HTTP POST requests to the URL in <tt>performanceMeasurementServerURL</tt>, to register the measurements it receives at the performance measurement server. In the above configuration <tt>server_host</tt> is the host, where the performance server is deployed. <tt>9191</tt> is the port of the HTTP interface of the server. The HTTP interface of the server, that concerns viewing the statistical reports and resetting them, is described <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-restinterface">here</a>. </p>

<h3><a name="IPFreference-single-Deploymentandconfigurationoftheperformancemeasurementserver"></a>Deployment and configuration of the performance measurement server</h3>
<p>The IPF performance measurement server can be started executing the script <tt>start-performance-measurement-server.sh</tt> for Unix (and .bat for Windows) from the <tt>bin</tt> folder of the IPF binary distribution. The script can be run with command line arguments to override the default configuration settings of the performance measurement server.  If no command line arguments are given to the script, the default configuration of the server will be used. Here are the available configuration options:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Command line argument </th>
<th class="confluenceTh"> Configures  </th>
<th class="confluenceTh"> Details </th>
</tr>
<tr>
<td class="confluenceTd">1 </td>
<td class="confluenceTd">HTTP port number </td>
<td class="confluenceTd">The first argument of the script is the port, that will be used by the HTTP interface of the server. The default value of the HTTP port is <tt>9191</tt></td>
</tr>
<tr>
<td class="confluenceTd">2</td>
<td class="confluenceTd">Override reference date </td>
<td class="confluenceTd"> The second argument of the script configures whether the server should override the reference date of the measurement history with its date. The default value is <tt>true</tt>, meaning that the server will override the date. </td>
</tr>
<tr>
<td class="confluenceTd">3</td>
<td class="confluenceTd">JMX port number </td>
<td class="confluenceTd">The third argument of the script is the port number of the JMX interface, exposed by the server. Default value of the JMX port is <tt>9999</tt>.</td>
</tr>
</tbody></table>

<p>For example, to start the IPF Performance measurement server on Linux on HTTP port <tt>8123</tt>, rather than the default <tt>9191</tt>, run the script <tt>start-performance-measurement-server.sh</tt> with argument <tt>8123</tt>, typing </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">start-performance-measurement-server.sh 8123
</pre>
</div></div>
<p>in the <tt>bin</tt> folder of the IPF binary distribution.</p>


<h2><a name="IPFreference-single-Clusterdeploymentwithaperformancemeasurementserver"></a>Cluster deployment with a performance measurement server</h2>
<p>In this approach the performance measurement component will be used to determine the performance characteristics of a cluster of IPF applications. The results can then be compared to those for a single node. The figure shows the cluster scenario:<br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/cluster-scenario-performance-server.png" align="absmiddle" border="0"></p>

<p><a name="IPFreference-single-dslextensions"></a></p>
<h2><a name="IPFreference-single-DSLextensionsforperformancemeasurement"></a>DSL extensions for performance measurement</h2>
<p>The Performance Measurement DSL extensions are defined in component <tt>platform-camel-test</tt>. Their purpose is to provide the performance measurement functionality to IPF routes. The DSL extensions are listed here:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> DSL extension </th>
<th class="confluenceTh"> Description </th>
<th class="confluenceTh"> Model class </th>
</tr>
<tr>
<td class="confluenceTd"><tt>measure()</tt></td>
<td class="confluenceTd">Defines a location in the IPF route, where a performance measurement will be made.</td>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.test.performance.model.MeasureDefinition</tt> </td>
</tr>
</tbody></table>
<p>When the <tt>measure()</tt> extension is used, it <em>must</em> be parametrized in <em>one</em> of the following ways:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Parametrization</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd"><tt>measure().time()</tt></td>
<td class="confluenceTd">Defines a <em>time</em> measurement location in the route, on which the inbound message header will be enriched  with the current time. Must be used direct after inbound endpoints at the start of the IPF route, that will be measured. Can also be used before <tt>measure().checkpoint(String)</tt>, to explicitly measure the enclosed route parts.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>measure().checkpoint(String)</tt></td>
<td class="confluenceTd">Defines a <em>checkpoint</em> location in the route, on which the inbound message header will be enriched with the current time (implies <tt>measure().time()</tt>). Such a checkpoint time, can be used to calculate the duration of each message, withing this location and the <em>last</em> former <tt>measure().time()</tt> (or <tt>measure().checkpoint(String)</tt>) location of the IPF route. The <tt>String</tt> parameter is used to name the checkpoint location. The name is used to distinguish the measurement data for different measurement locations in the statistical reports.</td>
</tr>
<tr>
<td class="confluenceTd"><tt>measure().finish(String)</tt></td>
<td class="confluenceTd">Defines a <em>finish</em> measurement location in the route. Should be used after outbound endpoints in the IPF route to measure the current time. Sends the measurement history of all previous measurement times, stored in the inbound message header together with the measured current time, to the statistics objects. The measurement history contains information about processing time for the whole measured route, enclosed by the initial <em>time</em> location and this <em>finish</em> location, and processing time for measured route parts, enclosed by <em>checkpoint</em> locations and their former <em>time</em> or <em>checkpoint</em> locations. The <tt>String</tt> parameter is used to name the finish location. The name is used to distinguish the measurement data for different measurement locations in the statistical reports. Must be used <em>last</em> in a sequence of <tt>measure()</tt> locations.</td>
</tr>
<tr>
</tr>
</tbody></table>
<p><a name="IPFreference-single-restinterface"></a></p>
<h2><a name="IPFreference-single-HTTPinterfaceoftheperformancemeasurementcomponent"></a>HTTP interface of the performance measurement component</h2>
<p>The HTTP interface of the component is for accessing the performance measurement collected by the statistics objects (of a node with IPF application, or the IPF performance measurement server). The interface allows the following HTTP methods:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Resource</th>
<th class="confluenceTh">Path</th>
<th class="confluenceTh">HTTP method</th>
<th class="confluenceTh">Scope</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd">The performance measurement data in the statistics objects</td>
<td class="confluenceTd">/statistics</td>
<td class="confluenceTd">GET</td>
<td class="confluenceTd">All statistics objects</td>
<td class="confluenceTd">Provides HTML report containing the performance measurement data in the statistics objects. The data in the generated report depends on the statistics objects that are used</td>
</tr>
<tr>
<td class="confluenceTd">The performance measurement data in the statistics objects</td>
<td class="confluenceTd">/statistics</td>
<td class="confluenceTd">DELETE</td>
<td class="confluenceTd">All statistics objects</td>
<td class="confluenceTd">Resets the statistics</td>
</tr>
</tbody></table>
<p>For example, with the configuration in <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-contexttransformerperformancemeasurement.xml"><tt>context-transformer-performance-measurement.xml</tt></a> to view the reports you should send a HTTP GET request (you can do it with a web browser) to <tt><a href="http://host:8081/statistics" rel="nofollow">http://host:8081/statistics</a></tt>, where <tt>host</tt> is the host of the IPF node with the application. To reset the statistics, send a HTTP DELETE request to that URL. <br>
<a name="IPFreference-single-configuration"></a></p>
<h1><a name="IPFreference-single-Extensionmechanism"></a>Extension mechanism</h1>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Preliminary content</b><br><p>This section is work in progress.</p></td></tr></tbody></table></div>

<p>IPF application developers are often facing the task to add some extended functionality to pre-packaged applications. This should be possible without modifying these applications. Therefore in IPF we defined an extension mechanism to help developers to overcome this problem. </p>

<p>This document provides an overview of IPF's extension mechanism which is available from IPF version 2.2.0. The IPF extension mechanism allows developers to add extensions to existing IPF applications without modifying any configuration or source files of those applications. The extension mechanism is used by applications to provide 'extension points' or 'extension hooks'. These allow you to extend an existing application with additional functionality such as custom mappings, custom HL7 model classes and many more. The IPF extension mechanism can be leveraged for both OSGi and non-OSGi based IPF applications.</p>


<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/extension-mechanism.png" align="absmiddle" border="0"></p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>The IPF extension mechanism uses the bean lifecycle interfaces of Spring framework to perform the customization, therefore it can be used in Spring based applications only.</p></td></tr></tbody></table></div>

<p>On application startup the extension mechanism searches for any extension present in the Spring application context and extends/customizes the application with that extension. In order to use the capabilities of IPF extension mechanism in your application you have to enable this feature by adding the additional Spring configuration to your application. Please see the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configurationindetail">configuration in detail</a> section for more information.</p>

<p>Here is a brief overview of initially supported extension points:</p>

<ul>
	<li><b>Custom Mappings</b> - add additional mappings between code systems, i.e. from one set of codes into a corresponding set of codes</li>
	<li><b>Custom HL7 Model Classes</b> - add support for non-standard HL7 "dialects" which are not covered by default HL7 specification</li>
	<li><b>Custom DSL Extensions</b> - activate additional DSL extensions</li>
	<li><b>Custom Route Builders</b> - add additional route builders into an existing Camel context</li>
	<li><b>Custom Interceptors</b> - add interceptors to existing routes</li>
	<li><b>Custom Exception Handlers</b> - add custom exception handlers to existing routes</li>
</ul>


<h2><a name="IPFreference-single-Usingtheextensionmechanism"></a>Using the extension mechanism</h2>

<p>This section walks you through an example which should give you basic information to help you start using the IPF extension mechanism. For more advanced usage please visit the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extension+mechanism+tutorial" title="IPF extension mechanism tutorial">IPF extension mechanism tutorial</a>.</p>

<h3><a name="IPFreference-single-Basicexample"></a>Basic example</h3>

<p>Intention of this example is to present you a very simple IPF application having the extension mechanism enabled. In addition we are going to write a custom extension and apply it on that application in order to extend its standard functionality without changing the base application part.</p>

<h4><a name="IPFreference-single-Baseapplication"></a>Base application</h4>

<p>We have provided a very simple IPF application with existing Camel route like shown on the following EIP diagram:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/base.png" align="absmiddle" border="0"></p>

<p>The application accepts the incoming messages over the http endpoint and converts the content to String. Afterwards the exchange will be routed over a seda endpoint to the file endpoint which saves the content to the file.</p>

<p>The IPF extension mechanism introduces the <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt> abstract class which should be used to write all your route builders in order to be processed by extension mechanism. Therefore the source code of the route builder represented by the EIP diagram looks like following:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>BaseRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.ipf.tutorials.config.base.route

<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder

class BaseRouteBuilder <span class="code-keyword">extends</span> CustomRouteBuilder {

    void configure(){
        from('jetty:http:<span class="code-comment">//0.0.0.0:8080/base')
</span>            .convertBodyTo(<span class="code-object">String</span>.class)
            .inOnly()
            .to('seda:file-save')

        from('seda:file-save')
            .to('file:target/output')
    }
}
</pre>
</div></div>

<p>The Spring beans definition of the base application is shown on the next xml snippet.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>base-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span> /&gt;</span>

  &lt;bean id=<span class="code-quote">"baseRoute"</span>
        class=<span class="code-quote">"org.openehealth.ipf.tutorials.config.base.route.BaseRouteBuilder"</span> /&gt;

  &lt;bean id=<span class="code-quote">"customRouteBuilderConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilderConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"camelContext"</span> ref=<span class="code-quote">"camelContext"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"postProcessor"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.core.config.SpringConfigurationPostProcessor"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"springConfigurers"</span> &gt;</span>
      <span class="code-tag">&lt;list&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"customRouteBuilderConfigurer"</span> /&gt;</span>
      <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<p>Let's take a closer look at these bean definitions. With the <b>customRouteBuilderConfigurer</b> and the <b>postProcessor</b> bean definitions in the Spring context above we have actually enabled the IPF extension mechanism in our application. The <b>customRouteBuilderConfigurer</b> bean searches inside the Spring application context for all occurrences of beans of type <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt>. If any beans of that required type were found, he will add them to the Camel context respectively. Therefore, with IPF extension mechanism enabled in your application, you are not required to add any beans of <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt> type to the Camel context like shown in the above Spring context definition.</p>

<p>Generally for each specific extension task we introduced the custom configurers. The task of every configurer is to look-up for specific extension objects inside the Spring application context and if it finds any, to provide the appropriate extension logic with the correlating custom extension object.</p>

<p>Currently IPF extension mechanism provides following configurers:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Configurer<br clear="all"> </th>
<th class="confluenceTh"> Description<br clear="all"> </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>org.openehealth.ipf.commons.map.config.CustomMappingsConfigurer</tt> </td>
<td class="confluenceTd"> Detects the custom mappings extensions. Looks for the beans of type <tt>org.openehealth.ipf.commons.map.config.CustomMappings</tt> and adds them respectively to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Mapping+Service" title="Mapping Service">BidiMappingService</a> instance. For configuration details read more in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Custommappingsdefinition">custom mappings definition</a> section.</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>org.openehealth.ipf.modules.hl7.config.CustomModelClassFactoryConfigurer</tt> </td>
<td class="confluenceTd"> Used for custom HL7 model classes extensions. Looks for the beans of <tt>org.openehealth.ipf.modules.hl7.config.CustomModelClasses</tt> type and adds them respectively to the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Messaging#HL7Messaging-CustomModelClassFactory">CustomModelClassesFactory</a> or <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Messaging#HL7Messaging-GroovyCustomModelClassFactory">GroovyCustomModelClassesFactory</a>. For configuration details read more in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomHL7modelclassesdefinition">custom HL7 model classes definition</a> section</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilderConfigurer</tt> </td>
<td class="confluenceTd"> Used to add additional route builders into an existing Camel context or to add custom exception handlers and/or inerceptors to existing routes.  Searches for the beans of <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt> type and adds them respectively to the Camel context. Find out more about it in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Customroutebuilders%2Finterceptors%2Fexceptionhandlersdefinition">configuration section</a>.</td>
</tr>
<tr>
<td class="confluenceTd"> <tt>org.openehealth.ipf.commons.core.extend.config.ExtensionConfigurer</tt> </td>
<td class="confluenceTd"> Assumes that each bean implementing the <tt>org.openehealth.ipf.commons.core.extend.config.Extension</tt> marker interface represents a custom DSL extension. It searches for the beans of that type and activates defined DSL extensions. You can find out more about it in <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CustomDSLextensionsdefinition">custom DSL extensions definition</a> section.</td>
</tr>
</tbody></table>


<p>Back to our example, the second bean in the Spring context above also a part of the extension mechanism is the <b>postProcessor</b> bean. The post processor bean holds the instances of each defined configurer and triggers the extension process in a certain phase of the spring application context startup sequence. Currently provided:</p>

<ul>
	<li><tt>org.openehealth.ipf.commons.core.config.SpringConfigurationPostProcessor</tt> - post processor for non-OSGi environments.</li>
	<li><tt>org.openehealth.ipf.osgi.extender.config.OsgiSpringConfigurationPostProcessor</tt> - post processor for OSGi environments</li>
</ul>


<p>Note that in the Spring application context above we could have defined additional configurer beans and added those references to the <b>postProcessor</b>. This way we would have enabled the extension mechanism for additional extension points (CustomMappings, CustomDSLExtensions, CustomHL7ModelClasses) respectively as described in <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configurationindetail">configuration in detail</a> section.</p>

<h4><a name="IPFreference-single-Extensionpart"></a>Extension part</h4>

<p>As a part of extension we would like to intercept all incoming exchanges to seda endpoint defined in the base application ('seda:file-save') and transform the message content in html format providing at the same time some additional exchange information in output content. The filename of the output file is also changed to <em>output.html</em>. The application should look like shown on following EIP diagram:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/extended.png" align="absmiddle" border="0"></p>

<p>The interceptor which will be used as an extension is shown on the next code snippet. The route builder of that interceptor is also required to extend the <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt> in order to be picked up by extension mechanism:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CustomInterceptor.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> extend

<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder

class CustomInterceptor <span class="code-keyword">extends</span> CustomRouteBuilder{

    void configure(){
        interceptFrom('seda:file-save')
            .setHeader(org.apache.camel.Exchange.FILE_NAME, constant('output.html'))
            .transform()
            .simple '&lt;html&gt;&lt;body&gt;&lt;p&gt;Exchange ID: ${exchangeId}&lt;/p&gt;' +
                    '&lt;p&gt;Message ID: ${id}&lt;/p&gt;' +
                    '&lt;p&gt;In Body: ${body}&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'    }
}
</pre>
</div></div>

<p>In the separate Spring context file we defined only the <b>customInterceptor</b> bean:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extension-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;lang:groovy id=<span class="code-quote">" customInterceptor "</span>
     script-source=<span class="code-quote">"classpath:extend/CustomInterceptor.groovy"</span> &gt;
    <span class="code-tag">&lt;lang:property name=<span class="code-quote">"intercepted"</span> ref=<span class="code-quote">"baseRoute"</span> /&gt;</span>
  <span class="code-tag">&lt;/lang:groovy&gt;</span>
...
</pre>
</div></div>

<p>Having the <b>intercepted</b> property defined, the extension mechanism will include this interceptor (<b>customInterceptor</b>) in the existing route builder (<b>baseRoute</b>) of the base application. The <tt>extend.CustomInterceptor</tt> is a groovy file which has to be put in the classpath of the base application and does not necessary need to be compiled. Therefore it allows you practically to write simple route builder scripts and apply them on the application without any development environment.</p>

<h4><a name="IPFreference-single-Startingtheapplication"></a>Starting the application</h4>

<p>Now, both parts of this example have to be started together inside one Spring IoC container. We solved this by using the following class in the base application to start the application:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>BaseAppMain.java</b></div><div class="codeContent panelContent">
<pre class="code-java">...
<span class="code-keyword">public</span> class BaseAppMain {
    <span class="code-keyword">private</span> <span class="code-keyword">static</span> <span class="code-object">String</span> descriptorList = <span class="code-quote">"base-context.xml"</span>;

    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(<span class="code-object">String</span>[] args) {
        <span class="code-object">String</span> customContextFiles = "";
        <span class="code-keyword">for</span> (<span class="code-object">String</span> customContext : args) {
            customContextFiles += customContext + <span class="code-quote">";"</span>;
        }
        descriptorList = customContextFiles + descriptorList;

        <span class="code-keyword">try</span> {
            Main.main(<span class="code-quote">"-ac"</span>, descriptorList);
        } <span class="code-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
    }
}
</pre>
</div></div>


<p>If started without extra arguments, the base application will have its standard behavior. Otherwise, if started with the filename of the extension context file as additional argument the functionality of the base application changed according the applied extension logic. Of course this is just one example how you can do it, no proper exception handling is provided.</p>

<p>Note that this extension affected and changed the functionality of the base application without any changes made in configuration or source of that application!</p>


<h2><a name="IPFreference-single-Configurationindetail"></a>Configuration in detail</h2>

<h3><a name="IPFreference-single-Postprocessorsandconfigurersdefinition"></a>Post processors and configurers definition</h3>

<p>To activate the IPF extension mechanism in your non-OSGi application you need to define all configurers you would like to use and add them to the post processor like shown on the spring beans definition below:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

...

  <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span> /&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"bidiMappingService"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span>/&gt;</span>

  &lt;bean id=<span class="code-quote">"customMappingsConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.config.CustomMappingsConfigurer"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"bidiMappingService"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"customModelClassFactory"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.parser.CustomModelClassFactory"</span> /&gt;

  &lt;!-- For HL7 model scripts compiled at runtime, use:
  &lt;bean id=<span class="code-quote">"customModelClassFactory"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.parser.GroovyCustomModelClassFactory"</span> /&gt;
  --&gt;

  &lt;bean id=<span class="code-quote">"customModelClassesConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.config.CustomModelClassFactoryConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"customModelClassFactory"</span> ref=<span class="code-quote">"customModelClassFactory"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"customRouteBuilderConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilderConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"camelContext"</span> ref=<span class="code-quote">"camelContext"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"customExtensionConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.core.extend.config.ExtensionConfigurer"</span>&gt;
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"postProcessor"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.core.config.SpringConfigurationPostProcessor"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"springConfigurers"</span> &gt;</span>
        <span class="code-tag">&lt;list&gt;</span>
          <span class="code-tag">&lt;ref bean=<span class="code-quote">"customMappingsConfigurer"</span> /&gt;</span>
          <span class="code-tag">&lt;ref bean=<span class="code-quote">"customModelClassesConfigurer"</span> /&gt;</span>
          <span class="code-tag">&lt;ref bean=<span class="code-quote">"customRouteBuilderConfigurer"</span> /&gt;</span>
          <span class="code-tag">&lt;ref bean=<span class="code-quote">"customExtensionConfigurer"</span> /&gt;</span>
        <span class="code-tag">&lt;/list&gt;</span>
      <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>In the OSGi environement this step is not required because each configurer is defined as a service in the OSGi service registry and the coupling between configurers and the post processor is made automatically by the <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support#OSGisupport-StandaloneIPFruntime">IPF Runtime</a>.</p></td></tr></tbody></table></div>

<p>You have the possibility to assign the <b>order</b> property to each of defined configurers. The one with higher priority gets processed before the ones with lower priority. Order property value of 1 has higher priority than value of 2. Default order value of every configurer is Integer.MAX_VALUE what basically means the lowest priority. The only exception is the ExtensionConfigurer with order value set to 2 which is necessary in order to activate all DSL extensions by default before any other configuration takes place. See the example:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extender-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  <span class="code-tag"><span class="code-comment">&lt;!-- This configurer gets processed as third --&gt;</span></span>
  &lt;bean id=<span class="code-quote">"customMappingsConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.config.CustomMappingsConfigurer"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"bidiMappingService"</span> /&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"order"</span> value=<span class="code-quote">"10"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- This configurer gets processed first --&gt;</span></span>
  &lt;bean id=<span class="code-quote">"customModelClassesConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.config.CustomModelClassFactoryConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"customModelClassFactory"</span> ref=<span class="code-quote">"customModelClassFactory"</span> /&gt;</span>
    <span class="code-tag">&lt;property name=<span class="code-quote">"order"</span> value=<span class="code-quote">"1"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- This configurer gets processed as a last one (default order = Integer.MAX_VALUE) --&gt;</span></span>
  &lt;bean id=<span class="code-quote">"customRouteBuilderConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilderConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"camelContext"</span> ref=<span class="code-quote">"camelContext"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- This configurer gets processed second (default order = 2) --&gt;</span></span>
  &lt;bean id=<span class="code-quote">"customExtensionConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.core.extend.config.ExtensionConfigurer"</span>&gt;
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<h3><a name="IPFreference-single-Custommappingsdefinition"></a>Custom mappings definition</h3>

<p>This sample shows you how to define custom mapping scripts and extend your base application with them. Assuming you have one or several <a href="http://repo.openehealth.org/confluence/display/ipf2/Mapping+Service#MappingService-DefinitionofMappings">mapping definitions</a>, you would need to define a <tt>org.openehealth.ipf.commons.map.config.CustomMappings</tt> bean in your custom spring context file which references one or more mapping scripts you wish to inject in the base application. It has to run in the same application context as the base application you already defined above.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>custom-context1.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;bean id=<span class="code-quote">"customMapping1"</span>
      class=<span class="code-quote">"org.openehealth.ipf.commons.map.config.CustomMappings"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScripts"</span>&gt;</span>
        <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>classpath:config1.map<span class="code-tag">&lt;/value&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>classpath:config2.map<span class="code-tag">&lt;/value&gt;</span>
        <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>custom-context2.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;bean id=<span class="code-quote">"customMapping2"</span>
      class=<span class="code-quote">"org.openehealth.ipf.commons.map.config.CustomMappings"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScript"</span> value=<span class="code-quote">"classpath:config3.map"</span> /&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>Those mapping definitions will be recognized by the <tt>CustomMappingsConfigurer</tt> and automatically added to the shared <tt>BidiMappingService</tt></p>

<h3><a name="IPFreference-single-CustomHL7modelclassesdefinition"></a>Custom HL7 model classes definition</h3>

<p>You can define custom HL7v2 internal message structures other than the ones defined in your base application. For more information please refer to our <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Messaging#HL7Messaging-CustomModelClassFactory">HL7 messaging</a> wiki sections and <a href="http://hl7api.sourceforge.net/" rel="nofollow">HAPI documentation </a> as well.<br>
Custom HL7 message structures are added by defining an <tt>org.openehealth.ipf.modules.hl7.config.CustomModelClasses</tt> bean in your custom application context. This bean definition represents a mapping with a message structure version as a mapping-key and the package name of custom model classes as a mapping-value. These custom message structures have priority over the existing message structures.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>custom-context1.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
&lt;bean id=<span class="code-quote">"customClasses"</span>
      class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.config.CustomModelClasses"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"modelClasses"</span>&gt;</span>
        <span class="code-tag">&lt;map&gt;</span>
            <span class="code-tag">&lt;entry key=<span class="code-quote">"2.5"</span>&gt;</span>
                <span class="code-tag">&lt;list&gt;</span>
                    <span class="code-tag">&lt;value&gt;</span>org.openehealth.ipf.modules.hl7.parser.test.hl7v2.def.v25<span class="code-tag">&lt;/value&gt;</span>
                <span class="code-tag">&lt;/list&gt;</span>
            <span class="code-tag">&lt;/entry&gt;</span>
        <span class="code-tag">&lt;/map&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
<span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<p>The custom model classes from the given package will be recognized by the <tt>CustomModelClassFactoryConfigurer</tt> and automatically added to the shared <tt>CustomModelClassFactory</tt>.</p>

<p>If you also like to add the <tt>CustomModelClasses</tt> definitions for not-compiled groovy scripts you should use the <tt>GroovyCustomModelClassFactory</tt> instead of the <tt>CustomModelClassFactory</tt> like shown on the following spring-context definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extender-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;bean id=<span class="code-quote">"groovyCustomModelClassFactory"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.parser.GroovyCustomModelClassFactory"</span>&gt;
      <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"javaCustomModelClassFactory"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"javaCustomModelClassFactory"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.parser.CustomModelClassFactory"</span> &gt;
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"configurer"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.config.CustomModelClassFactoryConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"customModelClassFactory"</span> ref=<span class="code-quote">"groovyCustomModelClassFactory"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<p>With definition like that you will be able to define the compiled classes and also not-compiled groovy scripts at the same time:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>custom-context1.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;bean id=<span class="code-quote">"customClasses"</span> 
    class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.config.CustomModelClasses"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"modelClasses"</span>&gt;</span>
      <span class="code-tag">&lt;map&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"2.5"</span>&gt;</span><span class="code-tag"><span class="code-comment">&lt;!-- compiled classes --&gt;</span></span>
          <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>org.openehealth.ipf.modules.hl7.parser.compiled.hl7v2.def.v25<span class="code-tag">&lt;/value&gt;</span>
          <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/entry&gt;</span>
        <span class="code-tag">&lt;entry key=<span class="code-quote">"2.4"</span>&gt;</span><span class="code-tag"><span class="code-comment">&lt;!-- groovy scripts --&gt;</span></span>
          <span class="code-tag">&lt;list&gt;</span>
            <span class="code-tag">&lt;value&gt;</span>org.openehealth.ipf.modules.hl7.parser.notcompiled.hl7v2.def.v24<span class="code-tag">&lt;/value&gt;</span>
          <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/entry&gt;</span>
      <span class="code-tag">&lt;/map&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<h3><a name="IPFreference-single-CustomDSLextensionsdefinition"></a>Custom DSL extensions definition</h3>

<p>All custom <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">DSL extensions</a> should implement the <tt>org.openehealth.ipf.commons.core.extend.config.Extension</tt> marker interface in order to be picked up and activated from its corresponding extension configurer (see the example).</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">import</span> org.apache.camel.builder.RouteBuilder
<span class="code-keyword">import</span> org.openehealth.ipf.commons.core.extend.config.Extension

class CustomModelExtension <span class="code-keyword">implements</span> Extension {
    <span class="code-keyword">static</span> extensions = {
        RouteBuilder.metaClass.direct = { <span class="code-object">String</span> endpointName -&gt;
            delegate.from('direct:' + endpointName)
        }
    }
}
</pre>
</div></div>

<p>In addition you need to define it as a bean in your custom spring context file and make sure that it runs in the same application context as the base application:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>custom-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
&lt;lang:groovy id=<span class="code-quote">"customExtension"</span>
     script-source=<span class="code-quote">"classpath:org/openehealth/ipf/tutorial/config/extend/CustomModelExtension.groovy"</span> /&gt;
...
</pre>
</div></div>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>The IPF extension mechanism will be also applied to not-compiled groovy scripts so you can use the <b>lang:groovy</b> notation in your spring bean definition as well.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-Customroutebuilders%2Finterceptors%2Fexceptionhandlersdefinition"></a>Custom route builders/interceptors/exception handlers definition</h3>

<p>With the custom route builders you have the possibilities to:</p>
<ul>
	<li>extend the base application functionality by adding additional route builders to the existing camel context</li>
	<li>extend the existing route builder functionality by injecting additional <a href="http://camel.apache.org/intercept.html" rel="nofollow">interceptors</a> to this route builder</li>
	<li>extend the existing route builder exception handling by injecting additional <a href="http://camel.apache.org/exception-clause.html" rel="nofollow">exception handlers</a> to this route builder</li>
</ul>


<p>In order to do so we have provided an abstract class <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt> which should be extended by all your route builders (also the ones in your base application). If the <b>intercepted</b> property is set, it will be assumed that the custom route builder is an interceptor or an exception handler and the <tt>CustomRouteBuilderConfigurer</tt> will try to inject it to the referenced intercepted route builder. Otherwise if the <b>intercepted</b> property is not set the <tt>CustomRouteBuilderConfigurer</tt> will inject this custom route builder to the existing camel context.</p>

<p>The <tt>CustomRouteBuilder</tt> beans will be recognized by the <tt>CustomRouteBuilderConfigurer</tt> and added in desired order to the camel context respectively. Let's see an example. Assuming you have a base route defined in the application:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>BaseRoute.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class BaseRoute <span class="code-keyword">extends</span> CustomRouteBuilder{
    void configure() {
        ...
        from('seda:input')...
        ...
    }
}
</pre>
</div></div>

<p>With the following spring definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span> /&gt;</span>

<span class="code-tag">&lt;bean id=<span class="code-quote">"baseRoute"</span> class=<span class="code-quote">"org.openehealth.ipf.tutorial.config.route.BaseRoute"</span> /&gt;</span>
...
</pre>
</div></div>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>In the spring beans definition you don't have to add the custom route builders explicitly to the camel context. The IPF extension mechanism does that for you.</p></td></tr></tbody></table></div>

<p>The custom <a href="http://camel.apache.org/intercept.html" rel="nofollow">interceptor</a> defined in separate <tt>CustomRouteBuilder</tt> should extend the functionality of the <tt>BaseRoute</tt> by intercepting the inputs from 'seda:input' endpoint:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CustomInterceptingRoute.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class CustomInterceptingRoute <span class="code-keyword">extends</span> CustomRouteBuilder{
    void configure() {
        interceptFrom('seda:input').transmogrify('customTransmogrifier')
    }
}
</pre>
</div></div>

<p>The spring beans definition is shown below. Note the <b>intercepted</b> property is set to the custom route builder you wish to intercept:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd"&gt;

  &lt;lang:groovy id=<span class="code-quote">"interceptorRoute"</span>
     script-source=<span class="code-quote">"classpath:config/CustomInterceptingRoute.groovy"</span> &gt;
    <span class="code-tag">&lt;lang:property name=<span class="code-quote">"intercepted"</span> ref=<span class="code-quote">"baseRoute"</span> /&gt;</span>
  <span class="code-tag">&lt;/lang:groovy&gt;</span>

  &lt;lang:groovy id=<span class="code-quote">"customTransmogrifier"</span>
     script-source=<span class="code-quote">"classpath:config/CustomTransmogrifier.groovy"</span> /&gt;

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>If started in same application context, this interceptor will intercept all incoming exchanges to the "seda:input" endpoint in the base route and <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Transmogrifier">transmogrify</a> it with the logic implemented in <tt>customTransmogrifier</tt> bean (not shown in this sample).</p>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>Please note that in OSGi environment the <tt>CustomRouteBuilderConfigurer</tt> is not activated. We are currently evaluating the possibility of providing the CamelContext as an OSGi service which is a prerequsite to use this specific configurer.</p></td></tr></tbody></table></div>


<h2><a name="IPFreference-single-Design"></a>Design</h2>

<p>This section provides a design overview of the extension mechanism provided by the IPF and at the same time is intended to offer you the guidelines of how to develop the similar extensions yourself.<br>
First let's take a look at the following sequence diagram and see how this mechanism really works. Entry point of the configuration post processing in non-OSGi environment is the <em>afterPropertiesSet()</em> method invoked by the spring application contexts BeanFactory after it has set all bean properties. By that time the application context has loaded all defined beans and the customization can take place.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/post-processor.png" align="absmiddle" border="0"></p>

<p>The post processor holds the instances of each defined configurer and loops over this collection to find out whether any of those configurers can find some custom extension object (<b>lookup</b> method) inside the bean factory. If any required extension objects found, the configurer will perform the extension (<b>configure</b> method) with each of them according to his customization logic.</p>

<h3><a name="IPFreference-single-Configurers"></a>Configurers</h3>

<p>For each specific extension/customization task we introduced the custom configurers. The task of every configurer is to look-up for the specific extension objects inside the application context and provide the appropriate customization logic with the correlating custom extension object. To be able to separate the lookup logic between the OSGi and non-OSGi applications we have provided two abstract configurers (<tt>org.openehealth.ipf.commons.core.config.SpringConfigurer</tt> and <tt>org.openehealth.ipf.osgi.extender.config.OsgiSpringConfigurer</tt>). Each of them targets the specific environment for the extension lookup.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/spring-configurer.png" align="absmiddle" border="0"></p>

<p>In order to provide desirable order of processing, the <tt>SpringConfigurer</tt> implements a <tt>java.util.Comparable</tt> interface. Attribute <b>order</b> is used to compare between configurers as decribed in <span class="error">[configuration in detail]</span> section.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/osgi-configurer.png" align="absmiddle" border="0"></p>

<p>The <tt>OsgiSpringConfigurer</tt> is able to make a lookup through the BundleContext as well. Currently the IPF provides only one concrete <tt>OsgiSpringConfigurer</tt> and that is the <tt>org.openehealth.ipf.osgi.extender.config.extend.OsgiExtensionConfigurer</tt> which searches in manifest header of each bundle for the entries of a kind:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Extension-Beans:...
</pre>
</div></div>

<p>If found, those extension beans will be found from provided <tt>ListableBeanFactory</tt> and globally activated inside the running OSGi platform as described in <a href="http://repo.openehealth.org/confluence/display/ipftools/OSGi+support#OSGisupport-OSGisupportThe%7B%7Bosgiextenderspring%7D%7Dfragment">OSGi support</a> pages. </p>

<h3><a name="IPFreference-single-Postprocessors"></a>Post processors</h3>

<p>In order to provide some custom modifications of application context's bean definitions we have introduced the post processors. Post processors implementation is strongly leaned on standard bean lifecycle interfaces of the Spring Framework which allows you to perform the custom initialization. The IPF's extension mechanism introduces two post processors of that kind, one for the application customization in OSGi (<tt>org.openehealth.ipf.osgi.extender.config.OsgiSpringConfigurationPostProcessor</tt>)</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/post-processor-osgi.png" align="absmiddle" border="0"></p>

<p>and another one for non-OSGi (<tt>org.openehealth.ipf.commons.core.config.SpringConfigurationPostProcessor</tt>) environments.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/post-processor-non-osgi.png" align="absmiddle" border="0"></p>

<p>Both post processors are holding the collection of all defined configurers and initiating the extension process by calling lookup() and configure() methods of each configurer.</p>

<h3><a name="IPFreference-single-Nextsteps"></a>Next steps</h3>

<p>You may find very useful the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extension+mechanism+tutorial" title="IPF extension mechanism tutorial">IPF extension mechanism tutorial</a>. Also you may try implementing the custom configurers and extensions for your own extension use case which is not covered by standard features of the IPF extension mechanism.</p>
<h1><a name="IPFreference-single-Qualityofservice"></a>Quality of service</h1>

<p>This sections describes how to implement non-functional requirements in IPF applications. Non-functional requirements can be categorized into <em>recoverability</em> requirements and <em>availability</em> requirements. Recoverability means that a system can recover from crashes or service failures without loosing messages or data. Service failures arise, for example, from temporary unavailability of external services an IPF application depends on. Availability refers to the percentage of time an application is available for processing messages or data and the amount of time it needs for that processing. </p>

<h2><a name="IPFreference-single-Recoverability"></a>Recoverability</h2>

<p>IPF provides failure recovery mechanisms via messaging over transactional message queues and via the flow manager.</p>

<h3><a name="IPFreference-single-Transactionalmessaging"></a>Transactional messaging</h3>

<p>Transactional messaging means reading a message from a source queue, processing the messages and writing the result message(s) to one or more target queues within a single system transaction. Depending on the message broker and transaction manager in use the configuration options can vary significantly. Here we focus on ActiveMQ as message broker and Spring's JMS transaction manager for managing local transactions. For possible alternatives such as <a href="http://activemq.apache.org/should-i-use-xa.html" rel="nofollow">XA transactions</a> and <a href="http://camel.apache.org/jms.html" rel="nofollow">advanced configuration options</a> refer to the Apache Camel documentation. The following subsections describe different use cases for transactional messaging.</p>

<h4><a name="IPFreference-single-Recoverfromprocessorfailures"></a>Recover from processor failures</h4>

<p>Let's start with an example. We read a message from queue A and send a copy of it to processor X and processor Y. After processor X and Y finished their work they send the processing result to queue B and C, respectivly. We only want the processed messages to be sent to queues B and C if <b>both</b> processors X and Y succeed. If processor X succeeds and writes the message to queue B but process Y fails we want to undo the writing to queue B. To achieve this we have to define a transaction boundary in which queues A, B and C participate. Failure of process Y causes the transaction to be rolled back and so the writing to queue B. Usually, for every messages we read from queue A we start a new transaction. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tx-1.JPG" align="absmiddle" border="0"></p>

<p>If it can be expected that a re-delivery of the original message will lead to the same processing error then the original message should be sent to a dead letter queue (DLQ) immediately. Otherwise, the messaging system should be configured to redeliver the message after a rollback. </p>

<h4><a name="IPFreference-single-RecoverfromJVMcrashes"></a>Recover from JVM crashes</h4>

<p>Another category of failures we have to look at are JVM crashes. After re-starting a crashed JVM we want all messages whose transactions have not been committed to be re-delivered and we also want to avoid message duplication. Imagine that processors X and Y both successfully processed the message and one message has already been written to queue B but before the other message is written to queue C the JVM crashes. After a JVM re-start we want the original message to be re-consumed from queue A but we do not want the message that has previously been written to queue B to be consumed from there if the overall processing (i.e. processor X and Y and writing to queues B and C) did not successfully complete. Otherwise, we'd create a message duplicate if the re-consumed message from queue A is processed again and written to queue B (a second time). We can avoid this by defining a transaction boundary as shown in the following figure. Additionally, the queues need to persist their messages in order to survive JVM crashes.</p>

<p><img src="http://repo.openehealth.org/confluence/download/attachments/3211275/tx-2.JPG" align="absmiddle" border="0"></p>

<h4><a name="IPFreference-single-Recoverfromfaileddeliveries"></a>Recover from failed deliveries</h4>

<p>Remote communication with external systems may fail for several reasons. Examples are transport failures or temporary downtimes. In these cases a re-delivery of a message may succeed. One option to configure message redelivery is via transactional queues. As shown in the next figure, if the message delivery to a web application fails, the HTTP endpoint generates an exception that causes the current transaction to be rolled back. The queueing system can be configured to redeliver messages (with a configurable delay) after a transaction has been rolled back.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tx-3.JPG" align="absmiddle" border="0"></p>

<h4><a name="IPFreference-single-Distributedtransactionprocessing"></a>Distributed transaction processing</h4>

<p>For distributed transaction processing you'll need an XA transaction manager and resources that support the X/Open CAE Specification (the XA protocol). Many database management systems and message brokers support XA. Distributed transaction processing coordinates two or more resource managers in a global XA transaction. For example, if you want to read a message from one queue, write it to another queue and update a row in a relational database inside a single system transaction then you'll need XA if the database and the JMS queues are managed by different resource managers. The best way to use XA with IPF is to use transactional resources provided by JEE application servers.</p>

<h4><a name="IPFreference-single-Configuration"></a>Configuration</h4>

<p>This section explains how to configure Camel, ActiveMQ and your message processing route to </p>

<ul>
	<li>recover from processor failures</li>
	<li>recover from JVM crashes and</li>
	<li>recover from failed deliveries</li>
</ul>


<p>Running examples can be found in the <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a> and in the JUnit test <tt>org.openehealth.ipf.platform.camel.core.camel.transaction.TransactionalMessagingTest</tt> of the <tt>platform-camel-core</tt> component. The route configuration in the JUnit test is well documented. Here's a summary of the most important aspects. We start by configuring two JMS components. We define one for internal message processing (<tt>amqProcess</tt> with a redelivery count of 0) and another one for message delivery to destinations (<tt>amqProcess</tt> with a redelivery count of 1). That's a bit redundant but that's needed because the redelivery policy is bound to an <tt>ActiveMQConnectionFactory</tt> and the Camel JMS component cannot manage more than one connection factory. However, we configure only a single message broker. JMS destinations created by one JMS component can be used by the other JMS component. Alternatively, you may also <a href="http://camel.apache.org/error-handler.html" rel="nofollow">configure redeliveries in your routes</a> but this is discouraged when doing transactional messaging.</p>

<p>In the next listing you see the configuration of the JMS component (<tt>amqProcess</tt>) we use for internal, transactional message processing. Here, we define a redelivery policy saying that we want to turn off redeliveries (<tt>maximumRedeliveries=0</tt>). In other words, if there is an internal processing error we don't want ActiveMQ to redeliver the message. In the <tt>amqConfigProcess</tt> bean we set the a local JMS transaction Manager which is provided by the Spring framework. To turn on transactional messaging we additionally have to set the <tt>transacted</tt> property to <tt>true</tt>. We also use a <tt>SingleConnectionFactory</tt> for caching a single connection created by <tt>ActiveMQConnectionFactory</tt>. This dramatically improves performance.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-transaction-process.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Transaction Management                                            --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"jmsTransactionManagerProcess"</span> class=<span class="code-quote">"org.springframework.jms.connection.JmsTransactionManager"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"connectionFactory"</span> ref=<span class="code-quote">"jmsCachingConnectionFactoryProcess"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
  
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  ActiveMQ Setup                                                    --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"amqConfigProcess"</span> class=<span class="code-quote">"org.apache.camel.component.jms.JmsConfiguration"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"connectionFactory"</span> ref=<span class="code-quote">"jmsCachingConnectionFactoryProcess"</span>/&gt;</span> 
      <span class="code-tag">&lt;property name=<span class="code-quote">"transactionManager"</span> ref=<span class="code-quote">"jmsTransactionManagerProcess"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"concurrentConsumers"</span> value=<span class="code-quote">"3"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"maxConcurrentConsumers"</span> value=<span class="code-quote">"5"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"transacted"</span> value=<span class="code-quote">"true"</span>/&gt;</span> 
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"amqProcess"</span> class=<span class="code-quote">"org.apache.camel.component.jms.JmsComponent"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"configuration"</span> ref=<span class="code-quote">"amqConfigProcess"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"jmsCachingConnectionFactoryProcess"</span> class=<span class="code-quote">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"targetConnectionFactory"</span> ref=<span class="code-quote">"jmsConnectionFactoryProcess"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span> 

  <span class="code-tag">&lt;bean id=<span class="code-quote">"jmsConnectionFactoryProcess"</span> class=<span class="code-quote">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"brokerURL"</span> value=<span class="code-quote">"tcp://localhost:60001"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"redeliveryPolicy"</span> ref=<span class="code-quote">"redeliveryPolicyProcess"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"redeliveryPolicyProcess"</span> class=<span class="code-quote">"org.apache.activemq.RedeliveryPolicy"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"maximumRedeliveries"</span> value=<span class="code-quote">"0"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>In the next listing you see the configuration of the JMS component (<tt>amqProcess</tt>) we use for message delivery to destinations. This configuration is equivalent to the above except that the maximum redelivery count is set to 1. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-transaction-delivery.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Transaction Management                                            --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"jmsTransactionManagerDelivery"</span> class=<span class="code-quote">"org.springframework.jms.connection.JmsTransactionManager"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"connectionFactory"</span> ref=<span class="code-quote">"jmsCachingConnectionFactoryDelivery"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
  
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  ActiveMQ Setup                                                    --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"amqConfigDelivery"</span> class=<span class="code-quote">"org.apache.camel.component.jms.JmsConfiguration"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"connectionFactory"</span> ref=<span class="code-quote">"jmsCachingConnectionFactoryDelivery"</span>/&gt;</span> 
      <span class="code-tag">&lt;property name=<span class="code-quote">"transactionManager"</span> ref=<span class="code-quote">"jmsTransactionManagerDelivery"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"concurrentConsumers"</span> value=<span class="code-quote">"3"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"maxConcurrentConsumers"</span> value=<span class="code-quote">"5"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"transacted"</span> value=<span class="code-quote">"true"</span>/&gt;</span> 
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"amqDelivery"</span> class=<span class="code-quote">"org.apache.camel.component.jms.JmsComponent"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"configuration"</span> ref=<span class="code-quote">"amqConfigDelivery"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"jmsCachingConnectionFactoryDelivery"</span> class=<span class="code-quote">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"targetConnectionFactory"</span> ref=<span class="code-quote">"jmsConnectionFactoryDelivery"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span> 

  <span class="code-tag">&lt;bean id=<span class="code-quote">"jmsConnectionFactoryDelivery"</span> class=<span class="code-quote">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"brokerURL"</span> value=<span class="code-quote">"tcp://localhost:60001"</span>/&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"redeliveryPolicy"</span> ref=<span class="code-quote">"redeliveryPolicyDelivery"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"redeliveryPolicyDelivery"</span> class=<span class="code-quote">"org.apache.activemq.RedeliveryPolicy"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"maximumRedeliveries"</span> value=<span class="code-quote">"1"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>Finally, we configure the message broker and the route builder that contains the definition of the transactional messaging route. In our example, we use the route builder that is also used in the <tt>org.openehealth.ipf.platform.camel.core.camel.transaction.TransactionalMessagingTest</tt> of the <tt>platform-camel-core</tt> component.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-transaction-activemq.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:amq</span>=<span class="code-quote">"http://activemq.org/config/1.0"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://activemq.org/config/1.0 
http://activemq.apache.org/schema/core/activemq-core-5.0.0.xsd"&gt;

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  ActiveMQ Broker Setup                                             --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;amq:broker useJmx=<span class="code-quote">"false"</span> persistent=<span class="code-quote">"true"</span> brokerName=<span class="code-quote">"localhost"</span> useShutdownHook=<span class="code-quote">"true"</span>&gt;</span>
    <span class="code-tag">&lt;amq:transportConnectors&gt;</span>
        <span class="code-tag">&lt;amq:transportConnector uri=<span class="code-quote">"tcp://localhost:60001"</span>/&gt;</span>
    <span class="code-tag">&lt;/amq:transportConnectors&gt;</span>
    <span class="code-tag">&lt;amq:persistenceAdapter&gt;</span>
      <span class="code-tag">&lt;amq:amqPersistenceAdapter cleanupInterval=<span class="code-quote">"2000"</span>/&gt;</span>
    <span class="code-tag">&lt;/amq:persistenceAdapter&gt;</span>
  
  <span class="code-tag">&lt;/amq:broker&gt;</span>
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context-transaction.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Camel and RouteBuilder Setup                                      --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
    <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>
  <span class="code-tag">&lt;/camel:camelContext&gt;</span>

  &lt;bean id=<span class="code-quote">"routeBuilder"</span> 
      class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.camel.transaction.TransactionalMessagingRouteBuilder"</span>&gt;
  <span class="code-tag">&lt;/bean&gt;</span>

  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!--  Broker Factory Bean                                               --&gt;</span></span>
  <span class="code-tag"><span class="code-comment">&lt;!-- ================================================================== --&gt;</span></span>

  <span class="code-tag">&lt;bean id=<span class="code-quote">"broker"</span> class=<span class="code-quote">"org.apache.activemq.xbean.BrokerFactoryBean"</span>&gt;</span>
      <span class="code-tag">&lt;property name=<span class="code-quote">"config"</span> value=<span class="code-quote">"/context-activemq.xml"</span>/&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Transactionalroutes"></a>Transactional routes</h4>

<p>To define a transactional message processing route for internal message processing you refer to JMS destinations via the <tt>amqProcess</tt> component.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Transactional message processing</b></div><div class="codeContent panelContent">
<pre class="code-java">from('amqProcess:queue:input')          <span class="code-comment">// read message from queue:input via amqProcess JMS component (starts <span class="code-keyword">new</span> transaction)
</span>    ...                                 <span class="code-comment">// <span class="code-keyword">do</span> whatever message processing is needed (transaction is rolled back on failure)
</span>    .to('amqProcess:queue:output')      <span class="code-comment">// write processed message to queue:output via amqProcess JMS component (commit transaction)</span>
</pre>
</div></div>

<p>You may also define several output queues e.g. when using <a href="http://camel.apache.org/multicast.html" rel="nofollow">multicast</a>. In this case, writing the messages to all destination queues must be successful otherwise the transaction is rolled back and none of the output queues will make their message available to consumers. For details refer to the <tt>org.openehealth.ipf.platform.camel.core.camel.transaction.TransactionalMessagingTest</tt> of the <tt>platform-camel-core</tt> component.</p>

<p>To define transactional message delivery to an HTTP endpoint you refer to the JMS destination that the message is read from via the <tt>amqDelivery</tt> component. Whenever there is a delivery failure the HTTP endpoint will throw an exception. This exception will cause the current transaction to be rolled back. After rollback the message is redelivered once (see <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Configuration">configuration</a>). </p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Transactional message delivery</b></div><div class="codeContent panelContent">
<pre class="code-java">from('amqDelivery:queue:output')          <span class="code-comment">// read message from queue:output via amqDelivery JMS component (starts <span class="code-keyword">new</span> transaction)
</span>    .to('http:<span class="code-comment">//somehost:8080/somepath')  // send message to HTTP service. The transaction will be committed of successful otherwise
</span>                                          <span class="code-comment">// rolled back and redelivered once by queue:output.</span>
</pre>
</div></div>

<p>For details how the Camel HTTP component reacts on different status codes refer to the documentation of the <a href="http://camel.apache.org/http.html" rel="nofollow">HTTP component</a>. Please note that the destination system does <b>not</b> participate in the transaction that has been started by the transactional queue. If you want the destination system to participate in the transaction you'll have to use a distributed transaction manager and a protocol capable of passing the transaction context that both communication partners understand.</p>

<h3><a name="IPFreference-single-Flowmanagement"></a>Flow management</h3>

<p>For recovery cases that are not in scope of automated redelivery policies of transactional message queues you can use the message replay functionality of the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow manager</a>. For example, if the automated redelivery to a destination system failed several times and the message was added to a DLQ (dead letter queue) you can replay the message manually at a later time with the flow manager. You use the flow manager to search all messages that have not been successfully delivered over a certain period of time and then replay these messages from the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a> or any other JMX console.</p>

<h3><a name="IPFreference-single-Processmanagement"></a>Process management</h3>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Preliminary content</b><br><p>Long running transactions and their compensation will be supported in a later IPF release.</p></td></tr></tbody></table></div>

<h2><a name="IPFreference-single-Availability"></a>Availability</h2>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Preliminary content</b><br><p>This section is work in progress.</p></td></tr></tbody></table></div>

<p>The following table summarizes availability aspects.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Availability Aspect</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd">Message distribution</td>
<td class="confluenceTd">Persistence, availability and distribution of messages across several nodes is discussed in <a href="http://activemq.apache.org/clustering.html" rel="nofollow">ActiveMQ clustering</a>. IPF's availability support strongly relies on ActiveMQ's clustering support but you may also use any other JMS broker with IPF using Camel's <a href="http://camel.apache.org/jms.html" rel="nofollow">JMS component</a>.</td>
</tr>
<tr>
<td class="confluenceTd">Stateless processing</td>
<td class="confluenceTd">As long as you don't maintain state in your IPF applications you may distribute it over several nodes and use a load balancer to achieve higher service availability (and performance) of course. Applications that do short-running message processing are good candidates for stateless applications. Even for long running message processing you may write stateless IPF applications if you can persist processing state in an external service (assuming that this external service is high-available too).</td>
</tr>
<tr>
<td class="confluenceTd">Stateful processing</td>
<td class="confluenceTd">If you're using a process engine with IPF or store data in any application-specific way then your IPF application is stateful. To make stored data available to all processing nodes you may access your data using a shared database instance or replicate your data across message processing nodes. Using a shared instance introduces a single point of failure. This can be avoided using database clusters (which replicate data under the cover).</td>
</tr>
<tr>
<td class="confluenceTd">Flow management</td>
<td class="confluenceTd">The <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow manager</a> is a service provided by IPF for storing, monitoring and replaying messages. If you setup an IPF application cluster e.g. using a <a href="http://activemq.apache.org/networks-of-brokers.html" rel="nofollow">network of message brokers</a> then a message added to a queue by one processing node can be read from that queue by another processing node. This requires that flow management data is available across all processing nodes. By default IPF uses a shared Derby database for this purpose. To make the shared database high-available you could switch to a clustered MySQL or Oracle database, for example. Configuration of database access via Hibernate/JDBC is described in the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management#Flowmanagement-Configuration">flow manager configuration</a> section.</td>
</tr>
<tr>
<td class="confluenceTd">Load balancing</td>
<td class="confluenceTd">Load balancing is usually not done inside IPF applications (i.e. route definitions) but with a separate load balancer that distributes requests to processing nodes that run IPF application instances. If you want to use a software load-balancer one option is to choose an Apache HTTP Server with <a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html" rel="nofollow">mod_proxy_balancer</a>.</td>
</tr>
</tbody></table>

<p>A running example of a two-node IPF application cluster is the <a href="http://repo.openehealth.org/confluence/display/ipf2/Reference+application" title="Reference application">reference application</a>.</p>
<h1><a name="IPFreference-single-AppendixAIPFdevelopment"></a>Appendix A - IPF development</h1>

<h2><a name="IPFreference-single-Environment"></a>Environment</h2>

<h3><a name="IPFreference-single-Java"></a>Java</h3>

<p>IPF currently requires <a href="http://java.sun.com/javase/6/" rel="nofollow">Java SE 6</a> for both compile time and runtime. Before continuing make sure you have the Java SE 6 SDK <a href="http://java.sun.com/javase/6/webnotes/install/index.html" rel="nofollow">installed</a>.</p>


<h3><a name="IPFreference-single-Maven"></a>Maven</h3>

<p><a name="IPFreference-single-mavensetup"></a></p>

<h4><a name="IPFreference-single-Initialsetup"></a>Initial setup</h4>

<p>IPF uses <a href="http://maven.apache.org/" rel="nofollow">Maven 2</a> as its build tool. If you haven't installed Maven 2 yet go to the Maven <a href="http://maven.apache.org/download.html" rel="nofollow">download page</a> and download version 2.0.9 or higher and follow the installation instructions. It is most likely that you will have to make some additional configuration in the Maven <tt>settings.xml</tt> file.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Location of settings.xml</b><br><p>You can find the <tt>settings.xml</tt> file in the <tt>.m2</tt> folder in your home directory (<tt>~/.m2/settings.xml</tt> on Unix-based systems and <tt>%homepath%\.m2\settings.xml</tt> on Windows). If the file is not there then copy it from <tt>$M2_HOME/conf/settings.xml</tt> where <tt>$M2_HOME</tt> is the root folder of your Maven installation.</p></td></tr></tbody></table></div>

<p>If you're using a proxy to access the internet you'll need to add the proxy settings to Maven's <tt>settings.xml</tt> file. Here is the template, note that some fields are optional (id, nonProxyHosts) and the username/password required only if you have to authenticate against your proxy.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
	&lt;proxies&gt;
		&lt;proxy&gt;
			&lt;id&gt;optional&lt;/id&gt;
			&lt;active&gt;<span class="code-keyword">true</span>&lt;/active&gt;
			&lt;protocol&gt;http&lt;/protocol&gt;
			&lt;username&gt;proxyuser&lt;/username&gt;
			&lt;password&gt;proxypass&lt;/password&gt;
			&lt;host&gt;proxy.host.net&lt;/host&gt;
			&lt;port&gt;80&lt;/port&gt;
			&lt;nonProxyHosts&gt;local.net,some.host.com&lt;/nonProxyHosts&gt;
		&lt;/proxy&gt;
	&lt;/proxies&gt;
...
</pre>
</div></div>

<p>Also add the following <tt>openehealth</tt> profile to the <tt>&lt;profiles&gt;</tt> section in your <tt>settings.xml</tt> file.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">...
		&lt;profile&gt;
			&lt;id&gt;openehealth&lt;/id&gt;
			&lt;activation&gt;
				&lt;activeByDefault&gt;<span class="code-keyword">true</span>&lt;/activeByDefault&gt;
			&lt;/activation&gt;
			&lt;repositories&gt;
				&lt;repository&gt;
					&lt;id&gt;openehealth.releases&lt;/id&gt;
					&lt;name&gt;Open eHealth Maven Repository&lt;/name&gt;
					&lt;url&gt;http:<span class="code-comment">//repo.openehealth.org/maven2/releases&lt;/url&gt;
</span>					&lt;releases&gt;
						&lt;enabled&gt;<span class="code-keyword">true</span>&lt;/enabled&gt;
					&lt;/releases&gt;
					&lt;snapshots&gt;
						&lt;enabled&gt;<span class="code-keyword">false</span>&lt;/enabled&gt;
					&lt;/snapshots&gt;
				&lt;/repository&gt;
				&lt;repository&gt;
					&lt;id&gt;openehealth.snapshots&lt;/id&gt;
					&lt;name&gt;Open eHealth Maven Repository&lt;/name&gt;
					&lt;url&gt;http:<span class="code-comment">//repo.openehealth.org/maven2/snapshots&lt;/url&gt;
</span>					&lt;releases&gt;
						&lt;enabled&gt;<span class="code-keyword">false</span>&lt;/enabled&gt;
					&lt;/releases&gt;
					&lt;snapshots&gt;
						&lt;enabled&gt;<span class="code-keyword">true</span>&lt;/enabled&gt;
					&lt;/snapshots&gt;
				&lt;/repository&gt;
				&lt;repository&gt;
					&lt;id&gt;java.net&lt;/id&gt;
					&lt;name&gt;java.net Maven Repository&lt;/name&gt;
					&lt;url&gt;http:<span class="code-comment">//download.java.net/maven/2/&lt;/url&gt;
</span>				&lt;/repository&gt;
                                &lt;repository&gt;
                                        &lt;id&gt;codehaus nexus&lt;/id&gt;
                                        &lt;name&gt;Codehaus Nexus Maven Repository&lt;/name&gt;
                                        &lt;url&gt;https:<span class="code-comment">//nexus.codehaus.org/content/repositories/releases/&lt;/url&gt;
</span>                                &lt;/repository&gt;
				&lt;repository&gt;
					&lt;id&gt;codehaus&lt;/id&gt;
					&lt;name&gt;Codehaus Maven Repository&lt;/name&gt;
					&lt;url&gt;http:<span class="code-comment">//repository.codehaus.org&lt;/url&gt;
</span>				&lt;/repository&gt;
				&lt;repository&gt;
					&lt;id&gt;jboss&lt;/id&gt;
					&lt;name&gt;JBoss Maven Repository&lt;/name&gt;
					&lt;url&gt;http:<span class="code-comment">//repository.jboss.com/maven2&lt;/url&gt;
</span>				&lt;/repository&gt;
                                &lt;repository&gt;
                                    &lt;id&gt;hapi-sf&lt;/id&gt;
                                    &lt;name&gt;HAPI Sourceforge Repository&lt;/name&gt;
                                    &lt;url&gt;http:<span class="code-comment">//hl7api.sourceforge.net/m2&lt;/url&gt;
</span>                                &lt;/repository&gt;
			&lt;/repositories&gt;
		&lt;/profile&gt;
...
</pre>
</div></div>

<p>You can also use this predefined <a href="http://repo.openehealth.org/confluence/download/attachments/3211276/settings.xml?version=2"><tt>settings.xml</tt></a> file. The <tt>openehealth</tt> profile is needed if you want to use IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Archetypes">archetypes</a> without building IPF on your local machine. That's usually the case for the IPF tutorials.</p>

<h4><a name="IPFreference-single-Projectsetup%28examples%29"></a>Project setup (examples)</h4>

<p>If you from whatever reason cannot modify the Maven's <tt>settings.xml</tt>, you can register the repositories of the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-mavensetup"><tt>openehealth</tt> Maven profile</a> directly in the <tt>pom.xml</tt> of your project.  For example, to use IPF artifacts available in the <a href="http://repo.openehealth.org/maven2/" rel="nofollow">Open eHealth Maven Repository</a>, add the following repositories in your <tt>pom.xml</tt> file.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Maven repositories</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
<span class="code-tag">&lt;repositories&gt;</span>
    <span class="code-tag">&lt;repository&gt;</span>
        <span class="code-tag">&lt;id&gt;</span>openehealth.releases<span class="code-tag">&lt;/id&gt;</span>
        <span class="code-tag">&lt;name&gt;</span>Open eHealth Maven Repository<span class="code-tag">&lt;/name&gt;</span>
        <span class="code-tag">&lt;url&gt;</span>http://repo.openehealth.org/maven2/releases<span class="code-tag">&lt;/url&gt;</span>
        <span class="code-tag">&lt;releases&gt;</span>
            <span class="code-tag">&lt;enabled&gt;</span>true<span class="code-tag">&lt;/enabled&gt;</span>
        <span class="code-tag">&lt;/releases&gt;</span>
        <span class="code-tag">&lt;snapshots&gt;</span>
            <span class="code-tag">&lt;enabled&gt;</span>false<span class="code-tag">&lt;/enabled&gt;</span>
        <span class="code-tag">&lt;/snapshots&gt;</span>
    <span class="code-tag">&lt;/repository&gt;</span>
    <span class="code-tag">&lt;repository&gt;</span>
        <span class="code-tag">&lt;id&gt;</span>openehealth.snapshots<span class="code-tag">&lt;/id&gt;</span>
        <span class="code-tag">&lt;name&gt;</span>Open eHealth Maven Repository<span class="code-tag">&lt;/name&gt;</span>
        <span class="code-tag">&lt;url&gt;</span>http://repo.openehealth.org/maven2/snapshots<span class="code-tag">&lt;/url&gt;</span>
        <span class="code-tag">&lt;releases&gt;</span>
            <span class="code-tag">&lt;enabled&gt;</span>false<span class="code-tag">&lt;/enabled&gt;</span>
        <span class="code-tag">&lt;/releases&gt;</span>
        <span class="code-tag">&lt;snapshots&gt;</span>
            <span class="code-tag">&lt;enabled&gt;</span>true<span class="code-tag">&lt;/enabled&gt;</span>
        <span class="code-tag">&lt;/snapshots&gt;</span>
    <span class="code-tag">&lt;/repository&gt;</span>
    <span class="code-tag">&lt;repository&gt;</span>
        <span class="code-tag">&lt;id&gt;</span>java.net<span class="code-tag">&lt;/id&gt;</span>
        <span class="code-tag">&lt;name&gt;</span>java.net Maven Repository<span class="code-tag">&lt;/name&gt;</span>
        <span class="code-tag">&lt;url&gt;</span>http://download.java.net/maven/2/<span class="code-tag">&lt;/url&gt;</span>
    <span class="code-tag">&lt;/repository&gt;</span>
    <span class="code-tag">&lt;repository&gt;</span>
        <span class="code-tag">&lt;id&gt;</span>jboss<span class="code-tag">&lt;/id&gt;</span>
        <span class="code-tag">&lt;name&gt;</span>JBoss Maven Repository<span class="code-tag">&lt;/name&gt;</span>
        <span class="code-tag">&lt;url&gt;</span>http://repository.jboss.com/maven2<span class="code-tag">&lt;/url&gt;</span>
    <span class="code-tag">&lt;/repository&gt;</span>
<span class="code-tag">&lt;/repositories&gt;</span>
...
</pre>
</div></div>

<p>Depending on your project needs you might want to define dependencies to various IPF artifacts. For example, the following statements will include all dependencies needed to work with IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+Messaging" title="HL7 Messaging">HL7 Messaging</a>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-flow<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-hl7<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>where <tt>${ipf-version</tt>} must be replaced with the IPF version you want to use. If you don't need <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a> or <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-DSLextensions">HL7 message processing</a> but only want to use IPF's <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features" title="Core features">core features</a> then you might want to include the IPF core dependencies only.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-core<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>For <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 message processing independent of Apache Camel</a> you only need to include</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.modules<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>modules-hl7dsl<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
<span class="code-tag">&lt;dependency&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.modules<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>modules-hl7<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>${ipf-version}<span class="code-tag">&lt;/version&gt;</span>
<span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>If you're using IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Archetypes">archetypes</a> all required entries in the <tt>pom.xml</tt> file will be created for you.</p>

<h2><a name="IPFreference-single-Sources"></a>Sources</h2>

<h3><a name="IPFreference-single-Repository"></a>Repository</h3>

<p>IPF uses <a href="http://git-scm.com/" rel="nofollow">git</a> for source code management. The IPF git repository is located at <a href="http://github.com/krasserm/ipf" rel="nofollow">http://github.com/krasserm/ipf</a>. If you're new to git, we recommend the excellent <a href="http://progit.org/book/" rel="nofollow">ProGit</a> online book.</p>

<h3><a name="IPFreference-single-Checkout"></a>Checkout</h3>

<p>If you haven't done already, we recommend you to first browse github's <a href="http://help.github.com/" rel="nofollow">online help</a> for instructions how to install git and how to clone a <a href="http://github.com/" rel="nofollow">github</a> repository. It explains how to setup certificates etc. What follows is a short summary how to create a local clone of the IPF repository. From the command line, run</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>git clone &lt;repository-url&gt;
</pre>
</div></div>

<p>where &lt;repository-url&gt; can be one of the following, depending whether you're an IPF committer or normal user and working behind a firewall or not:</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> repository-url </th>
<th class="confluenceTh"> Committer </th>
<th class="confluenceTh"> Firewall </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>git://github.com/krasserm/ipf.git</tt> </td>
<td class="confluenceTd"> N </td>
<td class="confluenceTd"> N </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>git@github.com:krasserm/ipf.git</tt> </td>
<td class="confluenceTd"> Y </td>
<td class="confluenceTd"> N </td>
</tr>
<tr>
<td class="confluenceTd"> <tt><a href="http://github.com/krasserm/ipf.git" rel="nofollow">http://github.com/krasserm/ipf.git</a></tt> </td>
<td class="confluenceTd"> N </td>
<td class="confluenceTd"> Y </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>https://&lt;username&gt;@github.com/krasserm/ipf.git</tt> </td>
<td class="confluenceTd"> Y </td>
<td class="confluenceTd"> Y </td>
</tr>
</tbody></table>


<h2><a name="IPFreference-single-Configuration"></a>Configuration</h2>

<p>Make sure to set the <tt>core.autocrlf</tt> option to <tt>true</tt> and the <tt>core.safecrlf</tt> option to <tt>false</tt>.</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>git config --global core.autcrlf true
git config --global core.safecrlf false
</pre>
</div></div>

<h4><a name="IPFreference-single-Proxies"></a>Proxies</h4>

<p>If you're using the <tt>http</tt> or <tt>https</tt> URLs together with a proxy, you'll need to</p>

<ul>
	<li>set the <tt>http_proxy</tt> environment variable when working with the http URL</li>
	<li>set the <tt>https_proxy</tt> environment variable when working with the https URL</li>
</ul>


<h4><a name="IPFreference-single-Windows"></a>Windows</h4>

<p>Windows users should use <a href="http://code.google.com/p/msysgit/" rel="nofollow">Git for Windows</a>. It is highly recommended to use <a href="http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.1-preview20100612.exe&can=2&q=" rel="nofollow">version 1.7.1-preview20100612</a> or higher. </p>

<p>When using Git for Windows in combination with the <tt>https</tt> URL then you'll need to turn off verification of server certificates with</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>git config --global http.sslVerify false
</pre>
</div></div>

<p>At least this is necessary for Git for Windows version 1.7.1 and might be fixed in higher versions.</p>

<h2><a name="IPFreference-single-Building"></a>Building</h2>

<p>Before starting the build the <tt>MAVEN_OPTS</tt> must be adjusted. Under Windows enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=128m
</pre>
</div></div>

<p>To build IPF from the sources change the working directory to the cloned IPF repository and enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn clean install
</pre>
</div></div>

<p>on the command line. The binaries will be stored in the local Maven cache (<tt>.m2/repository</tt> in your home directory). If you just want to build the sources without running the tests run</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn -DskipTests clean install
</pre>
</div></div>

<h2><a name="IPFreference-single-IDE"></a>IDE</h2>
<h3><a name="IPFreference-single-IntelliJIDEA"></a>IntelliJ IDEA</h3>
<p>Starting with IPF version 2.1, <a href="http://www.jetbrains.com/idea/" rel="nofollow">IntelliJ IDEA 9.0.1</a> or higher (Ultimate or Community Edition) is directly supported as a development platform for IPF source code and IPF applications.</p>

<p>After you checked out the source code of the IPF you can create an IDEA project for it. To do so, create a new project using <tt>File/New Project</tt>, select <tt>Import project from external model</tt> and click <tt>Next</tt>. Choose <tt>Maven</tt> from the list and click <tt>Next</tt>. In the next dialog you define the <tt>Root directory</tt> to be the check-out location of the IPF sources. Make sure that the option <tt>Create IDEA modules for aggregator projects (with 'pom' packaging)</tt> is disabled. You will get irritating warnings when Rebuilding the project otherwise. All other options can be choosen to your liking, e.g.:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_import_ipf.png" align="absmiddle" border="0"></p>

<p>Click <tt>Next</tt>, select the Maven profile that you want to use (usually <tt>openehealth</tt>):</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_import_ipf_profile.png" align="absmiddle" border="0"></p>

<p>On the next page the main artifact of the IPF should be selected:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_import_ipf_artifact.png" align="absmiddle" border="0"></p>

<p>Now you need to configure the JDK. You can add an installed JDK to the list by clicking on the small + and selecting <tt>JSDK</tt>. Choose the directory of your JDK installation and press <tt>Ok</tt>:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_import_ipf_jdk.png" align="absmiddle" border="0"></p>

<p>Finally you can choose the name of the new IDEA project and the location of the project files and click <tt>Finish</tt>. Importing the files and updating all the dependencies will take a while, because the IPF contains quite a number of modules that require various dependencies. After the import you can ignore projects in the <tt>Maven Projects</tt> view depending on what you are working with. You should at least ignore <tt>ipf-archetypes</tt> and <tt>ipf-archetype-basic</tt>. IDEA will not treat the Java and Groovy files in these projects as if they were normal source files. However, they are template files and do not contain valid source code. Therefore, it is best to ignore or remove these projects in the <tt>Maven Projects</tt> view. Note that removing them, does not delete them on disk. The following is screenshot of the final project:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_import_ipf_final.png" align="absmiddle" border="0"></p>
<h3><a name="IPFreference-single-Eclipse"></a>Eclipse</h3>
<p>Starting with version 2.2, you can generate the IPF Eclipse projects. After you checked out the source code of the IPF, open the command line, change the working directory to the check-out location of the IPF sources and run</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:eclipse
</pre>
</div></div>

<p>This will generate <tt>.project</tt>, <tt>.classpath</tt> files and <tt>.settings</tt> for all IPF modules. The generated projects require a <tt>M2_REPO</tt> Eclipse classpath variable (<tt>Java-&gt;Build Path-&gt;Classpath</tt>). <tt>M2_REPO</tt> must be set to the path to your local Maven repository (by default <tt>~/.m2/repository</tt> on Unix and <tt>C:\Documents and Settings\&lt;user&gt;\.m2\repository</tt> on Windows). The generated projects can be imported with <tt>File -&gt; Import... -&gt; Existing Projects into Workspace</tt>, selecting the check-out location of the IPF sources.</p>
<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>To be able to compile the <tt>.groovy</tt> classes in Eclipse, you must install the Groovy-Eclipse Plugin. Make sure that you install <tt>Groovy Compiler Feature</tt> with the same version as the version of the Groovy libraries generated by <tt>eclipse:eclipse</tt>( the <tt>Groovy Compiler Feature</tt> is part of the Groovy-Eclipse Plugin ). This guarantees you the same Groovy environment in both Eclipse and Maven. The <a href="http://groovy.codehaus.org/Eclipse+Plugin" rel="nofollow">Groovy-Eclipse Plugin project site</a> contains instructions how to install the plug-in in Eclipse.</p></td></tr></tbody></table></div>

<p>You can compare the versions of the Groovy libraries by inspecting the project classpath of some project with Groovy classes, as shown in the following screenshot:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/groovy-libraries.PNG" align="absmiddle" border="0"></p>

<p>Finally, here is a screenshot of successfully imported IPF projects in Eclipse:<br>
<img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/projects-eclipse.PNG" align="absmiddle" border="0"></p>

<h2><a name="IPFreference-single-Archetypes"></a>Archetypes</h2>

<h3><a name="IPFreference-single-Overview"></a>Overview</h3>

<p>IPF provides Maven archetypes for most commonly used IPF project types. To generate a project from an IPF Maven archetype use the following command.</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate
-DarchetypeGroupId=org.openehealth.ipf.archetypes
-DarchetypeArtifactId=&lt;ipf-archetype-name&gt;
-DarchetypeVersion=&lt;ipf-archetype-version&gt;
</pre>
</div></div>

<p>where <tt>&lt;ipf-archetype-name&gt;</tt> must be replaced with the name of the archetype you want to use and <tt>ipf-archetype-version</tt> with the version of that archetype i.e. the IPF version you want to use. Currently IPF provides the following archetypes</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Archetype Name </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> ipf-archetype-basic </td>
<td class="confluenceTd"> Archetype for creating integration projects using IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features" title="Core features">core</a> features for embedded and single-node deployments. </td>
</tr>
<tr>
<td class="confluenceTd"> ipf-archetype-default </td>
<td class="confluenceTd"> Not implemented yet. </td>
</tr>
<tr>
<td class="confluenceTd"> ipf-archetype-cluster </td>
<td class="confluenceTd"> Not implemented yet. </td>
</tr>
</tbody></table>

<p>The above command will prompt the user to enter the project's</p>
<ul>
	<li>groupId</li>
	<li>artifactId</li>
	<li>version</li>
	<li>package</li>
</ul>


<p>Alternatively, you can define these values on the command line via</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate
-DarchetypeGroupId=org.openehealth.ipf.archetypes
-DarchetypeArtifactId=&lt;ipf-archetype-name&gt;
-DarchetypeVersion=&lt;ipf-archetype-version&gt;
-DgroupId=&lt;project-group-id&gt;
-DartifactId=&lt;project-artifact-id&gt;
-Dversion=&lt;project-version&gt;
-DinteractiveMode=false
</pre>
</div></div>

<p>where <tt>project-group-id</tt> must be replaced with the project's group id, <tt>project-artifact-id</tt> with the projects artifact id and <tt>version</tt> with the project's version.</p>

<h3><a name="IPFreference-single-Example"></a>Example</h3>

<p>This is an example how to use the <tt>ipf-archetype-basic</tt> archetype:</p>

<h4><a name="IPFreference-single-Createproject"></a>Create project</h4>

<p>To create a project from the <tt>ipf-archetype-basic</tt> archetype enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate
-DarchetypeGroupId=org.openehealth.ipf.archetypes
-DarchetypeArtifactId=ipf-archetype-basic
-DarchetypeVersion=2.0.0
-DgroupId=com.mycompany
-DartifactId=example
-Dversion=1.0-SNAPSHOT
-DinteractiveMode=false
</pre>
</div></div>

<p>on the command line. This creates an IPF project in a folder named <tt>example</tt>.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/archetype-example-1.PNG" align="absmiddle" border="0"></p>

<p>To compile the sources and install the generated artifacts into your local Maven cache change to the <tt>example</tt> and enter the following command.</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn install
</pre>
</div></div>

<h4><a name="IPFreference-single-Createassembly"></a>Create assembly</h4>

<p>To assemble a distribution package from the project that contains all dependencies jars enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn assembly:assembly
</pre>
</div></div>
<p>on the comamnd line. The created package (<tt>example-1.0-SNAPSHOT-bin.zip</tt>) is located in the project's <tt>target</tt> folder. When you copy and extract the folder to a new location a folder named <tt>example-1.0-SNAPSHOT</tt> is created. It contains Windows and Linux startup-scripts for starting the <tt>example</tt> integration server.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/archetype-example-2.JPG" align="absmiddle" border="0"></p>

<h4><a name="IPFreference-single-Eclipseimport"></a>Eclipse import</h4>
<p>This section assumes that you have configured your Eclipse as described in section <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Eclipse">Eclipse</a>. To generate the Eclipse projects use</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:eclipse
</pre>
</div></div>
<p>Next import the generated projects with <tt>File -&gt; Import... -&gt; Existing Projects into Workspace</tt>. The following screenshot shows the <tt>example</tt> project imported into Eclipse. </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/archetype-example-3.PNG" align="absmiddle" border="0"></p>

<ul>
	<li>To execute the unit tests right-click on <tt>SampleRouteTest.java</tt> and select <tt>Run As-&gt;JUnit Test</tt> from the context menu.</li>
	<li>To startup the integration server right-click on <tt>SampleServer.java</tt> and select <tt>Run As-&gt;Java Application</tt> from the context menu.</li>
</ul>


<p><a name="IPFreference-single-codecompletion"></a></p>
<h4><a name="IPFreference-single-IntelliJIDEA"></a>IntelliJ IDEA</h4>

<p>To create a new IPF application in IntelliJ IDEA choose <tt>File/New Project</tt>. Select <tt>Create project from scratch</tt> and press <tt>Next</tt>. Choose the name and directory for the project and the new module and select <tt>Maven Module</tt> from the <tt>Select Type</tt> list, e.g.:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_new_project.png" align="absmiddle" border="0"></p>

<p>After clicking <tt>Next</tt> you define the group and artifact ID of your new application as well as the archetype that you want to use as a project template. To use the IPF archetype <tt>ipf-archetype-basic</tt> it has to be added to IDEA first. To do so, activate <tt>Create from archetype</tt> and click <tt>Add archetype...</tt>. In the dialog that pops up specify the IDs and version for the IPF archetype (use the version number of the IPF version you want to use):</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_add_basic_archetype.png" align="absmiddle" border="0"></p>

<p>After clicking <tt>Ok</tt>, select the newly added archetype and press <tt>Finish</tt>. IDEA runs the archetype to create a new pom file and creates an IDEA project and module with the given settings. The result should look similar to the following screenshot:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_finished_new_project.png" align="absmiddle" border="0"></p>

<p>You can enable the auto import of pom files in the top of the editor window by clicking on <tt>Enable Auto-Import</tt>. This allows you to automatically update the project if the pom file changes.</p>

<p>One of the big advantages of using IDEA is the Groovy support, especially the code completion for route builders. To demonstrate this, open the file <tt>SampleRouteBuilder.groovy</tt> and add another line to it:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/idea_groovy_editing.png" align="absmiddle" border="0"></p>

<p><tt>transmogrify</tt> is an IPF DSL extension that is usually not recognized automatically. E.g. in Eclipse, you will not be able to get code completion for these DSL extensions. By [<a href="http://confluence.jetbrains.net/display/GRVY/Scripting+IDE+for+DSL+awareness?utm_source=DZone&utm_media=Tips" rel="nofollow">using the scripting interface</a>] of the Groovy plugin in IDEA, the IPF jars automatically extend the code completion feature. You can use the same mechanism if you want to enable code completion for your own model extensions.</p>
<h1><a name="IPFreference-single-AppendixBIPFtutorials"></a>Appendix B - IPF tutorials</h1>

<p>The tutorials presented here cover the extensions that the Open eHealth IPF makes to Apache Camel. For an overview of these extensions refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Overview" title="IPF Overview">overview</a> section of the IPF reference manual. The focus of the IPF tutorials will be on writing integration solutions based on the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">IPF Scripting Layer</a> which leverages the <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a> programming language. Although you may continue to write integration solutions in Java you'll miss many features for <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing" title="HL7 processing">HL7 message processing</a> that are available in Groovy only like the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HAPI DSL</a>, for example. Here's a list of tutorials for IPF.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Tutorial</th>
<th class="confluenceTh">Description</th>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Firststepstutorial">First steps</a></td>
<td class="confluenceTd">This tutorial is targeted at developers who want to get started with IPF but do not have a strong background on Camel and Groovy.</td>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Firstdetailstutorial">First details</a></td>
<td class="confluenceTd">This tutorial is targeted at developers who want to get started with IPF and who are already familiar with <a href="http://activemq.apache.org/camel" rel="nofollow">Camel</a> and <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a>.</td>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-HL7processingtutorial">HL7 processing</a></td>
<td class="confluenceTd">Guides through some <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing" title="HL7 processing">HL7 message processing</a> examples.</td>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-TutorialforroutingtoawebserviceviaHTTP">Large binary support</a></td>
<td class="confluenceTd">Guides through an <a href="http://repo.openehealth.org/confluence/display/ipf2/Large+binary+support" title="Large binary support">LBS</a> example.</td>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Referenceapplication">Reference application</a></td>
<td class="confluenceTd">Guides through the IPF reference application.</td>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-XDSdemorepository">XDS demo repository</a></td>
<td class="confluenceTd">Guides through the IPF XDS demo repository.</td>
</tr>
<tr>
<td class="confluenceTd"><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-IPFextensionmechanismtutorial">IPF extension mechanism tutorial</a></td>
<td class="confluenceTd">Usage examples for the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extension+mechanism" title="IPF extension mechanism">IPF extension mechanism</a>.</td>
</tr>
</tbody></table>

<h2><a name="IPFreference-single-Firststepstutorial"></a>First steps tutorial</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Prerequisites</b><br><p>Before you start working on this tutorial make sure that you've read the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development pages</a> for setting up the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Environment">development environment</a>. For this tutorial it is <b>not</b> necessary to checkout the IPF sources, all IPF dependencies are downloaded from the <a href="http://repo.openehealth.org/maven2/" rel="nofollow">Open eHealth Maven repository</a>.</p></td></tr></tbody></table></div>

<p>This tutorial is targeted at developers who want to get started with IPF and do not have a strong background on Camel and Groovy. The main goal is to have a very simple IPF application up and running very quickly. More technical background information is given in the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+details+tutorial" title="First details tutorial">First details tutorial</a>.</p>

<ul>
	<li>We start by creating a project from an IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">archetype</a></li>
	<li>We see how integration logic looks like in IPF, using the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">IPF Scripting Layer</a></li>
	<li>We then extend integration logic in order to
	<ul>
		<li>receive a message over HTTP</li>
		<li>transform that message</li>
		<li>write the result to a file.</li>
	</ul>
	</li>
	<li>The messaging solution will be tested both automated and manually.</li>
	<li>The messaging solution will be packaged, installed and started.</li>
</ul>


<h3><a name="IPFreference-single-Sourcecode"></a>Source code</h3>

<p>The source code for this tutorial can be downloaded from <a href="http://repo.openehealth.org/confluence/download/attachments/3211278/basic.zip?version=3">here</a>.</p>

<h3><a name="IPFreference-single-Projectcreation"></a>Project creation</h3>

<p>We start by creating an IPF project via a Maven archetype. Navigate to a directory of your choice and create the project by entering the following on the command line (make sure to have the command on a single line):</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate
-DarchetypeGroupId=org.openehealth.ipf.archetypes
-DarchetypeArtifactId=ipf-archetype-basic
-DarchetypeVersion=2.1.0
-DgroupId=org.openehealth.tutorial
-DartifactId=basic
-Dversion=1.0-SNAPSHOT
-DinteractiveMode=false
</pre>
</div></div>

<p>This will create a folder named <tt>basic</tt> in the current directory. Change to the <tt>basic</tt> folder and enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn install
</pre>
</div></div>

<p>This will compile the project and install the project artifacts into your local Maven cache. Enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:eclipse
</pre>
</div></div>
<p>to generate the Eclipse project.  </p>

<p>To import the project start Eclipse, navigate to <tt>File-&gt;Import-&gt;General-&gt;Existing Projects into Workspace</tt> and select the created <tt>basic</tt> folder as root directory. After having imported the project it should look similar to the following figure (exact display might vary depending on your workspace settings).</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-1.JPG" align="absmiddle" border="0"></p>
<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>It is assumed that you have installed the Groovy Eclipse plug-in as described in our <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development setup</a> </p></td></tr></tbody></table></div>

<p>In addition to an IPF application skeleton the archetype also created some simple example files that can be used for initial experiments.<br>
We'll mainly work with <tt>org.openehealth.tutorial.SampleRouteConfig.groovy</tt> in the <tt>src/main/resources</tt> path, which implements a trivial piece of message processing.</p>

<h3><a name="IPFreference-single-Routedefinition"></a>Route definition</h3>

<p><tt>SampleRouteBuilder.groovy</tt> defines two <em>routes</em>. A route is a logical unit of a sequence of message processing steps. The routes are implemented in the Groovy programming language, but we'll see that the syntax used is very close to Java.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
    void configure() {
        from('direct:input1').transmogrify { it * 2 } <span class="code-comment">// duplicate the request string e.g. 'abc' -&gt; 'abcabc'
</span>        from('direct:input2').reverse()               <span class="code-comment">// revert the request string e.g. 'abc' -&gt; 'cba'
</span>    }
}
</pre>
</div></div>

<ol>
	<li>The first route receives a message from a <tt><a href="http://camel.apache.org/direct.html" rel="nofollow">direct</a>:input1</tt> endpoint, and <em>transmogrifies</em> (i.e. convert to something different) the message by duplicating it. The duplication is defined by a <a href="http://groovy.codehaus.org/Closures" rel="nofollow">Groovy Closure</a>, an elegant way to define a simple code block that is executed when a message arrives. The <tt>it</tt>-variable is the Groovy default parameter to the code block, which in our case contains the message we're processing. In Groovy you can use the <tt>*</tt> (multiply) operator on a string for repeating that string.</li>
	<li>The second route that receives a message from a <tt><a href="http://camel.apache.org/direct.html" rel="nofollow">direct</a>:input2</tt> endpoint, <em>reverses</em> the input message body and returns the result. The <tt>reverse()</tt> command is a tutorial-specific extension defined in <tt>SampleModelExtension.groovy</tt> and is just a shortcut notation for</li>
</ol>


<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>.transmogrify { it.reverse() }
</pre>
</div></div>


<p>For the moment we can treat <a href="http://acmel.apache.org/direct.html" rel="nofollow"><tt>direct</tt></a> endpoints as internal labels of the Camel routes, that can e.g. be used from JUnit tests like the following:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteTest.java</b></div><div class="codeContent panelContent">
<pre class="code-java">...
@ContextConfiguration(locations = { <span class="code-quote">"/context.xml"</span> })
<span class="code-keyword">public</span> class SampleRouteTest {

    @Autowired
    <span class="code-keyword">private</span> ProducerTemplate producerTemplate;

    @Before
    <span class="code-keyword">public</span> void setUp() <span class="code-keyword">throws</span> Exception {
    }

    @After
    <span class="code-keyword">public</span> void tearDown() <span class="code-keyword">throws</span> Exception {
    }

    @Test
    <span class="code-keyword">public</span> void testMultiply() <span class="code-keyword">throws</span> Exception {
        assertEquals(<span class="code-quote">"abcabc"</span>, producerTemplate.requestBody(<span class="code-quote">"direct:input1"</span>, <span class="code-quote">"abc"</span>));
    }

    @Test
    <span class="code-keyword">public</span> void testReverse() <span class="code-keyword">throws</span> Exception {
        assertEquals(<span class="code-quote">"cba"</span>, producerTemplate.requestBody(<span class="code-quote">"direct:input2"</span>, <span class="code-quote">"abc"</span>));
    }

}
</pre>
</div></div>

<p>This test sends a message to each endpoint and expects the messages to be duplicated or reversed, respectively.</p>

<h3><a name="IPFreference-single-Routeextension"></a>Route extension</h3>

<p>We now extend the example to make our integration logic accessible from the outside.</p>
<ul>
	<li>We'll receive an HTTP request message from a <a href="http://camel.apache.org/jetty.html" rel="nofollow"><tt>jetty</tt></a> endpoint,</li>
	<li>transform it and</li>
	<li>send it to a <a href="http://camel.apache.org/file.html" rel="nofollow"><tt>file</tt></a> endpoint.</li>
</ul>


<p>In addition we want to keep the <tt>direct</tt> endpoints so that we can still test the message transformation with the JUnit test shown above. Instead of only returning the processing result to the HTTP client we also write the message to a file. Here's the extended route definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {

        from('jetty:http:<span class="code-comment">//0.0.0.0:8080/tutorial')  // receive client requests on http://0.0.0.0:8080/tutorial
</span>            .convertBodyTo(<span class="code-object">String</span>.class)            <span class="code-comment">// convert request input stream into a string
</span>            .to('direct:input1')                    <span class="code-comment">// <span class="code-keyword">continue</span> from direct:input1
</span>
        from('direct:input1')
            .transmogrify { it * 2 }                <span class="code-comment">// duplicate the request string
</span>            .setFileHeaderFrom('destination')       <span class="code-comment">// set name of result file to be written (a custom DSL extension)
</span>            .to('file:target/output')               <span class="code-comment">// replace content of file in target/output directory with body of in-message.
</span>
        from('direct:input2').reverse()
    }
}
</pre>
</div></div>

<ul>
	<li>To receive messages over HTTP we have to create an <tt>HTTP</tt> endpoint, which will run a Jetty HTTP server listening on port <tt>8080</tt>. The endpoint doesn't automatically convert the HTTP body from an <tt>InputStream</tt> to a <tt>String</tt> so we have to do that manually via <tt>convertBodyTo(String.class)</tt> as we expect a String body in later processing steps.</li>
	<li>After converting the message, we tell the file component how to name the output file. This is done via <tt>setFileHeaderFrom(java.lang.String)</tt>. In this example the file name is taken from the message header <tt>'destination'</tt>. <tt>setFileHeaderFrom</tt> is a custom extension defined by this tutorial and must be added to the <tt>SampleModelExtension.groovy</tt> file (see next box). You don't have to understand the exact details of this extension mechanism. For now it is sufficient to see that the route definition can also contain custom elements.</li>
	<li>The <tt>file</tt> endpoint finally writes the results to the <tt>target/output</tt> directory.</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleModelExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleModelExtension {
     <span class="code-keyword">static</span> extensions = {
         ...
         ProcessorDefinition.metaClass.setFileHeaderFrom = { <span class="code-object">String</span> sourceHeader -&gt;
             delegate.setHeader(Exchange.FILE_NAME) { exchange -&gt;
                 def destination = exchange.in.headers.<span class="code-quote">"$sourceHeader"</span>
                 destination ? <span class="code-quote">"${destination}.txt"</span> : '<span class="code-keyword">default</span>.txt'
             }
         }
     }
}
</pre>
</div></div>

<p>Before we can start the route we additionally have to define a dependency to the <tt>camel-jetty</tt> component in our <tt>pom.xml</tt> file.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;project&gt;</span>

    <span class="code-tag">&lt;dependencies&gt;</span>
        ...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>camel-jetty<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.2.0<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        ...
    <span class="code-tag">&lt;/dependencies&gt;</span>

<span class="code-tag">&lt;project&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Projecttesting"></a>Project testing</h3>

<h4><a name="IPFreference-single-Unittest"></a>Unit test</h4>

<p>When we run the unit test <tt>SampleRouteTest.java</tt> we should see a file <tt>default.txt</tt> in the <tt>target/output</tt> folder, because we didn't set a 'destination' message header. The unit test sent the message body <tt>abc</tt> so there should be a repeated <tt>abcabc</tt> contained in the output file.</p>

<p>You run the test inside Eclipse or using Maven by entering</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn test
</pre>
</div></div>

<p>on the command line in the <tt>basic</tt> folder.</p>

<h4><a name="IPFreference-single-Servertest"></a>Server test</h4>

<p>For testing the HTTP endpoint we first have to start the server. To do so, right-click on <tt>SampleServer.java</tt> and select <tt>Run As-&gt;Java Application</tt>. This will start a standalone route or integration server that listens on port 8080 for requests. As HTTP client we use the <a href="http://http4e.roussev.org/install/" rel="nofollow">Eclipse HTTP Client</a> (<a href="http://repo.openehealth.org/sites/thirdparty/update/http4e/" rel="nofollow">alternative location</a>). To prepare the test open the Eclipse HTTP client and</p>

<ul>
	<li>Enter <tt><a href="http://localhost:8080/tutorial" rel="nofollow">http://localhost:8080/tutorial</a></tt> in the address field (top-left corner of the window)</li>
	<li>Select <tt>POST</tt> in the HTTP method field (top-right corner of the window)</li>
	<li>Enter <tt>destination=custom</tt> in the <em>Headers</em> field</li>
	<li>Enter <tt>test</tt> in the <em>Body</em> field</li>
</ul>


<p>To submit the request press the green arrow at the top of the window. The result should look like:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-5.JPG" align="absmiddle" border="0"></p>

<p>The <tt>HTTP</tt> endpoint copies all HTTP headers onto Camel message headers, so we have the <tt>destination</tt> header present for creating a custom file name. In our example the <tt>destination</tt> header value is <tt>custom</tt> and the output file therefore has the name <tt>custom.txt</tt>. You should now see this file as well as the file generated during the unit test <tt>default.txt</tt> in the <tt>target/output</tt> folder. The content of the <tt>custom.txt</tt> file should be <tt>testtest</tt> because we sent a <tt>test</tt> HTTP request body.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-4.JPG" align="absmiddle" border="0"></p>

<h3><a name="IPFreference-single-Assemblyandinstallation"></a>Assembly and installation</h3>

<p>We finally want to create a distribution package from our project, install (unzip) that package somewhere and start a standalone integration server (i.e. an integration server that runs outside Eclipse). Before continuing make sure that you stopped the <tt>SampleServer</tt> that you started within Eclipse, otherwise, you won't be able to start another server. To create the package enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn assembly:assembly
</pre>
</div></div>

<p>on the command line. The created package <tt>basic-1.0-SNAPSHOT-bin.zip</tt> is written to the project's <tt>target</tt> folder. Copy the package to a new location and unzip it. This will create a folder named <tt>basic-1.0-SNAPSHOT</tt> with the following content:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-6.JPG" align="absmiddle" border="0"></p>

<h3><a name="IPFreference-single-Startserver"></a>Start server</h3>

<p>To start the server run <tt>startup.bat</tt>. The console output should like like</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-7.JPG" align="absmiddle" border="0"></p>

<p>Finally, submit the HTTP request again that you've configured before with the Eclipse HTTP client. This should again create a file <tt>custom.txt</tt> in the newly created <tt>target/output</tt> folder.</p>

<h3><a name="IPFreference-single-Summary"></a>Summary</h3>

<p>In this tutorial we've seen</p>

<ul>
	<li>how to create an integration project skeleton by using Maven archetypes</li>
	<li>how message processing routes are defined</li>
	<li>how message processing routes are tested</li>
	<li>how easy it is to add HTTP or File endpoints as external interfaces</li>
	<li>how an integration project is bundled and launched as a standalone application</li>
</ul>


<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Continue with XML processing on IPF</b><br><p>After this tutorial you might want to take a look at IPF's <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensionsforGroovyXMLprocessing">XML processing and transformation capabilities</a> which are based on Groovy's XML support.</p></td></tr></tbody></table></div>
<h2><a name="IPFreference-single-Firstdetailstutorial"></a>First details tutorial</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Prerequisites</b><br><p>Before you start working on this tutorial make sure that you've read the IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development pages</a> for setting up the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Environment">development environment</a>. For this tutorial it is <b>not</b> necessary to checkout the IPF sources, all IPF dependencies are downloaded from the <a href="http://repo.openehealth.org/maven2/" rel="nofollow">Open eHealth Maven repository</a>.</p></td></tr></tbody></table></div>

<p>This tutorial is targeted at developers who want to get started with IPF and who are already familiar with <a href="http://camel.apache.org/" rel="nofollow">Camel</a> and <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a>. It goes into some technical details for explaining how IPF applications internally work. If this is your first contact with IPF, we recommend working through the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+steps+tutorial" title="First steps tutorial">First steps tutorial</a> first, which omits most of the technical explanations.</p>

<ul>
	<li>We start by creating a project from an IPF <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">archetype</a></li>
	<li>The created project structure is explained in detail. You'll see
	<ul>
		<li>how to write routes with the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer" title="IPF Scripting Layer">IPF scripting layer</a>.</li>
		<li>how to extend the DSL with the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a>.</li>
		<li>how to configure the application components with <a href="http://www.springframework.org/" rel="nofollow">Spring</a>.</li>
		<li>how IPF uses <a href="http://maven.apache.org/" rel="nofollow">Maven 2</a> to build the project, manage dependencies and package distribution bundles.</li>
	</ul>
	</li>
	<li>We then write a very simple messaging solution that
	<ul>
		<li>receives a message over HTTP</li>
		<li>transforms that message</li>
		<li>writes the result to a file.</li>
	</ul>
	</li>
	<li>The messaging solution will be tested both automated and manually.</li>
	<li>The messaging solution will be packaged, installed and started.</li>
</ul>


<h3><a name="IPFreference-single-Sourcecode"></a>Source code</h3>

<p>The source code for this tutorial can be downloaded from <a href="http://repo.openehealth.org/confluence/download/attachments/3211278/basic.zip?version=3">here</a>.</p>

<h3><a name="IPFreference-single-Projectcreation"></a>Project creation</h3>

<p>We start by creating an example IPF project by entering</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate
-DarchetypeGroupId=org.openehealth.ipf.archetypes
-DarchetypeArtifactId=ipf-archetype-basic
-DarchetypeVersion=2.1.0
-DgroupId=org.openehealth.tutorial
-DartifactId=basic
-Dversion=1.0-SNAPSHOT
-DinteractiveMode=false
</pre>
</div></div>

<p>on the command line (make sure to have the command on a single line). This will create a folder named <tt>basic</tt> in the current directory. Change to the <tt>basic</tt> folder an enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn install
</pre>
</div></div>

<p>This will compile the project and install the project artifacts into your local Maven cache.  Enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:eclipse
</pre>
</div></div>
<p>to generate the Eclipse project. To import the project start Eclipse, navigate to <tt>File-&gt;Import-&gt;General-&gt;Existing Projects into Workspace</tt> and select the created <tt>basic</tt> folder as root directory. Refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Archetypes">archetype section</a> of the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">IPF Development</a> page for further details on the created project structure. After having imported the project into Eclipse it should look similar to the following figure.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-1.JPG" align="absmiddle" border="0"></p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>It is assumed that you have installed the Groovy Eclipse plug-in as described in our <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development setup</a> </p></td></tr></tbody></table></div>

<p>In addition to an IPF application skeleton the archetype also created some simple example files that can be used for initial experiments. Here's an overview of the created project files.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> File </th>
<th class="confluenceTh"> Package </th>
<th class="confluenceTh"> Path </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>SampleRouteBuilder.groovy</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.tutorial</tt> </td>
<td class="confluenceTd"> <tt>src/main/groovy</tt> </td>
<td class="confluenceTd"> Implements the message processing route. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>SampleModelExtension.groovy</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.tutorial</tt> </td>
<td class="confluenceTd"> <tt>src/main/groovy</tt> </td>
<td class="confluenceTd"> Implements tutorial-specific DSL extensions used within <tt>SampleRouteBuilder.groovy</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>SampleRouteTest.java</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.tutorial</tt> </td>
<td class="confluenceTd"> <tt>src/test/java</tt> </td>
<td class="confluenceTd"> A JUnit test for the route implemented by <tt>SampleRouteConfig.groovy</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>SampleServer.java</tt> </td>
<td class="confluenceTd"> <tt>org.openehealth.tutorial</tt> </td>
<td class="confluenceTd"> <tt>src/main/java</tt> </td>
<td class="confluenceTd"> A class for starting the route as standalone server. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>context.xml</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>src/main/resources</tt> </td>
<td class="confluenceTd"> The Spring application context wiring the individual platform and application components. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>bin.xml</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>src/main/assembly</tt> </td>
<td class="confluenceTd"> The Maven 2 assembly descriptor for creating a distributable assembly <tt>zip</tt> file of the tutorial application. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>pom.xml</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>.</tt> </td>
<td class="confluenceTd"> The Maven 2 project descriptor of the tutorial application. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>startup.bat</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>.</tt> </td>
<td class="confluenceTd"> The Windows startup file for a standalone server. This startup file can only be used in an installation of a distributable package. It cannot be used directly inside the original Eclipse/Maven project. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>startup.sh</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>.</tt> </td>
<td class="confluenceTd"> The Linux startup file for a standalone server. This startup file can only be used in an installation of a distributable package. It cannot be used directly inside the original Eclipse/Maven project. This file is currently empty. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>.project</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>.</tt> </td>
<td class="confluenceTd"> The project descriptor of the sample Eclipse project. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>.classpath</tt> </td>
<td class="confluenceTd"> - </td>
<td class="confluenceTd"> <tt>.</tt> </td>
<td class="confluenceTd"> The classpath definition of the sample Eclipse project. </td>
</tr>
</tbody></table>

<h4><a name="IPFreference-single-Routedefinition"></a>Route definition</h4>

<p><tt>SampleRouteBuilder.groovy</tt> defines two routes.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
    void configure() {
        from('direct:input1').transmogrify { it * 2 } <span class="code-comment">// duplicate the request string e.g. 'abc' -&gt; 'abcabc'
</span>        from('direct:input2').reverse()               <span class="code-comment">// revert the request string e.g. 'abc' -&gt; 'cba'
</span>    }
}
</pre>
</div></div>

<ol>
	<li>A route that receives a message from a <tt><a href="http://camel.apache.org/direct.html" rel="nofollow">direct</a>:input1</tt> endpoint, multiplies the body of the input message by 2 and returns the result. In Groovy you can use the <tt>*</tt> (multiply) operator on a string for repeating that string. For transformation we use the <tt>transmogrify</tt> DSL extension provided by IPF and implement the transformation logic with a closure. Input to the closure is by default the body of the in-message. The result returned by the closure is set to the body of the result message. For a detailed description of the <tt>transmogrify</tt> DSL element refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensionsforIPFmoduleadapters">DSL extensions for IPF module adapters</a> section of the reference manual.</li>
	<li>A route that receives a message from a <tt><a href="http://camel.apache.org/direct.html" rel="nofollow">direct</a>:input2</tt> endpoint, <em>reverses</em> the input message body and returns the result. The <tt>reverse()</tt> DSL element is not provide by Camel or IPF, it is a tutorial-specific DSL extension defined in <tt>SampleModelExtension.groovy</tt>. This extension uses Groovy GDK's <tt>java.lang.String.reverse()</tt> method to reverse the character sequence of the input message string. For a detailed description of the DSL extension mechanism refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-DSLextensionmechanism">DSL extension mechanism</a> section of the reference manual.</li>
</ol>


<p>We use <a href="http://camel.apache.org/direct.html" rel="nofollow"><tt>direct</tt></a> endpoints to access the Camel routes from JUnit tests. Behind the scenes communication with these endpoints is via Java method calls. The unit tests, as generated by the archetype, communicate with the route via a two-way (in-out), synchronous communication pattern. The corresponding <tt>in-out</tt> message exchange is implicitly created by the <tt>requestBody()</tt> method of the injected <tt>producerTemplate</tt> (an instance of type <tt>org.apache.camel.ProducerTemplate</tt>).</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteTest.java</b></div><div class="codeContent panelContent">
<pre class="code-java">...
@ContextConfiguration(locations = { <span class="code-quote">"/context.xml"</span> })
<span class="code-keyword">public</span> class SampleRouteTest {

    @Autowired
    <span class="code-keyword">private</span> ProducerTemplate producerTemplate;

    ....

    @Test
    <span class="code-keyword">public</span> void testMultiply() <span class="code-keyword">throws</span> Exception {
        assertEquals(<span class="code-quote">"abcabc"</span>, producerTemplate.requestBody(<span class="code-quote">"direct:input1"</span>, <span class="code-quote">"abc"</span>));
    }

    @Test
    <span class="code-keyword">public</span> void testReverse() <span class="code-keyword">throws</span> Exception {
        assertEquals(<span class="code-quote">"cba"</span>, producerTemplate.requestBody(<span class="code-quote">"direct:input2"</span>, <span class="code-quote">"abc"</span>));
    }

</pre>
</div></div>

<p>Using <a href="http://www.enterpriseintegrationpatterns.com/" rel="nofollow">Enterprise Integration Pattern</a> symbols this looks as follows:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-2.JPG" align="absmiddle" border="0"></p>

<p>Later we'll see how to route the message processing results to a final destination in addition to routing it back to the sender endpoint. The final destination will be a <a href="http://camel.apache.org/file.html" rel="nofollow"><tt>file</tt></a> endpoint that writes the message body to a file.</p>

<h4><a name="IPFreference-single-Extensiondefinition"></a>Extension definition</h4>

<p>The second route makes use of the <tt>reverse()</tt> method, a custom-defined DSL extension *). Methods that make up the DSL are defined on route builders and model classes. Model classes are contained in the packages</p>

<ul>
	<li><tt>org.apache.camel.model</tt></li>
	<li><tt>org.openehealth.ipf.platform.camel.core.model</tt> and</li>
	<li><tt>org.openehealth.ipf.platform.camel.flow.model</tt></li>
</ul>


<p>Because Camel doesn't provide a mechanism to extend the DSL on Java-level we use Groovy <a href="http://groovy.codehaus.org/Dynamic+Groovy" rel="nofollow">meta-programming</a> mechanisms to enhance existing model classes where needed (or even define our own model classes like IPF does). In our example, we enhance the <tt>org.apache.camel.model.ProcessorDefinition</tt> class with the <tt>reverse</tt> method.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleModelExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleModelExtension {

     <span class="code-keyword">static</span> extensions = {

         ProcessorDefinition.metaClass.reverse = {
             delegate.transmogrify { it.reverse() }
         }

     }

}
</pre>
</div></div>

<p>We obtain the <tt>ProcessorDefinition</tt> 's <tt>metaClass</tt> property and use it to inject a new method definition, <tt>reverse</tt> in our example. The method implementation is given by a closure that makes use of the <tt>transmogrify</tt> extension, another extension provided by IPF. The <tt>ProcessorDefinition</tt> instance on which the extension method gets called is available as <tt>delegate</tt> variable inside the method implementation closure. Argument to <tt>transmogrify</tt> is another closure that finally applies Groovy's <tt>java.lang.String.reverse()</tt> method on the message body (<tt>it</tt>). In our example we expect the message body to be a <tt>String</tt>. Using these simple mechanisms we extended the Camel DSL. However, you should also be aware of the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Scripting+Layer#IPFScriptingLayer-Limitations">limitations of the DSL extension mechanism</a>.</p>

<p>Extensions introduced by IPF applications should be defined inside an <tt>extensions</tt> block in any concrete class you like. Then these extensions can be activated by configuring a route model extender in the Spring application context (see <tt>context.xml</tt> later).</p>

<p>*) For a complete reference of predefined DSL extensions provided by IPF refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extensions+index" title="IPF extensions index">IPF extensions index</a>.</p>

<h4><a name="IPFreference-single-Applicationconfiguration"></a>Application configuration</h4>

<p>The following XML file shows a Spring configuration of an application that makes use of IPF's core features only. For examples how to configure support for <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow management</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing" title="HL7 processing">HL7 message processing</a> refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management+tutorial" title="Flow management tutorial">flow management tutorial</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing+tutorial" title="HL7 processing tutorial">HL7 processing tutorial</a>, respectivly.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>

    &lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.tutorial.SampleRouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"sampleModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.tutorial.SampleModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"coreModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"sampleModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>The following table provides further information about the beans configured in the above application <tt>context.xml</tt> file.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Bean </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>camelContext</tt> </td>
<td class="confluenceTd"> The <a href="http://camel.apache.org/camelcontext.html" rel="nofollow">Camel context</a>. It represents a single Camel routing rulebase including a <tt>ProducerTemplate</tt> that is used in unit tests to send messages to endpoints. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>routeBuilder</tt> </td>
<td class="confluenceTd"> The <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedefinition">sample route builder</a>. This bean depends on the <tt>routeModelExtender</tt> to ensure that the DSL extensions are activated before the route definitions are processed. Also note that the <tt>camelContext</tt> refers to this bean to build the routes during startup. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>coreModelExtension</tt> </td>
<td class="confluenceTd"> The DSL extensions provided by the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Architecture#IPFArchitecture-Platformcorecomponents"><tt>platform-camel-core</tt></a> component. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>sampleModelExtension</tt> </td>
<td class="confluenceTd"> The <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extensiondefinition">sample DSL extensions</a>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>routeModelExtender</tt> </td>
<td class="confluenceTd"> The extender object that calls the <tt>extensions</tt> blocks in the <tt>*ModelExtension</tt> beans during application initialization. </td>
</tr>
</tbody></table>

<h4><a name="IPFreference-single-Projectdescriptor"></a>Project descriptor</h4>

<p>Here is an excerpt of the Maven 2 project descriptor.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;project&gt;</span>

    ...
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.tutorial<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>basic<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>1.0-SNAPSHOT<span class="code-tag">&lt;/version&gt;</span>
    ...

    <span class="code-tag">&lt;dependencies&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-core<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.1.0<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        ...
    <span class="code-tag">&lt;/dependencies&gt;</span>

    <span class="code-tag">&lt;build&gt;</span>
        <span class="code-tag">&lt;plugins&gt;</span>
            ...
            <span class="code-tag">&lt;plugin&gt;</span>
                <span class="code-tag">&lt;artifactId&gt;</span>maven-assembly-plugin<span class="code-tag">&lt;/artifactId&gt;</span>
                <span class="code-tag">&lt;configuration&gt;</span>
                    <span class="code-tag">&lt;descriptors&gt;</span>
                        <span class="code-tag">&lt;descriptor&gt;</span>src/main/assembly/bin.xml<span class="code-tag">&lt;/descriptor&gt;</span>
                    <span class="code-tag">&lt;/descriptors&gt;</span>
                <span class="code-tag">&lt;/configuration&gt;</span>
            <span class="code-tag">&lt;/plugin&gt;</span>
        <span class="code-tag">&lt;/plugins&gt;</span>
    <span class="code-tag">&lt;/build&gt;</span>

<span class="code-tag">&lt;/project&gt;</span>
</pre>
</div></div>

<p>The relevant entries are:</p>

<ul>
	<li><tt>&lt;groupId&gt;</tt> (defined at <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcreation">project-creation time</a>).</li>
	<li><tt>&lt;artifactId&gt;</tt> (defined at <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcreation">project-creation time</a>).</li>
	<li><tt>&lt;version&gt;</tt> (defined at <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Projectcreation">project-creation time</a>).</li>
	<li>Dependency to <tt>platform-camel-core</tt>. That's the only IPF dependency needed for simple IPF applications.</li>
	<li>Reference to the <tt>bin.xml</tt> assembly descriptor in the <tt>maven-assembly-plugin</tt> for creating binary distribution files.</li>
</ul>


<h4><a name="IPFreference-single-Assemblydescriptor"></a>Assembly descriptor</h4>

<p>The assembly descriptor describes how to package the project into a distributable package.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>bin.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;assembly&gt;</span>
    <span class="code-tag">&lt;id&gt;</span>bin<span class="code-tag">&lt;/id&gt;</span>
    <span class="code-tag">&lt;formats&gt;</span>
        <span class="code-tag">&lt;format&gt;</span>zip<span class="code-tag">&lt;/format&gt;</span>
    <span class="code-tag">&lt;/formats&gt;</span>
    <span class="code-tag">&lt;fileSets&gt;</span>
        <span class="code-tag">&lt;fileSet&gt;</span>
            <span class="code-tag">&lt;includes&gt;</span>
                <span class="code-tag">&lt;include&gt;</span>startup*<span class="code-tag">&lt;/include&gt;</span>
            <span class="code-tag">&lt;/includes&gt;</span>
        <span class="code-tag">&lt;/fileSet&gt;</span>
        <span class="code-tag">&lt;fileSet&gt;</span>
            <span class="code-tag">&lt;directory&gt;</span>src/test/resources<span class="code-tag">&lt;/directory&gt;</span>
            <span class="code-tag">&lt;outputDirectory&gt;</span>conf<span class="code-tag">&lt;/outputDirectory&gt;</span>
            <span class="code-tag">&lt;includes&gt;</span>
                <span class="code-tag">&lt;include&gt;</span>log4j.xml<span class="code-tag">&lt;/include&gt;</span>
            <span class="code-tag">&lt;/includes&gt;</span>
        <span class="code-tag">&lt;/fileSet&gt;</span>
    <span class="code-tag">&lt;/fileSets&gt;</span>
    <span class="code-tag">&lt;dependencySets&gt;</span>
        <span class="code-tag">&lt;dependencySet&gt;</span>
            <span class="code-tag">&lt;outputDirectory&gt;</span>lib<span class="code-tag">&lt;/outputDirectory&gt;</span>
            <span class="code-tag">&lt;scope&gt;</span>runtime<span class="code-tag">&lt;/scope&gt;</span>
        <span class="code-tag">&lt;/dependencySet&gt;</span>
    <span class="code-tag">&lt;/dependencySets&gt;</span>
<span class="code-tag">&lt;/assembly&gt;</span>
</pre>
</div></div>

<p>In our example we define the package format (<tt>zip</tt>) and specify the filesets to be included into the package. We also define a &lt;dependencySet&gt; which causes the <tt>maven-assembly-plugin</tt> to include all runtime dependencies into the package under the <tt>lib</tt> directory. For further configuration details consult the Maven <a href="http://maven.apache.org/plugins/maven-assembly-plugin/" rel="nofollow">assembly plugin</a> documentation. Section <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Assemblyandinstallation">assembly and installation</a> will explain how to create the distribution package.</p>

<h3><a name="IPFreference-single-Projectcustomization"></a>Project customization</h3>

<p>In this section we'll extend the example to receive an HTTP request message from a <a href="http://camel.apache.org/jetty.html" rel="nofollow"><tt>jetty</tt></a> endpoint, transform it and write send it to a <a href="http://camel.apache.org/file.html" rel="nofollow"><tt>file</tt></a> endpoint. Using <a href="http://www.enterpriseintegrationpatterns.com/" rel="nofollow">Enterprise Integration Pattern</a> symbols this looks as follows:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-3.JPG" align="absmiddle" border="0"></p>

<p>We want to keep the <tt>direct</tt> endpoint so that we can still test the message transformation with a JUnit test. To reuse that endpoint the additional <tt>jetty</tt> endpoint communicates with the transformer over the <tt>direct</tt> endpoint. Instead of only returning the processing result to the initiators (HTTP client or JUnit test) we also write the message to a final destination which is a <tt>file</tt> endpoint. This endpoint creates files containing the processing result. Here's the extended route definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {

        from('jetty:http:<span class="code-comment">//0.0.0.0:8080/tutorial')  // receive client requests on http://0.0.0.0:8080/tutorial
</span>            .convertBodyTo(<span class="code-object">String</span>.class)            <span class="code-comment">// convert request input stream into a string
</span>            .to('direct:input1')                    <span class="code-comment">// <span class="code-keyword">continue</span> from direct:input1
</span>
        from('direct:input1')
            .transmogrify { it * 2 }                <span class="code-comment">// duplicate the request string
</span>            .setFileHeaderFrom('destination')       <span class="code-comment">// set name of result file to be written (a custom DSL extension)
</span>            .to('file:target/output')               <span class="code-comment">// replace content of file in target/output directory with body of in-message.
</span>
        from('direct:input2').reverse()

    }
}
</pre>
</div></div>

<p>In this example we only extended the first of the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Routedefinition">two routes that have been initially created</a>. We leave the second route untouched. To receive messages over HTTP we have to create a <tt>jetty</tt> endpoint via the <tt>jetty:<a href="http://localhost:8080/tutorial" rel="nofollow">http://localhost:8080/tutorial</a></tt>. This will run a Jetty server listening on port <tt>8080</tt>. The context path is <tt>tutorial</tt>. The <tt>jetty</tt> endpoint doesn't automatically convert the HTTP body from an <tt>InputStream</tt> to a <tt>String</tt> so we have to do that manually via <tt>convertBodyTo(String.class)</tt> (we expect a string body in later processing steps). Then the message received via HTTP is forwarded to the <tt>direct:input1</tt> endpoint, the same that is used in our JUnit test. We again transform the original message body by repeating it (multiply it by 2) using transmogrify { it * 2 }. In the next step we tell the file component that the filename is determined via the message header <tt>destination</tt>. This is done with <tt>setFileHeaderFrom(java.lang.String)</tt>. This is a custom DSL extension that is implemented as follows:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleModelExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class SampleModelExtension {
     <span class="code-keyword">static</span> extensions = {
         ...
         ProcessorDefinition.metaClass.setFileHeaderFrom = { <span class="code-object">String</span> sourceHeader -&gt;
             delegate.setHeader(Exchange.FILE_NAME) { exchange -&gt;
                 def destination = exchange.in.headers.<span class="code-quote">"$sourceHeader"</span>
                 destination ? <span class="code-quote">"${destination}.txt"</span> : '<span class="code-keyword">default</span>.txt'
             }
         }
     }
}
</pre>
</div></div>

<p>We define a new method <tt>setFileHeaderFrom</tt> on the <tt>ProcessorDefinition</tt> class. This makes <tt>setFileHeaderFrom</tt> available as a new DSL element in route definitions. This method derives the value of the <tt>Exchange.FILE_NAME</tt> header from the value of another user-defined header. The <tt>Exchange.FILE_NAME</tt> header is understood by the <tt>file</tt> component. This way we can influence the name of the file being written. The user-defined header is the argument to the <tt>setFileHeader</tt> extension method (<tt>sourceHeader</tt> parameter).</p>

<p>In our example, we derive the destination file name from the <tt>destination</tt> message header. The <tt>file</tt> endpoint defined in <tt>SampleRouteConfig.groovy</tt> finally writes the results to the <tt>target/output</tt> directory. Before we can start the route we have to define a dependency to the <tt>camel-jetty</tt> component in our <tt>pom.xml</tt> file.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;project&gt;</span>

    <span class="code-tag">&lt;dependencies&gt;</span>
        ...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>camel-jetty<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.2.0<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        ...
    <span class="code-tag">&lt;/dependencies&gt;</span>

<span class="code-tag">&lt;project&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Projecttesting"></a>Project testing</h3>

<h4><a name="IPFreference-single-Unittest"></a>Unit test</h4>

<p>After running the unit tests we find a file <tt>default.txt</tt> in the <tt>target/output</tt> folder. The file <tt>default.txt</tt> was generated because we didn't set a <tt>destination</tt> header in the unit tests. The unit test sent the message body <tt>abc</tt> so there should be a repeated <tt>abcabc</tt> contained in the output file.</p>

<h4><a name="IPFreference-single-Servertest"></a>Server test</h4>

<p>For testing the HTTP endpoint we first have to start the server. To do so, right-click on <tt>SampleServer.java</tt> and select <tt>Run As-&gt;Java Application</tt>. This will start a standalone route or integration server that listens on port 8080 for requests. As HTTP client we use the <a href="http://http4e.roussev.org/install/" rel="nofollow">Eclipse HTTP Client</a>. To prepare the test open the Eclipse HTTP client and</p>

<ul>
	<li>Enter <tt><a href="http://localhost:8080/tutorial" rel="nofollow">http://localhost:8080/tutorial</a></tt> in the address field (top-left corner of the window)</li>
	<li>Select <tt>POST</tt> in the HTTP method field (top-right corner of the window)</li>
	<li>Enter <tt>destination=custom</tt> in the <em>Headers</em> field</li>
	<li>Enter <tt>test</tt> in the <em>Body</em> field</li>
</ul>


<p>To submit the request press the green arrow at the top of the window. The result should look like:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-5.JPG" align="absmiddle" border="0"></p>

<p>The <tt>jetty</tt> endpoint copies all HTTP headers onto Camel message headers, so we have the <tt>destination</tt> header present for creating a custom file name. In our example the <tt>destination</tt> header value is <tt>custom</tt> and the output file therefore has the name <tt>custom.txt</tt>. You should now see this file as well as the file generated during the unit test <tt>default.txt</tt> in the <tt>target/output</tt> folder. The content of the <tt>custom.txt</tt> file should be <tt>testtest</tt> because we sent a <tt>test</tt> HTTP request body.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-4.JPG" align="absmiddle" border="0"></p>

<h3><a name="IPFreference-single-Assemblyandinstallation"></a>Assembly and installation</h3>

<p>We finally want to create a distribution package from our project, install (unzip) that package somewhere and start a standalone integration server (i.e. an integration server that runs outside Eclipse). Before continuing make sure that you stopped the <tt>SampleServer</tt> that you started within Eclipse, otherwise, you won't be able to start another server. To create the package enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn assembly:assembly
</pre>
</div></div>

<p>on the command line. The created package <tt>basic-1.0-SNAPSHOT-bin.zip</tt> is written to the project's <tt>target</tt> folder. Copy the package to a new location and unzip it. This will create a folder named <tt>basic-1.0-SNAPSHOT</tt> with the following content:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-6.JPG" align="absmiddle" border="0"></p>

<p>The <tt>lib</tt> folder contains the project <tt>jar</tt> file (<tt>basic-1.0-SNAPSHOT.jar</tt>) as well as all required runtime dependencies. The <tt>conf</tt> folder contains a <tt>log4j.xml</tt> configuration file. Startup scripts are located directly under the root folder. How the project is packaged can of course be customized by changing the assembly descriptor of the project in <tt>src/main/assembly/bin.xml</tt>. The script <tt>startup.sh</tt> is currently empty i.e. for testing-purposes you have to run the server on Windows using <tt>startup.bat</tt>.</p>

<h3><a name="IPFreference-single-Startserver"></a>Start server</h3>

<p>To start the server run <tt>startup.bat</tt>. The console output should like like</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-7.JPG" align="absmiddle" border="0"></p>

<p>Finally, submit the HTTP request again that you've configured before with the Eclipse HTTP client. This should again create a file <tt>custom.txt</tt> in the newly created <tt>target/output</tt> folder.</p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Continue with XML processing on IPF</b><br><p>After this tutorial you might want to take a look at IPF's <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-DSLextensionsforGroovyXMLprocessing">XML processing and transformation capabilities</a> which are based on Groovy's XML support.</p></td></tr></tbody></table></div>
<h2><a name="IPFreference-single-HL7processingtutorial"></a>HL7 processing tutorial</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Prerequisites</b><br><ul>
	<li>It is assumed that you have a basic understanding of <a href="http://activemq.apache.org/camel" rel="nofollow">Camel</a> and <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a>.</li>
	<li>It is assumed that you have read the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+details+tutorial" title="First details tutorial">first details</a> tutorial or at least the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+steps+tutorial" title="First steps tutorial">first steps</a> tutorial.</li>
	<li>Also make sure you've correctly set up your <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Environment">development environment</a>.</li>
</ul>
</td></tr></tbody></table></div>

<p>This tutorial guides you through an <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing" title="HL7 processing">HL7 version 2 message processing</a> example. Message processing is done via IPF's <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a> and via <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-DSLextensions">HL7-specific extensions</a> to the Camel DSL. We will create an IPF application that reads an HL7 version 2 message from an HTTP endpoint, validates and transforms the message, and writes the transformation result to an output file.</p>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>HL7 features of Camel and IPF</b><br><p>This tutorial currently doesn't use Camel's <a href="http://activemq.apache.org/camel/hl7.html" rel="nofollow">HL7 features</a>. Camel's HL7 features and those provided by IPF are complementary to each other and can perfectly be combined. For example to receive HL7 version 2 messages via MLLP you can do so using Camel's <a href="http://activemq.apache.org/camel/hl7.html" rel="nofollow">HL7 component</a>.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-Validation"></a>Validation</h3>

<p>Let's look at the message we will use in our example. The message is an <tt>ADT A01</tt> message, version 2.2, and we want to enforce that</p>

<ul>
	<li>all primitive type values have the correct format and</li>
	<li>the message itself contains a defined sequence of segments</li>
</ul>


<p>The HL7 module of IPF comes with an HL7 validation DSL that makes the definition of validation rules very easy. Even better, IPF provides a complete set of rules that check whether the primitive type values meet the constraints defined in the HL7 specification.</p>

<h3><a name="IPFreference-single-Transformation"></a>Transformation</h3>

<p>Now lets look the transformation we want to perform if we passed validation.</p>

<ul>
	<li>The room number and bed number from the <tt>PV1[3]</tt> field shall be dropped. This field is a composite field and we want to drop the second and the third component.</li>
	<li>The birth date in <tt>PID[7]</tt> shall be reformatted by dropping the last 6 digits. This field is also a composite field with only a single component.</li>
	<li>The gender code in <tt>PID[8]</tt> shall be mapped to a code from another code system. We will use a simple code mapping service for that.</li>
</ul>


<p>Finally, we will derive the destination file name from the <tt>MSH[4]</tt> field (sending facility).</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-01.JPG" align="absmiddle" border="0"></p>

<h3><a name="IPFreference-single-Routedesign"></a>Route design</h3>

<p>Here's the message processing route using <a href="http://www.enterpriseintegrationpatterns.com/" rel="nofollow">enterprise integration pattern</a> symbols.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-02.JPG" align="absmiddle" border="0"></p>

<ul>
	<li>An <tt>ADT A01</tt> event message is received via a <a href="http://activemq.apache.org/camel/jetty.html" rel="nofollow"><tt>jetty</tt></a> endpoint (inbound HTTP endpoint).</li>
	<li>The message is validated as described above.</li>
	<li>The message is forwarded to a transformer that makes the changes to the HL7 message as described above.</li>
	<li>The transformation result is placed into different files whose names are derived from the <tt>MSH[4]</tt> field.</li>
</ul>


<h3><a name="IPFreference-single-Sourcecode"></a>Source code</h3>

<p>The source code for this tutorial can be downloaded from <a href="http://repo.openehealth.org/confluence/download/attachments/3211279/hl7.zip?version=3">here</a>.</p>

<h3><a name="IPFreference-single-Projectcreation"></a>Project creation</h3>

<p>We start by creating an example IPF project by entering</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate 
-DarchetypeGroupId=org.openehealth.ipf.archetypes 
-DarchetypeArtifactId=ipf-archetype-basic 
-DarchetypeVersion=&lt;ipf-version&gt; 
-DgroupId=org.openehealth.tutorial 
-DartifactId=hl7 
-Dversion=1.0-SNAPSHOT 
-DinteractiveMode=false
</pre>
</div></div>

<p>on the command line (make sure to have the command on a single line). This will create a folder named <tt>hl7</tt> in the current directory. Change to the <tt>hl7</tt> folder an enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn install
</pre>
</div></div>

<p>This will compile the project and install the project artifacts into your local Maven cache. Enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:eclipse
</pre>
</div></div>
<p>to generate the Eclipse project. To import the project start Eclipse, navigate to <tt>File-&gt;Import-&gt;General-&gt;Existing Projects into Workspace</tt> and select the created <tt>hl7</tt> folder as root directory. After having imported the project into Eclipse it should look like in the following figure.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-03.JPG" align="absmiddle" border="0"></p>
<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><p>It is assumed that you have installed the Groovy Eclipse plug-in as described in our <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development setup</a> </p></td></tr></tbody></table></div>

<p>You can find a detailed description of the created project structure in the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+details+tutorial#Firstdetailstutorial-Projectcreation">project creation</a> section of the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+details+tutorial" title="First details tutorial">first details</a> tutorial.</p>


<h3><a name="IPFreference-single-Extendprojectdescriptor"></a>Extend project descriptor</h3>

<p>In order to enable HL7 processing and communication over HTTP we have to include further dependencies into the Maven project descriptor <tt>pom.xml</tt>. These are</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Dependency </th>
<th class="confluenceTh"> Description </th>
</tr>
<tr>
<td class="confluenceTd"> <tt>platform-component-hl7</tt> </td>
<td class="confluenceTd"> IPF component that provides <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-DSLextensions">HL7-specific extensions</a> to the Camel DSL. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>modules-hl7dsl</tt> </td>
<td class="confluenceTd"> IPF component that provides the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a> and is transitively included via <tt>platform-camel-hl7</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>modules-hl7</tt> </td>
<td class="confluenceTd"> IPF component that provides the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+extensions" title="HAPI extensions">HAPI extensions</a> and is transitively included via <tt>platform-camel-hl7</tt>. </td>
</tr>
<tr>
<td class="confluenceTd"> <tt>camel-jetty</tt> </td>
<td class="confluenceTd"> Camel component that enables inbound communication over HTTP. </td>
</tr>
</tbody></table>

<p>The <tt>pom.xml</tt> file is located directly under the project's root directory. Here's an excerpt of the extended project descriptor.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml"><span class="code-tag">&lt;?xml version=<span class="code-quote">"1.0"</span> encoding=<span class="code-quote">"UTF-8"</span>?&gt;</span>
&lt;project
    xmlns=<span class="code-quote">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation="
http://maven.apache.org/POM/4.0.0
http://maven.apache.org/maven-v4_0_0.xsd"&gt;

    <span class="code-tag">&lt;modelVersion&gt;</span>4.0.0<span class="code-tag">&lt;/modelVersion&gt;</span>
    <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.tutorial<span class="code-tag">&lt;/groupId&gt;</span>
    <span class="code-tag">&lt;artifactId&gt;</span>hl7<span class="code-tag">&lt;/artifactId&gt;</span>
    <span class="code-tag">&lt;name&gt;</span>hl7<span class="code-tag">&lt;/name&gt;</span>
    <span class="code-tag">&lt;version&gt;</span>1.0-SNAPSHOT<span class="code-tag">&lt;/version&gt;</span>
    <span class="code-tag">&lt;packaging&gt;</span>jar<span class="code-tag">&lt;/packaging&gt;</span>

    <span class="code-tag">&lt;dependencies&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-hl7<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.2.0<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>camel-jetty<span class="code-tag">&lt;/artifactId&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>ca.uhn.hapi<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>hapi-structures-v22<span class="code-tag">&lt;/artifactId&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>ca.uhn.hapi<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>hapi-structures-v25<span class="code-tag">&lt;/artifactId&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.springframework<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>spring-test<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;scope&gt;</span>test<span class="code-tag">&lt;/scope&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>junit<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>junit<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;scope&gt;</span>test<span class="code-tag">&lt;/scope&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
    <span class="code-tag">&lt;/dependencies&gt;</span>

    <span class="code-tag">&lt;build&gt;</span>
        ...
    <span class="code-tag">&lt;/build&gt;</span>

    ...

<span class="code-tag">&lt;/project&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Extendapplicationcontext"></a>Extend application context</h3>

<p>The components we included in the previous section must also be configured in the <a href="http://www.springframework.org/" rel="nofollow">Spring</a> application <tt>context.xml</tt> file. This file is located under <tt>src/main/resources</tt>. In addition to the default configuration created by the archetype we need to</p>

<ul>
	<li>Register the HL7 DSL extensions provided by the <tt>platform-camel-hl7</tt> component at the model extender</li>
	<li>Register the HAPI extensions provided by the <tt>modules-hl7</tt> component at the model extender</li>
	<li>Configure a mapping service that we will use for code mappings</li>
	<li>Add a couple of beans needed for HL7 validation</li>
</ul>


<p>Here's the complete application <tt>context.xml</tt> file.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>        
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>

    &lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.tutorial.SampleRouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Code mapping service using tutorial-hl7.map as mapping table --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"mappingService"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScript"</span> value=<span class="code-quote">"classpath:tutorial-hl7.map"</span>/&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- DSL extensions provided by platform-camel-core --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"coreModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- DSL extensions provided by platform-camel-hl7 --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"hl7ModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.hl7.extend.Hl7ModelExtension"</span>/&gt;

    <span class="code-tag"><span class="code-comment">&lt;!-- HAPI extensions provided by modules-hl7 --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"hapiModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.extend.HapiModelExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"mappingService"</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"mappingExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.extend.MappingExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"mappingService"</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"routeModelExtender"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>  <span class="code-tag"><span class="code-comment">&lt;!-- Register core DSL extensions --&gt;</span></span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"hl7ModelExtension"</span> /&gt;</span>   <span class="code-tag"><span class="code-comment">&lt;!-- Register HL7 DSL extensions --&gt;</span></span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"hapiModelExtension"</span> /&gt;</span>  <span class="code-tag"><span class="code-comment">&lt;!-- Register HAPI extensions --&gt;</span></span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"mappingExtension"</span> /&gt;</span>    <span class="code-tag"><span class="code-comment">&lt;!-- Register mapping extensions --&gt;</span></span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

   <span class="code-tag"><span class="code-comment">&lt;!-- All we need for validation: a validator, a validation context, --&gt;</span></span>
   <span class="code-tag"><span class="code-comment">&lt;!-- and two set of rules                                           --&gt;</span></span>
   <span class="code-tag">&lt;bean id=<span class="code-quote">"myValidatorBean"</span> class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.validation.support.HL7Validator"</span>/&gt;</span>

   &lt;bean id=<span class="code-quote">"validationContext"</span>
       class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.validation.ValidationContextFactoryBean"</span>/&gt;

   &lt;bean id=<span class="code-quote">"defaultTypeRules"</span>
       class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.validation.builder.DefaultTypeRulesBuilder"</span>/&gt;

   &lt;bean id=<span class="code-quote">"myCustomRules"</span>
       class=<span class="code-quote">"org.openehealth.tutorial.SampleRulesBuilder"</span>/&gt;
       
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>The mapping table <tt>map.groovy</tt> referenced by the <tt>mappingService</tt> bean is described in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Codemapping">code mapping</a> section.</p>

<h3><a name="IPFreference-single-Routedefinition"></a>Route definition</h3>

<p>Lets start with an overview of the complete route and then discuss it step by step. Before doing so open the <tt>SampleRouteBuilder.groovy</tt> file in Eclipse and replace the existing routes in the <tt>configure()</tt> method.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>'SampleRouteBuilder.groovy'</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial

<span class="code-keyword">import</span> ca.uhn.hl7v2.validation.ValidationContext

<span class="code-keyword">import</span> org.apache.camel.Exchange
<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class SampleRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('jetty:http:<span class="code-comment">//localhost:8080/tutorial')                  // start HTTP server
</span>            .to('direct:input')                                       <span class="code-comment">// forward request
</span>
        from('direct:input')                                          <span class="code-comment">// receive HL7 message
</span>            .unmarshal().ghl7()                                       <span class="code-comment">// create message adapter (HL7 DSL support)
</span>            .validate().ghl7()
                .profile(lookup(ValidationContext.class))             <span class="code-comment">// validate against custom validation context
</span>            .transmogrify { msg -&gt;
                msg.PV1[3][2] = ''                                    <span class="code-comment">// clear room nr.
</span>                msg.PV1[3][3] = ''                                    <span class="code-comment">// clear bed nr.
</span>                msg.PID[7][1] = msg.PID[7][1].value.substring(0, 8)   <span class="code-comment">// format birth date
</span>                msg.PID[8]    = msg.PID[8].mapGender()                <span class="code-comment">// map 'gender' code
</span>                msg                                                   <span class="code-comment">// <span class="code-keyword">return</span> result
</span>            }
            .setHeader(Exchange.FILE_NAME) {exchange -&gt;               <span class="code-comment">// set filename header to
</span>                exchange.in.body.MSH[4].value + '.hl7'                <span class="code-comment">// sending facility (MSH[4])
</span>            }
            .marshal().ghl7()                                         <span class="code-comment">// convert to external representation
</span>            .to('file:target/output')                                 <span class="code-comment">// write external representation to file
</span>    }    
    
}
</pre>
</div></div>

<p>First, we define a <tt>jetty</tt> endpoint for receiving HL7 messages over HTTP.</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>...
from('jetty:http://localhost:8080/tutorial')                  // start HTTP server
    .to('direct:input')                                       // forward request
...
</pre>
</div></div>

<p>This will start an HTTP server listening on port <tt>8080</tt>. The context path is <tt>tutorial</tt>. The message is then forwarded to a <tt>direct</tt> endpoint that we also use inside our JUnit tests for sending test messages. HL7 messages arrive as <tt>InputStream</tt> at the <tt>direct:input</tt> endpoint . We won't work on this representation of the HL7 message. Instead we create a so-called <em>message adapter</em> that implements the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a>. Creation of a message adapter from an <tt>InputStream</tt> is done via <tt>unmarshal().ghl7()</tt> (this also works if the message is a <tt>String</tt>).</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>...
from('direct:input')                                          // receive HL7 message
     .unmarshal().ghl7()                                      // create message adapter (HL7 DSL support)
...
</pre>
</div></div>

<p>The next step in the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing#HL7processing-HL7messagevalidation">HL7 message validation</a> using the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+validation" title="HL7 validation">HL7 Validation framework</a>.</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>...
.validate().ghl7()
    .profile(lookup(ValidationContext.class))             // validate against custom validation context
...
</pre>
</div></div>

<p>The validation is executed against the HAPI message object. The <tt>profile</tt> DSL extension initializes the validator with the HL7 <tt>ValidationContext</tt> that has been injected into the route builder.</p>

<p>Now, we add our custom <tt>SampleRulesBuilder.groovy</tt> script, that defines the allowed sequence and cardinalities of HL7 groups and segments for this message. The file is added to the <tt>src/main/groovy</tt> directory in the package <tt>org.openehealth.tutorial</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRulesBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial

<span class="code-keyword">import</span> ca.uhn.hl7v2.validation.ValidationContext

<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.validation.builder.RuleBuilder
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7.validation.builder.ValidationContextBuilder

class SampleRulesBuilder <span class="code-keyword">extends</span> ValidationContextBuilder {

    <span class="code-comment">// We define only a subset of the segments defined in the HL7 2.2 spec
</span>    
    <span class="code-keyword">public</span> RuleBuilder forContext(ValidationContext context) {
        <span class="code-keyword">new</span> RuleBuilder(context)
          .forVersion('2.2')
            .message('ADT', 'A01').abstractSyntax(
                    'MSH',
                    'EVN',
                    'PID',
                    [  {  'NK1'  }  ],  
                    'PV1',
                    [  {  INSURANCE(
                              'IN1',  
                              [  'IN2'  ] , 
                              [  'IN3'  ]  
                    )}]                                                  
            )
    }
    
}
</pre>
</div></div>

<p>The sequence and cardinality of groups and segments is defined in a syntax that is very closely related to the HL7 Abstract Message Syntax. The message is required to contain a MSH, EVN, PID and PV1 segment; it may contain any number of NK1 segments and it may contain a repeatable INSURANCE group. For detail, please read the <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+validation" title="HL7 validation">documentation on HL7 validation</a>.<br>
As our test message matches this definition, we expect the message to pass validation.</p>

<p>The next step in the route is the HL7 message <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Transformation">transformation</a> using the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a>.</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>...
.transmogrify { msg -&gt;
    msg.PV1[3][2] = ''                                    // clear room nr.
    msg.PV1[3][3] = ''                                    // clear bed nr.
    msg.PID[7][1] = msg.PID[7][1].value.substring(0, 8)   // format birth date
    msg.PID[8]    = msg.PID[8].mapGender()                // map 'gender' code
    msg                                                   // return result
...
}
</pre>
</div></div>

<p>We do the transformation with a <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Transmogrifier">transmogrifier</a> closure. Inside the closure we use the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a>. The HL7 DSL allows us to manipulate HL7 messages on a very high level without dealing with low level <a href="http://hl7api.sourceforge.net/" rel="nofollow">HL7 API</a> details. You immediately see how the message is processed by looking at the code. For accessing a message segment you directly use the segment name like <tt>msg.PV1</tt> or <tt>msg.PID</tt>. Fields and sub-fields (components of a composite field) are accessed by indices starting from 1. For example, <tt>PV1[3][2]</tt> denotes the second component of the third <tt>PV1</tt> field. For a complete reference of the HL7 DSL refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+DSL" title="HAPI DSL">HL7 DSL</a> section of the reference manual. Code mapping is done with the <tt>mapGender()</tt> method. This method translates the English <tt>F</tt> code (<em>female</em>) contained in <tt>PID[8]</tt> to a German <tt>W</tt> code (<em>weiblich</em>). This will be explained in more detail in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Codemapping">code mapping</a> section.</p>

<p>The transformation result can now be written to a file. We derive the name of the file from the content of the <tt>MSH[4]</tt> field. For example, from <tt>HZL</tt> we write a file named <tt>HZL.hl7</tt>, from <tt>PKL</tt> a file named <tt>PKL.hl7</tt> ... and so on. We achieve this by setting the <tt>Exchange.FILE_NAME</tt> message header which is understood by the <tt>file</tt> component.</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>...
.setHeader(Exchange.FILE_NAME) {exchange -&gt;               // set filename header to
    exchange.in.body.MSH[4].value + '.hl7'                // sending facility (MSH[4])
}
.marshal().ghl7()                                         // convert to external representation
.to('file:target/output')                                 // write external representation to file
...
</pre>
</div></div>

<p>For setting the message header we use the <tt>setHeader()</tt> method. Inside the <tt>setHeader</tt> closure we again use the HL7 DSL to access the <tt>MSH[4]</tt> field. Before the message can actually be written to a file we have to marshal the message adapter with <tt>marshal().ghl7()</tt>. This is the reverse operation to <tt>unmarshal().ghl7()</tt> at the beginning of the route. The <tt>file</tt> endpoint is configured in a way that it writes files to the <tt>target/output</tt> directory. Writing to an existing file will overwrite its content. Before we can start testing the route we have to setup the code mapping table.</p>

<h3><a name="IPFreference-single-Codemapping"></a>Code mapping</h3>

<p>In the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Extendapplicationcontext">extend application context</a> section we've configured the code mapping service to use a <tt>mappingScript</tt> named <tt>tutorial-hl7.map</tt>. In our example, we only need a single <tt>gender</tt> mapping table with a single entry that maps <tt>F</tt> to <tt>W</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>tutorial-hl7.map</b></div><div class="codeContent panelContent">
<pre class="code-java">mappings = {
  gender(
    F      : 'W',

    (ELSE) : { it }
  )
}
</pre>
</div></div>

<p>This format is valid Groovy syntax and is understood by the default bi-directional mapping service provided by IPF. For a complete reference refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/HAPI+extensions#HAPIextensions-MappingService">mapping service</a> section of the reference manual. You may also provide your own mapping service implementation by implementing the <tt>org.openehealth.ipf.modules.hl7.mappings.MappingService</tt> interface. To install the mapping table create a <tt>map.groovy</tt> file under <tt>src/main/resources</tt> and copy the above <tt>mappings</tt> block into that file.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-04.JPG" align="absmiddle" border="0"></p>

<p>It is interesting to see how the <tt>gender</tt> table is selected for translating <tt>F</tt> to <tt>W</tt>. There is a correspondence between the name of the mapping method and the name of the selected code table. Using <tt>mapGender()</tt> instructs IPF to use the <tt>gender</tt> mapping table. If you write <tt>mapXyz()</tt> IPF would try to find a table named <tt>xyz</tt> ... and so on. You may also use the <tt>map*()</tt> methods on <tt>java.lang.String</tt> objects like in the following example.</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>assert 'W' == 'F'.mapGender()
</pre>
</div></div>

<p>This is achieved via <a href="http://groovy.codehaus.org/Dynamic+Groovy" rel="nofollow">dynamic Groovy</a> language features.</p>

<h3><a name="IPFreference-single-Routetesting"></a>Route testing</h3>

<h4><a name="IPFreference-single-Automatedtest"></a>Automated test</h4>

<p>For automated testing we will use the following HL7 message.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>msg-01.hl7</b></div><div class="codeContent panelContent">
<pre class="code-java">MSH|^~\&amp;|SAP-ISH|HZL|||20040805152637||ADT^A01|123456|T|2.2|||ER
EVN|A01|20040805152637
PID|1||79471||Meier^Elfriede|Meier|19400101000000|F|||Hauptstrasse 23^^Essen^NW^11000^DE^H|||||S|||111-11-1111||||Essen
NK1|1|Meier^Elfriede|EMC|Hauptstrasse 23^^Essen^NW^11000^DE|333-4444~333-5555|
PV1|1|I|ISKA^13^4|R||||823745217||||||||N|||79237645|||||||||||||||||||||||||20040805000000
</pre>
</div></div>

<p>After processing we expect the following output.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>msg-01.hl7.expected</b></div><div class="codeContent panelContent">
<pre class="code-java">MSH|^~\&amp;|SAP-ISH|HZL|||20040805152637||ADT^A01|123456|T|2.2|||ER
EVN|A01|20040805152637
PID|1||79471||Meier^Elfriede|Meier|19400101|W|||Hauptstrasse 23^^Essen^NW^11000^DE^H|||||S|||111-11-1111||||Essen
NK1|1|Meier^Elfriede|EMC|Hauptstrasse 23^^Essen^NW^11000^DE|333-4444~333-5555|
PV1|1|I|ISKA|R||||823745217||||||||N|||79237645|||||||||||||||||||||||||20040805000000
</pre>
</div></div>

<p>Create two files, <tt>msg-01.hl7</tt> and <tt>msg-01.hl7.expected</tt>, with the above content under the <tt>src/test/resources</tt> folder.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-05.JPG" align="absmiddle" border="0"></p>

<p>These files will be used inside our JUnit test. To implement the test open the <tt>SampleRouteTest.java</tt> file in Eclipse and replace its content with the following.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial;

<span class="code-keyword">import</span> <span class="code-keyword">static</span> org.junit.Assert.assertEquals;

<span class="code-keyword">import</span> org.apache.camel.ProducerTemplate;
<span class="code-keyword">import</span> org.junit.Test;
<span class="code-keyword">import</span> org.junit.runner.RunWith;
<span class="code-keyword">import</span> org.openehealth.ipf.modules.hl7dsl.MessageAdapters;
<span class="code-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="code-keyword">import</span> org.springframework.core.io.ClassPathResource;
<span class="code-keyword">import</span> org.springframework.core.io.FileSystemResource;
<span class="code-keyword">import</span> org.springframework.core.io.Resource;
<span class="code-keyword">import</span> org.springframework.test.context.ContextConfiguration;
<span class="code-keyword">import</span> org.springframework.test.context.TestExecutionListeners;
<span class="code-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
<span class="code-keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;

@RunWith(SpringJUnit4ClassRunner.class)
@TestExecutionListeners({DependencyInjectionTestExecutionListener.class})
@ContextConfiguration(locations = { <span class="code-quote">"/context.xml"</span> })
<span class="code-keyword">public</span> class SampleRouteTest {

    @Autowired
    <span class="code-keyword">private</span> ProducerTemplate producerTemplate;

    @Test
    <span class="code-keyword">public</span> void testRoute() <span class="code-keyword">throws</span> Exception {
        Resource input = <span class="code-keyword">new</span> ClassPathResource(<span class="code-quote">"/msg-01.hl7"</span>);
        producerTemplate.requestBody(<span class="code-quote">"direct:input"</span>, input.getInputStream());
        Resource result = <span class="code-keyword">new</span> FileSystemResource(<span class="code-quote">"target/output/HZL.hl7"</span>);
        assertEquals(
                MessageAdapters.load(<span class="code-quote">"msg-01.hl7.expected"</span>).toString(),
                MessageAdapters.make(result.getInputStream()).toString());
    }

}
</pre>
</div></div>

<p>The <tt>testRoute</tt> method opens an <tt>InputStream</tt> on the input file and sends that stream in the in-message body to the <tt>direct:input</tt> endpoint. The processing result is loaded from the created <tt>HZL.hl7</tt> file and compared with the expected processing result. For reading HL7 messages from a stream or a resource we use the <tt>MessageAdapters</tt> utility class. To execute the test right-click on <tt>SampleRouteTest.java</tt> and select <tt>Run As-&gt;JUnit Test</tt> from the context menu. The test should now successfully execute and you should also see an <tt>HZL.hl7</tt> file in the <tt>target/output</tt> directory containing the processing result.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-06.JPG" align="absmiddle" border="0"></p>

<p>Just for fun, modify the validation part, so that the message does <em>not</em> validate against the rules. Modify the <tt>SampleRulesBuilder.groovy</tt> script and comment the EVN segment</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>          .forVersion('2.2')
            .message('ADT', 'A01').abstractSyntax(
                    'MSH',
                 // 'EVN',
                    'PID',
                    [  {  'NK1'  }  ],
</pre>
</div></div>

<p>If you run the test again, the console shows exceptions and the test fails:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>...
SEVERE: Invalid message
ca.uhn.hl7v2.validation.ValidationException: The structure EVN appears in the message but not in the profile
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
...
</pre>
</div></div>

<p>Before continuing, undo the change in <tt>SampleRulesBuilder.groovy</tt> by removing the comment again.</p>

<h4><a name="IPFreference-single-Manualtest"></a>Manual test</h4>

<p>For manual testing we use the <a href="http://http4e.roussev.org/install/" rel="nofollow">Eclipse HTTP Client</a> to send HL7 messages to the <tt>jetty</tt> endpoint that we configured in <tt>SampleRouteBuilder.groovy</tt>. Before we can send messages over HTTP we have to start the route server. To do so, right-click on <tt>SampleServer.java</tt> and select <tt>Run As-&gt;Java Application</tt>. Now we have a server running that accepts HL7 messages on port <tt>8080</tt> under the <tt>tutorial</tt> context path. Then open the Eclipse HTTP client and</p>

<ul>
	<li>Enter <tt><a href="http://localhost:8080/tutorial" rel="nofollow">http://localhost:8080/tutorial</a></tt> in the address field (top-left corner of the window)</li>
	<li>Select <tt>POST</tt> in the HTTP method field (top-right corner of the window)</li>
	<li>Copy the following HL7 message into the <em>Body</em> field</li>
</ul>


<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">MSH|^~\&amp;|SAP-ISH|PKL|||20040805152637||ADT^A01|123456|T|2.2|||ER
EVN|A01|20040805152637
PID|1||79471||Meier^Elfriede|Meier|19400101000000|F|||Hauptstrasse 23^^Essen^NW^11000^DE^H|||||S|||111-11-1111||||Essen
NK1|1|Meier^Elfriede|EMC|Hauptstrasse 23^^Essen^NW^11000^DE|333-4444~333-5555|
PV1|1|I|ISKA^13^4|R||||823745217||||||||N|||79237645|||||||||||||||||||||||||20040805000000
</pre>
</div></div>

<p>This is the same message we used for the JUnit test but with a different <tt>MSH[4]</tt> value (<tt>PKL</tt> instead of <tt>HZL</tt>). To submit the request press the green arrow at the top of the window. The result should look like:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-07.JPG" align="absmiddle" border="0"></p>

<p>Because we derive the result filename from the <tt>MSH[4]</tt> field we should now see a <tt>PKL.hl7</tt> file in the <tt>target/output</tt> directory.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-08.JPG" align="absmiddle" border="0"></p>

<p>Remember to terminate the server that we started for the manual test. You can do this in Eclipse within the Console-Window by clicking the red <tt>terminate</tt> icon:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-11.JPG" align="absmiddle" border="0"></p>

<h3><a name="IPFreference-single-Assemblyandinstallation"></a>Assembly and installation</h3>

<p>We finally want to create a distribution package from our project, install (unzip) that package somewhere and start a standalone integration server (i.e. an integration server that runs outside Eclipse). Before continuing make sure that you stopped the <tt>SampleServer</tt> that you started within Eclipse, otherwise, you won't be able to start another server. To create the package enter</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn assembly:assembly
</pre>
</div></div>

<p>on the command line. The created package <tt>hl7-1.0-SNAPSHOT-bin.zip</tt> is written to the project's <tt>target</tt> folder. Copy the package to a new location and unzip it. This will create a folder named <tt>hl7-1.0-SNAPSHOT</tt> with the following content:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-basic-6.JPG" align="absmiddle" border="0"></p>

<p>The <tt>lib</tt> folder contains the project <tt>jar</tt> file (<tt>hl7-1.0-SNAPSHOT.jar</tt>) as well as all required runtime dependencies. The <tt>conf</tt> folder contains a <tt>log4j.xml</tt> configuration file. Startup scripts are located directly under the root folder. The way how the project is packaged can of course be customized by changing the project's <tt>src/main/assembly/bin.xml</tt> assembly descriptor. The script <tt>startup.sh</tt> is currently empty i.e. for testing-purposes you have to run the server on Windows using <tt>startup.bat</tt>.</p>

<h3><a name="IPFreference-single-Startserver"></a>Start server</h3>

<p>To start the server run <tt>startup.bat</tt>. The console output should like like</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/tutorial-hl7-10.JPG" align="absmiddle" border="0"></p>

<p>Finally, submit the HTTP request again that you've configured before with the Eclipse HTTP client. This should again create a file <tt>PKL.hl7</tt> in the newly created <tt>target/output</tt> folder. The server can be stopped by pressing <tt>CTRL+C</tt>.</p>
<h2><a name="IPFreference-single-TutorialforroutingtoawebserviceviaHTTP"></a>Tutorial for routing to a webservice via HTTP</h2>

<div class="panelMacro"><table class="infoMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/information.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Prerequisites</b><br><ul>
	<li>It is assumed that you have a basic understanding of <a href="http://camel.apache.org/" rel="nofollow">Camel</a> and <a href="http://groovy.codehaus.org/" rel="nofollow">Groovy</a>.</li>
	<li>It is assumed that you have read the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+details+tutorial" title="First details tutorial">first details</a> tutorial or at least the <a href="http://repo.openehealth.org/confluence/display/ipf2/First+steps+tutorial" title="First steps tutorial">first steps</a> tutorial.</li>
	<li>Also make sure you've correctly set up your <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Environment">development environment</a>.</li>
</ul>
</td></tr></tbody></table></div>

<p>This tutorial shows how to use the Large Binary Support (LBS) of the IPF to create a router for a webservice that exposes an HTTP-based protocol. It is targeted at developers that are familiar with the IPF, Camel and Groovy. A basic understanding of webservices based on a wsdl is also useful, although not essential.</p>

<p>The webservice is a simple image repository that allows uploading and downloading of images using standard HTTP POST and GET requests.</p>

<p>The steps of the tutorial are:</p>
<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-CreateabasicprojectusingtheIPFandLBS">Create a basic project using the IPF and LBS</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Createthewebservice">Create the webservice</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single#IPFreference-single-Addtherouting">Add the routing</a></li>
</ul>



<h3><a name="IPFreference-single-Sourcecode"></a>Source code</h3>

<p>The source code for this tutorial can be downloaded from <a href="http://repo.openehealth.org/confluence/download/attachments/3211283/router.zip?version=5">here</a>. Unpack the zip and import the contained Eclipse project into your workspace. After importing it might be necessary to clean the project if errors are reported.</p>

<h3><a name="IPFreference-single-CreateabasicprojectusingtheIPFandLBS"></a>Create a basic project using the IPF and LBS</h3>

<p>The Maven project is created via an IPF maven archetype. Find a suitable location on your disk and create the project using the following command (make sure that everything is on a single line):</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate 
-DarchetypeGroupId=org.openehealth.ipf.archetypes 
-DarchetypeArtifactId=ipf-archetype-basic 
-DarchetypeVersion=&lt;ipf-version&gt; 
-DgroupId=org.openehealth.tutorial 
-DartifactId=router 
-Dversion=1.0-SNAPSHOT 
-DinteractiveMode=<span class="code-keyword">false</span>
</pre>
</div></div>

<p>Note: Depending on the version of the IPF you are using, you have to set the <tt>archetypeVersion</tt> setting.</p>

<p>Enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:eclipse
</pre>
</div></div>
<p>to generate the Eclipse project. Within an Eclipse workspace you can now import the project using <tt>File-&gt;Import-&gt;General-&gt;Existing Projects into Workspace</tt>. Select the <tt>router</tt> directory and click <tt>Finish</tt>. You should see the router project in the workspace.</p>

<p>The created project already contains a useful skeleton, but it must be configured to use the LBS and CXF. Open the <tt>pom.xml</tt> and add the following dependencies to the <tt>&lt;project&gt;&lt;dependencies&gt;</tt> section:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">...
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-cxf<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.2.0<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.openehealth.ipf.platform-camel<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>platform-camel-lbs-http<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.2.0<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.apache.cxf<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>cxf-rt-transports-http-jetty<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;scope&gt;</span>test<span class="code-tag">&lt;/scope&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>2.2.11<span class="code-tag">&lt;/version&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
        &lt;!-- Jetty 6 is excluded from CXF dependencies in the root pom.xml, but
             it is needed from the camel-cxf endpoints factory --&gt;
        <span class="code-tag">&lt;dependency&gt;</span>
            <span class="code-tag">&lt;groupId&gt;</span>org.mortbay.jetty<span class="code-tag">&lt;/groupId&gt;</span>
            <span class="code-tag">&lt;artifactId&gt;</span>jetty<span class="code-tag">&lt;/artifactId&gt;</span>
            <span class="code-tag">&lt;version&gt;</span>6.1.22<span class="code-tag">&lt;/version&gt;</span>
            <span class="code-tag">&lt;scope&gt;</span>test<span class="code-tag">&lt;/scope&gt;</span>
        <span class="code-tag">&lt;/dependency&gt;</span>
</pre>
</div></div>

<p>Save the file and update Eclipse project with the dependencies to include the LBS jars. Enter</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn eclipse:clean eclipse:eclipse
</pre>
</div></div>
<p>to clean and generate new Eclipse project. </p>

<p>The archetype project contains a sample configuration that is based on the core IPF. This must be changed in order to use the <tt>store</tt> and <tt>fetch</tt> processors. Open the file <tt>context.xml</tt> in <tt>src/main/resources</tt>. This is the configuration file of the Spring application context. It contains the extensions available for route definitions. The sample configuration includes two extensions: <tt>coreModelExtension</tt> for the core IPF features and <tt>sampleModelExtension</tt> for any custom extensions of our own project. Add the extension of the LBS by adding another bean:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    <span class="code-tag"><span class="code-comment">&lt;!-- Allows usage of store() and fetch() within routes --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"lbsModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.core.extend.LbsModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>All extension beans must be registered with a <tt>ModelExtender</tt>, in this case the <tt>routeModelExtender</tt>. Add the new bean to the list of extensions. The result should look like this:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    &lt;bean id=<span class="code-quote">"routeModelExtender"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"lbsModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"sampleModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>Add beans for a <tt>ResourceFactory</tt> and a <tt>LargeBinaryStore</tt>. The factory creates resources for the images that are stored in the large binary store while they are being processed by the router:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    <span class="code-tag"><span class="code-comment">&lt;!-- Stores the binaries while processing the routes --&gt;</span></span>
    <span class="code-tag">&lt;bean id=<span class="code-quote">"largeBinaryStore"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.lbs.store.DiskStore"</span>&gt;</span>
        <span class="code-tag">&lt;constructor-arg value=<span class="code-quote">"target/tempstore"</span>/&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Creates data sources used as resources in Camel messages --&gt;</span></span>
    <span class="code-tag">&lt;bean id=<span class="code-quote">"resourceFactory"</span> class=<span class="code-quote">"org.openehealth.ipf.commons.lbs.resource.ResourceFactory"</span>&gt;</span>
        <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"largeBinaryStore"</span> /&gt;</span>
        <span class="code-tag">&lt;constructor-arg value=<span class="code-quote">"unnamed"</span> /&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>
</pre>
</div></div>

<p>Beginning with IPF 2.2.0 it is necessary to use a modified version of the Jetty component with the LBS. This component ensures that the LBS functionality has access to the pure InputStream despite various changes done in Camel 2.3.0. To enable the usage of this component you need to add the following bean:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    <span class="code-tag">&lt;bean id=<span class="code-quote">"jetty"</span> class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.http.LbsJettyHttpComponent"</span> /&gt;</span>
</pre>
</div></div>

<h3><a name="IPFreference-single-Createthewebservice"></a>Create the webservice</h3>

<p>The webservice is created using a wsdl-first approach. It should allow uploading and downloading of images via two methods. The wsdl defines a service with these two methods and a type for the image. The upload method returns an ID for an image, that is used is subsequent calls to download the image again. </p>

<p>Create the following wsdl-file in the directory <tt>src/main/resources/wsdl</tt> and name it <tt>imagebin.wsdl</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>/router/src/main/resources/wsdl/imagebin.wsdl</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;wsdl:definitions name=<span class="code-quote">"ImageBin"</span>
    targetNamespace=<span class="code-quote">"http://tutorial.openehealth.org/imagebin/"</span>
    xmlns=<span class="code-quote">"http://schemas.xmlsoap.org/wsdl/"</span> <span class="code-keyword">xmlns:soap</span>=<span class="code-quote">"http://schemas.xmlsoap.org/wsdl/soap/"</span>
    <span class="code-keyword">xmlns:http</span>=<span class="code-quote">"http://schemas.xmlsoap.org/wsdl/http/"</span> <span class="code-keyword">xmlns:tns</span>=<span class="code-quote">"http://tutorial.openehealth.org/imagebin/"</span>
    <span class="code-keyword">xmlns:types</span>=<span class="code-quote">"http://tutorial.openehealth.org/imagebin/types/"</span>
    <span class="code-keyword">xmlns:xmime</span>=<span class="code-quote">"http://www.w3.org/2005/05/xmlmime"</span> <span class="code-keyword">xmlns:wsdl</span>=<span class="code-quote">"http://schemas.xmlsoap.org/wsdl/"</span>
    <span class="code-keyword">xmlns:xsd</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema"</span>&gt;
    <span class="code-tag">&lt;wsdl:types&gt;</span>
        &lt;schema targetNamespace=<span class="code-quote">"http://tutorial.openehealth.org/imagebin/types/"</span>
            xmlns=<span class="code-quote">"http://www.w3.org/2001/XMLSchema"</span> <span class="code-keyword">xmlns:tns</span>=<span class="code-quote">"http://tutorial.openehealth.org/imagebin/types/"</span>
            elementFormDefault=<span class="code-quote">"qualified"</span>&gt;

            <span class="code-tag">&lt;element name=<span class="code-quote">"upload"</span>&gt;</span>
                <span class="code-tag">&lt;complexType&gt;</span>
                    <span class="code-tag">&lt;sequence&gt;</span>
                        &lt;element name=<span class="code-quote">"imageData"</span> type=<span class="code-quote">"base64Binary"</span>
                            xmime:expectedContentTypes=<span class="code-quote">"application/octet-stream"</span> /&gt;
                    <span class="code-tag">&lt;/sequence&gt;</span>
                <span class="code-tag">&lt;/complexType&gt;</span>
            <span class="code-tag">&lt;/element&gt;</span>

            <span class="code-tag">&lt;element name=<span class="code-quote">"uploadResponse"</span>&gt;</span>
                <span class="code-tag">&lt;complexType&gt;</span>
                    <span class="code-tag">&lt;sequence&gt;</span>
                        <span class="code-tag">&lt;element name=<span class="code-quote">"handle"</span> type=<span class="code-quote">"string"</span> /&gt;</span>
                    <span class="code-tag">&lt;/sequence&gt;</span>
                <span class="code-tag">&lt;/complexType&gt;</span>
            <span class="code-tag">&lt;/element&gt;</span>

            <span class="code-tag">&lt;element name=<span class="code-quote">"download"</span>&gt;</span>
                <span class="code-tag">&lt;complexType&gt;</span>
                    <span class="code-tag">&lt;sequence&gt;</span>
                        <span class="code-tag">&lt;element name=<span class="code-quote">"handle"</span> type=<span class="code-quote">"string"</span> /&gt;</span>
                    <span class="code-tag">&lt;/sequence&gt;</span>
                <span class="code-tag">&lt;/complexType&gt;</span>
            <span class="code-tag">&lt;/element&gt;</span>

            <span class="code-tag">&lt;element name=<span class="code-quote">"downloadResponse"</span>&gt;</span>
                <span class="code-tag">&lt;complexType&gt;</span>
                    <span class="code-tag">&lt;sequence&gt;</span>
                        &lt;element name=<span class="code-quote">"imageData"</span> type=<span class="code-quote">"base64Binary"</span>
                            xmime:expectedContentTypes=<span class="code-quote">"application/octet-stream"</span> /&gt;
                    <span class="code-tag">&lt;/sequence&gt;</span>
                <span class="code-tag">&lt;/complexType&gt;</span>
            <span class="code-tag">&lt;/element&gt;</span>

        <span class="code-tag">&lt;/schema&gt;</span>
    <span class="code-tag">&lt;/wsdl:types&gt;</span>

    <span class="code-tag">&lt;wsdl:message name=<span class="code-quote">"uploadRequest"</span>&gt;</span>
        <span class="code-tag">&lt;wsdl:part element=<span class="code-quote">"types:upload"</span> name=<span class="code-quote">"in"</span> /&gt;</span>
    <span class="code-tag">&lt;/wsdl:message&gt;</span>

    <span class="code-tag">&lt;wsdl:message name=<span class="code-quote">"uploadResponse"</span>&gt;</span>
        <span class="code-tag">&lt;wsdl:part element=<span class="code-quote">"types:uploadResponse"</span> name=<span class="code-quote">"out"</span> /&gt;</span>
    <span class="code-tag">&lt;/wsdl:message&gt;</span>

    <span class="code-tag">&lt;wsdl:message name=<span class="code-quote">"downloadRequest"</span>&gt;</span>
        <span class="code-tag">&lt;wsdl:part element=<span class="code-quote">"types:download"</span> name=<span class="code-quote">"in"</span> /&gt;</span>
    <span class="code-tag">&lt;/wsdl:message&gt;</span>

    <span class="code-tag">&lt;wsdl:message name=<span class="code-quote">"downloadResponse"</span>&gt;</span>
        <span class="code-tag">&lt;wsdl:part element=<span class="code-quote">"types:downloadResponse"</span> name=<span class="code-quote">"out"</span> /&gt;</span>
    <span class="code-tag">&lt;/wsdl:message&gt;</span>

    <span class="code-tag">&lt;wsdl:portType name=<span class="code-quote">"ImageBin"</span>&gt;</span>
        <span class="code-tag">&lt;wsdl:operation name=<span class="code-quote">"upload"</span>&gt;</span>
            <span class="code-tag">&lt;wsdl:input message=<span class="code-quote">"tns:uploadRequest"</span> name=<span class="code-quote">"uploadRequest"</span> /&gt;</span>
            <span class="code-tag">&lt;wsdl:output message=<span class="code-quote">"tns:uploadResponse"</span> name=<span class="code-quote">"uploadResponse"</span> /&gt;</span>
        <span class="code-tag">&lt;/wsdl:operation&gt;</span>

        <span class="code-tag">&lt;wsdl:operation name=<span class="code-quote">"download"</span>&gt;</span>
            <span class="code-tag">&lt;wsdl:input message=<span class="code-quote">"tns:downloadRequest"</span> name=<span class="code-quote">"downloadRequest"</span> /&gt;</span>
            <span class="code-tag">&lt;wsdl:output message=<span class="code-quote">"tns:downloadResponse"</span> name=<span class="code-quote">"downloadResponse"</span> /&gt;</span>
        <span class="code-tag">&lt;/wsdl:operation&gt;</span>
    <span class="code-tag">&lt;/wsdl:portType&gt;</span>

    <span class="code-tag">&lt;wsdl:binding name=<span class="code-quote">"ImageBin_SOAPBinding"</span> type=<span class="code-quote">"tns:ImageBin"</span>&gt;</span>
        &lt;soap:binding style=<span class="code-quote">"document"</span>
            transport=<span class="code-quote">"http://schemas.xmlsoap.org/soap/http"</span> /&gt;

        <span class="code-tag">&lt;wsdl:operation name=<span class="code-quote">"upload"</span>&gt;</span>
            <span class="code-tag">&lt;soap:operation soapAction=<span class="code-quote">"" style="</span>document" /&gt;</span>

            <span class="code-tag">&lt;wsdl:input name=<span class="code-quote">"uploadRequest"</span>&gt;</span>
                <span class="code-tag">&lt;soap:body use=<span class="code-quote">"literal"</span> /&gt;</span>
            <span class="code-tag">&lt;/wsdl:input&gt;</span>

            <span class="code-tag">&lt;wsdl:output name=<span class="code-quote">"uploadResponse"</span>&gt;</span>
                <span class="code-tag">&lt;soap:body use=<span class="code-quote">"literal"</span> /&gt;</span>
            <span class="code-tag">&lt;/wsdl:output&gt;</span>
        <span class="code-tag">&lt;/wsdl:operation&gt;</span>

        <span class="code-tag">&lt;wsdl:operation name=<span class="code-quote">"download"</span>&gt;</span>
            <span class="code-tag">&lt;soap:operation soapAction=<span class="code-quote">"" style="</span>document" /&gt;</span>

            <span class="code-tag">&lt;wsdl:input name=<span class="code-quote">"downloadRequest"</span>&gt;</span>
                <span class="code-tag">&lt;soap:body use=<span class="code-quote">"literal"</span> /&gt;</span>
            <span class="code-tag">&lt;/wsdl:input&gt;</span>

            <span class="code-tag">&lt;wsdl:output name=<span class="code-quote">"downloadResponse"</span>&gt;</span>
                <span class="code-tag">&lt;soap:body use=<span class="code-quote">"literal"</span> /&gt;</span>
            <span class="code-tag">&lt;/wsdl:output&gt;</span>
        <span class="code-tag">&lt;/wsdl:operation&gt;</span>
    <span class="code-tag">&lt;/wsdl:binding&gt;</span>

    <span class="code-tag">&lt;wsdl:service name=<span class="code-quote">"ImageBinService"</span>&gt;</span>
        <span class="code-tag">&lt;wsdl:port binding=<span class="code-quote">"tns:ImageBin_SOAPBinding"</span> name=<span class="code-quote">"ImageBin"</span>&gt;</span>
            <span class="code-tag">&lt;soap:address location=<span class="code-quote">"http://localhost:9000/ImageBin/ImageBinPort"</span> /&gt;</span>
        <span class="code-tag">&lt;/wsdl:port&gt;</span>
    <span class="code-tag">&lt;/wsdl:service&gt;</span>
<span class="code-tag">&lt;/wsdl:definitions&gt;</span>
</pre>
</div></div>

<p>Now add a build step to the <tt>pom.xml</tt> to generate the service-related classes from the wsdl file using <tt>wsdl2java</tt>. Open the <tt>pom.xml</tt> and add the build plugin to the <tt>&lt;project&gt;&lt;build&gt;&lt;plugins&gt;</tt> section:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>pom.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
            <span class="code-tag">&lt;plugin&gt;</span>
                <span class="code-tag">&lt;groupId&gt;</span>org.apache.cxf<span class="code-tag">&lt;/groupId&gt;</span>
                <span class="code-tag">&lt;artifactId&gt;</span>cxf-codegen-plugin<span class="code-tag">&lt;/artifactId&gt;</span>
                <span class="code-tag">&lt;version&gt;</span>2.2.11<span class="code-tag">&lt;/version&gt;</span>
                <span class="code-tag">&lt;executions&gt;</span>
                    <span class="code-tag">&lt;execution&gt;</span>
                        <span class="code-tag">&lt;id&gt;</span>generate-sources<span class="code-tag">&lt;/id&gt;</span>
                        <span class="code-tag">&lt;phase&gt;</span>generate-sources<span class="code-tag">&lt;/phase&gt;</span>
                        <span class="code-tag">&lt;configuration&gt;</span>
                            <span class="code-tag">&lt;sourceRoot&gt;</span>${basedir}/target/generated/src/main/java<span class="code-tag">&lt;/sourceRoot&gt;</span>
                            <span class="code-tag">&lt;wsdlOptions&gt;</span>
                                <span class="code-tag">&lt;wsdlOption&gt;</span>
                                    <span class="code-tag">&lt;wsdl&gt;</span>${basedir}/src/main/resources/wsdl/imagebin.wsdl<span class="code-tag">&lt;/wsdl&gt;</span>
                                <span class="code-tag">&lt;/wsdlOption&gt;</span>
                            <span class="code-tag">&lt;/wsdlOptions&gt;</span>
                        <span class="code-tag">&lt;/configuration&gt;</span>
                        <span class="code-tag">&lt;goals&gt;</span>
                            <span class="code-tag">&lt;goal&gt;</span>wsdl2java<span class="code-tag">&lt;/goal&gt;</span>
                        <span class="code-tag">&lt;/goals&gt;</span>
                    <span class="code-tag">&lt;/execution&gt;</span>
                <span class="code-tag">&lt;/executions&gt;</span>
            <span class="code-tag">&lt;/plugin&gt;</span>
</pre>
</div></div>

<p>To generate the java classes for the wsdl run Maven in the project root directory on the command line:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">mvn install
</pre>
</div></div>

<p>The generated sources are now inside <tt>target/generated/src/main/java</tt>. This directory has to be added to the source directories in Eclipse. Switch back to Eclipse and refresh the project tree. Right click on the project and choose <tt>Properties</tt>, then <tt>Java Build Path</tt> and select the <tt>Source</tt> tab. Press the button <tt>Add Folder</tt> and select <tt>target/generated/src/main/java</tt> in the folder selection. Exit the dialogs with <tt>OK</tt>. Now you should have a new source folder that contains the stubs for our ImageBin webservice.</p>

<p>Create a new class via <tt>File/New/Class</tt>. Put it in the package <tt>org.openehealth.tutorial.imagebin</tt> and call it <tt>ImageBinImpl</tt>. Also choose the interface <tt>org.openehealth.tutorial.imagebin.ImageBin</tt> and press <tt>Finish</tt>.</p>

<p>In the new class add a <tt>LargeBinaryStore</tt> from the IPF to store the uploaded images. Adding an image to the store is a simple matter of handing the store the input stream from the upload parameter. For downloading, create a <tt>DataSource</tt> that gets its input stream from the store.</p>

<p>The resulting implementation also configures the class to be used as a webservice using the <tt>@WebService</tt> annotation:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>/router/src/main/java/org/openehealth/tutorial/imagebin/ImageBinImpl.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial.imagebin;

<span class="code-keyword">import</span> java.io.IOException;
<span class="code-keyword">import</span> java.io.InputStream;
<span class="code-keyword">import</span> java.io.OutputStream;
<span class="code-keyword">import</span> java.net.URI;

<span class="code-keyword">import</span> javax.activation.DataHandler;
<span class="code-keyword">import</span> javax.activation.DataSource;

<span class="code-keyword">import</span> org.openehealth.ipf.commons.lbs.store.DiskStore;
<span class="code-keyword">import</span> org.openehealth.ipf.commons.lbs.store.LargeBinaryStore;
<span class="code-keyword">import</span> org.openehealth.tutorial.imagebin.ImageBin;

<span class="code-keyword">import</span> javax.jws.WebService;

@WebService(portName = <span class="code-quote">"ImageBin"</span>, serviceName = <span class="code-quote">"ImageBinService"</span>, 
        targetNamespace = <span class="code-quote">"http:<span class="code-comment">//tutorial.openehealth.org/imagebin/"</span>, 
</span>        endpointInterface = <span class="code-quote">"org.openehealth.tutorial.imagebin.ImageBin"</span>,
        wsdlLocation = <span class="code-quote">"wsdl/imagebin.wsdl"</span>)
<span class="code-keyword">public</span> class ImageBinImpl <span class="code-keyword">implements</span> ImageBin {
	<span class="code-comment">// This is the store where we save our uploaded images
</span>	<span class="code-keyword">private</span> <span class="code-keyword">final</span> LargeBinaryStore store;

	<span class="code-comment">// Create a store located at a specific path on disk
</span>	<span class="code-keyword">public</span> ImageBinImpl(<span class="code-object">String</span> storeLocation) {
		store = <span class="code-keyword">new</span> DiskStore(storeLocation);
	}

	<span class="code-keyword">public</span> DataHandler download(<span class="code-keyword">final</span> <span class="code-object">String</span> handle) {
		<span class="code-comment">// Create a data handler and source that retrieve the input stream from the store
</span>		<span class="code-keyword">return</span> <span class="code-keyword">new</span> DataHandler(<span class="code-keyword">new</span> DataSource() {
			<span class="code-keyword">public</span> <span class="code-object">String</span> getContentType() {
				<span class="code-keyword">return</span> <span class="code-quote">"application/octet-stream"</span>;
			}

			<span class="code-keyword">public</span> InputStream getInputStream() <span class="code-keyword">throws</span> IOException {
				<span class="code-keyword">return</span> store.getInputStream(URI.create(handle));
			}

			<span class="code-keyword">public</span> <span class="code-object">String</span> getName() {
				<span class="code-keyword">return</span> <span class="code-quote">"image"</span>;
			}

			<span class="code-keyword">public</span> OutputStream getOutputStream() <span class="code-keyword">throws</span> IOException {
				<span class="code-keyword">throw</span> <span class="code-keyword">new</span> UnsupportedOperationException();
			}			
		});
	}

	<span class="code-keyword">public</span> <span class="code-object">String</span> upload(DataHandler imageData) {
		<span class="code-comment">// Use the input stream in the handler to add it to the store
</span>		<span class="code-keyword">try</span> {
			InputStream inputStream = imageData.getInputStream();
			URI resourceUri = store.add(inputStream);
			inputStream.close();
			<span class="code-keyword">return</span> resourceUri.toString();
		}
		<span class="code-keyword">catch</span> (IOException e) {
			<span class="code-comment">// Not properly handled, but ok <span class="code-keyword">for</span> now
</span>			e.printStackTrace();
		}
		<span class="code-keyword">return</span> "";
	}
}
</pre>
</div></div>

<p>Please note: Exceptions are not properly handled in this code to keep it as small as possible.</p>

<p>Add a class called <tt>ImageBinServer</tt> to start and stop the CXF service. The class should be in the main java sources and in the <tt>org.openehealth.tutorial.imagebin</tt> package:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>/router/src/main/java/org/openehealth/tutorial/imagebin/ImageBinServer.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial.imagebin;

<span class="code-keyword">import</span> java.io.File;
<span class="code-keyword">import</span> javax.xml.ws.Endpoint;
<span class="code-keyword">import</span> javax.xml.ws.soap.SOAPBinding;

<span class="code-keyword">public</span> class ImageBinServer {
	<span class="code-keyword">private</span> Endpoint imageBinEndpoint;

	<span class="code-keyword">public</span> void start() {
		File directory = <span class="code-keyword">new</span> File(<span class="code-quote">"target/store"</span>);
		directory.mkdir();
		
		<span class="code-object">System</span>.out.println(<span class="code-quote">"Starting ImageBin Server"</span>);
		
		<span class="code-comment">// Publish the service
</span>		<span class="code-object">Object</span> imageBin = <span class="code-keyword">new</span> ImageBinImpl(directory.getAbsolutePath());
		<span class="code-object">String</span> address = <span class="code-quote">"http:<span class="code-comment">//localhost:9000/ImageBin/ImageBinPort"</span>;
</span>		imageBinEndpoint = Endpoint.publish(address, imageBin);
		
		<span class="code-comment">// Enable MTOM attachments
</span>		SOAPBinding binding = (SOAPBinding) imageBinEndpoint.getBinding();
		binding.setMTOMEnabled(<span class="code-keyword">true</span>);
		
		<span class="code-object">System</span>.out.println(<span class="code-quote">"ImageBin ready..."</span>);
	}
	
	<span class="code-keyword">public</span> void stop() { 		
		<span class="code-object">System</span>.out.println(<span class="code-quote">"ImageBin exiting"</span>);        
		imageBinEndpoint.stop();
	}
}
</pre>
</div></div>

<p>This should be tested by a simple test case that calls <tt>upload</tt> and <tt>download</tt> on the running webservice. Create a new class in the test directory <tt>src/test/java</tt>. Use the package <tt>org.openehealth.tutorial.imagebin</tt> and the name <tt>ImageBinServerTest</tt>. The test case could be something to this (using helper classes from the <tt>org.apache.commons.io</tt> package):</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>/router/src/test/java/org/openehealth/tutorial/imagebin/ImageBinServerTest.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial.imagebin;

<span class="code-keyword">import</span> <span class="code-keyword">static</span> org.junit.Assert.*;

<span class="code-keyword">import</span> java.io.File;
<span class="code-keyword">import</span> java.io.InputStream;
<span class="code-keyword">import</span> javax.activation.DataHandler;
<span class="code-keyword">import</span> javax.mail.util.ByteArrayDataSource;
<span class="code-keyword">import</span> org.apache.commons.io.FileUtils;
<span class="code-keyword">import</span> org.apache.commons.io.IOUtils;
<span class="code-keyword">import</span> org.junit.After;
<span class="code-keyword">import</span> org.junit.Before;
<span class="code-keyword">import</span> org.junit.Test;
<span class="code-keyword">import</span> org.openehealth.tutorial.imagebin.ImageBin;
<span class="code-keyword">import</span> org.openehealth.tutorial.imagebin.ImageBinServer;
<span class="code-keyword">import</span> org.openehealth.tutorial.imagebin.ImageBinService;

<span class="code-keyword">public</span> class ImageBinServerTest {
	<span class="code-keyword">private</span> ImageBinServer imageBinServer;

	@Before
	<span class="code-keyword">public</span> void setUp() <span class="code-keyword">throws</span> Exception {
		<span class="code-comment">// Make sure a previously created store is removed
</span>		File storeLocation = <span class="code-keyword">new</span> File(<span class="code-quote">"target/store"</span>);
		FileUtils.deleteDirectory(storeLocation);
		
		<span class="code-comment">// Start the CXF webservice
</span>		imageBinServer = <span class="code-keyword">new</span> ImageBinServer();
		imageBinServer.start();
	}
	
	@After
	<span class="code-keyword">public</span> void tearDown() <span class="code-keyword">throws</span> Exception {
		imageBinServer.stop();
	}
	
	@Test
	<span class="code-keyword">public</span> void testUpAndDownload() <span class="code-keyword">throws</span> Exception {
		<span class="code-comment">// Create a client <span class="code-keyword">interface</span> to the CXF webservice
</span>		ImageBinService service = <span class="code-keyword">new</span> ImageBinService();		
		ImageBin imageBin = service.getImageBin();

		<span class="code-comment">// Image data doesn't need to be a real image
</span>		<span class="code-object">byte</span>[] imageData = <span class="code-quote">"TestImage"</span>.getBytes();

		<span class="code-comment">// Call the service to upload the image
</span>		ByteArrayDataSource dataSource = <span class="code-keyword">new</span> ByteArrayDataSource(imageData, <span class="code-quote">"application/octet-stream"</span>);
		DataHandler myImage = <span class="code-keyword">new</span> DataHandler(dataSource);
		<span class="code-object">String</span> handle = imageBin.upload(myImage);
		
		<span class="code-comment">// Download the image again
</span>		DataHandler downloadedImage = imageBin.download(handle);
		
		<span class="code-comment">// And check <span class="code-keyword">if</span> we received the image data
</span>		InputStream inputStream = downloadedImage.getInputStream();
		assertTrue(<span class="code-quote">"Image data is not equal"</span>, 
				IOUtils.contentEquals(myImage.getInputStream(), inputStream));
		inputStream.close();
	}
}
</pre>
</div></div>

<p>Running the test should work and leave a file in the <tt>router/target/store</tt> directory. You can open the file and see the uploaded content (<tt>TestImage</tt>).</p>

<h3><a name="IPFreference-single-Addtherouting"></a>Add the routing</h3>

<p>The next step is to expose the webservice via an HTTP endpoint. To do this create a route via Camel. The route connects the HTTP endpoint with the CXF endpoint of the webservice. The first thing to do is to add a CXF endpoint. Open <tt>context.xml</tt> and add a bean for the endpoint, mapping it to the service.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    &lt;cxf:cxfEndpoint id=<span class="code-quote">"imageBinServer"</span>
        serviceClass=<span class="code-quote">"org.openehealth.tutorial.imagebin.ImageBin"</span>
        address=<span class="code-quote">"http://localhost:9000/ImageBin/ImageBinPort"</span>
        endpointName=<span class="code-quote">"s:ImageBin"</span> serviceName=<span class="code-quote">"s:ImageBinService"</span> wsdlURL=<span class="code-quote">"wsdl/imagebin.wsdl"</span>
        <span class="code-keyword">xmlns:s</span>=<span class="code-quote">"http://tutorial.openehealth.org/imagebin/"</span>&gt;
        <span class="code-tag">&lt;cxf:properties&gt;</span>
            <span class="code-tag">&lt;entry key=<span class="code-quote">"mtom-enabled"</span> value=<span class="code-quote">"true"</span> /&gt;</span>
        <span class="code-tag">&lt;/cxf:properties&gt;</span>
    <span class="code-tag">&lt;/cxf:cxfEndpoint&gt;</span>
</pre>
</div></div>

<p>This requires that a few CXF-related Camel resources are imported that define the <tt>cxf</tt> namespace. Make sure that the <tt>beans</tt> tag of the <tt>context.xml</tt> file looks like the following code:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       <span class="code-keyword">xmlns:cxf</span>=<span class="code-quote">"http://camel.apache.org/schema/cxf"</span>
       <span class="code-keyword">xmlns:util</span>=<span class="code-quote">"http://www.springframework.org/schema/util"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang 
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://www.springframework.org/schema/util                                         
http://www.springframework.org/schema/util/spring-util-2.5.xsd                     
http://camel.apache.org/schema/cxf 
http://camel.apache.org/schema/cxf/camel-cxf.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd 
"&gt;

	<span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf.xml"</span> /&gt;</span>                       
	<span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf-extension-soap.xml"</span> /&gt;</span>        
	<span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf-extension-http-jetty.xml"</span> /&gt;</span>  
...
</pre>
</div></div>

<p>Also add a list of resource handlers as a bean to <tt>context.xml</tt> that are used in the route for handling HTTP and CXF resources:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
    <span class="code-tag"><span class="code-comment">&lt;!-- This bean is a list of resource handlers. Add all handlers used within the routes to this list --&gt;</span></span>
    <span class="code-tag">&lt;util:list id=<span class="code-quote">"resourceHandlers"</span>&gt;</span>
        <span class="code-tag">&lt;bean class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.cxf.process.CxfPojoResourceHandler"</span>&gt;</span>
            <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span> /&gt;</span>
        <span class="code-tag">&lt;/bean&gt;</span>
        <span class="code-tag">&lt;bean class=<span class="code-quote">"org.openehealth.ipf.platform.camel.lbs.http.process.HttpResourceHandler"</span>&gt;</span>
            <span class="code-tag">&lt;constructor-arg ref=<span class="code-quote">"resourceFactory"</span> /&gt;</span>
        <span class="code-tag">&lt;/bean&gt;</span>
    <span class="code-tag">&lt;/util:list&gt;</span>
</pre>
</div></div>

<p>The router project already has a sample route written in Groovy. You can find it in <tt>src/main/groovy/org/openehealth/tutorial/SampleRouteBuilder.groovy</tt>. Open the file and remove the sample routes in the <tt>configure</tt> method. Now add a new route that accepts messages from a jetty endpoint and routes them to a CXF endpoint using the request methods of the HTTP requests:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>/router/src/main/groovy/org/openehealth/tutorial/SampleRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial

<span class="code-keyword">import</span> <span class="code-keyword">static</span> org.apache.camel.component.cxf.CxfConstants.*
<span class="code-keyword">import</span> <span class="code-keyword">static</span> org.apache.camel.Exchange.*

<span class="code-keyword">import</span> javax.activation.DataHandler
<span class="code-keyword">import</span> javax.activation.DataSource

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder
<span class="code-keyword">import</span> org.apache.cxf.message.MessageContentsList

<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.lbs.http.process.ResourceList


class SampleRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {
    
    void configure() {
        <span class="code-comment">// The request method in the header is used to find out <span class="code-keyword">if</span> we have a POST 
</span>        <span class="code-comment">// or GET request.
</span>        <span class="code-comment">// Depending on the request, we route the message to a <span class="code-quote">"direct"</span> endpoint.
</span>        from('jetty:http:<span class="code-comment">//localhost:8412/imagebin')
</span>            .choice()  
            .when(header(HTTP_METHOD).isEqualTo('POST')).to('direct:upload')
            .when(header(HTTP_METHOD).isEqualTo('GET')).to('direct:download')
            .otherwise().end()
        
        <span class="code-comment">// Handle uploads
</span>        from('direct:upload')
            .store().with('resourceHandlers')       <span class="code-comment">// ensure we can upload large files                
</span>            .transform {                            <span class="code-comment">// transform the message into a CXF call
</span>                it.in.headers = [(OPERATION_NAME): 'upload']  <span class="code-comment">// operation
</span>                [<span class="code-keyword">new</span> DataHandler(it.in.body[0])]              <span class="code-comment">// parameters
</span>            }
            .to('cxf:bean:imageBinServer')          <span class="code-comment">// webservice.upload() call
</span>            .transform { it.in.body[0] }            <span class="code-comment">// back to http using result param 0
</span>        
        <span class="code-comment">// Handle downloads
</span>        from('direct:download')                
            .transform {                            <span class="code-comment">// transform the message into a CXF call 
</span>                it.out.headers = [(OPERATION_NAME): 'download']  <span class="code-comment">// operation
</span>                [it.in.headers.handle]                           <span class="code-comment">// parameters
</span>            }
            .to('cxf:bean:imageBinServer')          <span class="code-comment">// webservice.download() call
</span>            .store().with('resourceHandlers')       <span class="code-comment">// ensure we can download large files
</span>            .transform { it.in.body[0].dataSource } <span class="code-comment">// back to http using data source in param 0
</span>    }    
}
</pre>
</div></div>

<p>Most of this route is handling the transformation between HTTP and CXF requests. Note how the <tt>store</tt> processor is used to enable support for large binaries without keeping the complete image in memory. In the upload part of the route the image is stored in the temporary store as soon as the HTTP POST message is identified. In the download part this is done after the webservice has been called. The two calls to the <tt>store</tt> processor use the resource handlers that are configured in <tt>context.xml</tt>.</p>

<p>To add a unit test for these routes, open <tt>SampleRouteTest.java</tt> in <tt>src/test/java/org/openehealth/tutorial</tt>. Remove the methods in the existing class. They test the sample route that was removed earlier. The Apache HttpClient is used to send a real test message to the route:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>/router/src/test/java/org/openehealth/tutorial/SampleRouteTest.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> org.openehealth.tutorial;

<span class="code-keyword">import</span> <span class="code-keyword">static</span> org.junit.Assert.*;

<span class="code-keyword">import</span> java.io.File;
<span class="code-keyword">import</span> org.apache.commons.httpclient.HttpClient;
<span class="code-keyword">import</span> org.apache.commons.httpclient.methods.GetMethod;
<span class="code-keyword">import</span> org.apache.commons.httpclient.methods.PostMethod;
<span class="code-keyword">import</span> org.apache.commons.httpclient.methods.StringRequestEntity;
<span class="code-keyword">import</span> org.apache.commons.io.FileUtils;
<span class="code-keyword">import</span> org.junit.After;
<span class="code-keyword">import</span> org.junit.Before;
<span class="code-keyword">import</span> org.junit.BeforeClass;
<span class="code-keyword">import</span> org.junit.Test;
<span class="code-keyword">import</span> org.junit.runner.RunWith;
<span class="code-keyword">import</span> org.openehealth.tutorial.imagebin.ImageBinServer;
<span class="code-keyword">import</span> org.springframework.test.context.ContextConfiguration;
<span class="code-keyword">import</span> org.springframework.test.context.TestExecutionListeners;
<span class="code-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
<span class="code-keyword">import</span> org.springframework.test.context.support.DependencyInjectionTestExecutionListener;

@RunWith(SpringJUnit4ClassRunner.class)
@TestExecutionListeners( { DependencyInjectionTestExecutionListener.class })
@ContextConfiguration(locations = { <span class="code-quote">"/context.xml"</span> })
<span class="code-keyword">public</span> class SampleRouteTest {
    <span class="code-keyword">private</span> ImageBinServer server;
    <span class="code-keyword">private</span> HttpClient client;

    <span class="code-comment">// Setup that is run before the application context is loaded
</span>    @BeforeClass
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void setUpBeforeClass() <span class="code-keyword">throws</span> Exception {
        <span class="code-comment">// There are two stores used in <span class="code-keyword">this</span> test. The one from the webservice
</span>        <span class="code-comment">// that contains the image repository and the the one from the route
</span>        <span class="code-comment">// that store the image <span class="code-keyword">while</span> they are uploaded  
</span>        
        <span class="code-comment">// Make sure any previously created stores are removed
</span>        File storeLocation = <span class="code-keyword">new</span> File(<span class="code-quote">"target/store"</span>);
        FileUtils.deleteDirectory(storeLocation);

        File routeStoreLocation = <span class="code-keyword">new</span> File(<span class="code-quote">"target/tempstore"</span>);
        FileUtils.deleteDirectory(routeStoreLocation);
        
    }

    @Before
    <span class="code-keyword">public</span> void setUp() <span class="code-keyword">throws</span> Exception {
        <span class="code-comment">// Start the CXF webservice
</span>        server = <span class="code-keyword">new</span> ImageBinServer();
        server.start();

        <span class="code-comment">// Create the HTTP client
</span>        client = <span class="code-keyword">new</span> HttpClient();
    }
    
    @After
    <span class="code-keyword">public</span> void tearDown() {
        server.stop();
    }

    @Test
    <span class="code-keyword">public</span> void testUploadAndDownload() <span class="code-keyword">throws</span> Exception {
        <span class="code-comment">// Create a post request containing a <span class="code-quote">"fake"</span> image
</span>        PostMethod post = <span class="code-keyword">new</span> PostMethod(<span class="code-quote">"http:<span class="code-comment">//localhost:8412/imagebin"</span>);
</span>        StringRequestEntity requestEntity = 
            <span class="code-keyword">new</span> StringRequestEntity(<span class="code-quote">"TestImage"</span>, <span class="code-quote">"application/octet-stream"</span>, <span class="code-keyword">null</span>);     
        post.setRequestEntity(requestEntity);
        
        <span class="code-comment">// Call the HTTP endpoint and trigger the upload part of the route
</span>        assertEquals(200, client.executeMethod(post));
        <span class="code-object">String</span> handle = post.getResponseBodyAsString();
        post.releaseConnection();
        
        <span class="code-comment">// Call the HTTP endpoint and trigger the download part of the route
</span>        GetMethod get = <span class="code-keyword">new</span> GetMethod(<span class="code-quote">"http:<span class="code-comment">//localhost:8412/imagebin"</span>);
</span>        get.setQueryString(<span class="code-quote">"handle="</span> + handle);
        assertEquals(200, client.executeMethod(get));      
        <span class="code-object">String</span> imageAsString = get.getResponseBodyAsString();
        get.releaseConnection();

        <span class="code-comment">// Check the download result
</span>        assertEquals(<span class="code-quote">"TestImage"</span>, imageAsString);
    }
}
</pre>
</div></div>

<p>Now run the test. This shows the route in action with a started webservice. As a result you should again find the uploaded file in the <tt>target/store</tt> directory.</p>
<h2><a name="IPFreference-single-Referenceapplication"></a>Reference application</h2>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Preliminary content</b><br><p>This section is work in progress.</p></td></tr></tbody></table></div>

<p>The reference application is an IPF application that demonstrates how to use a broad range of IPF and Camel features. It is an example from the order processing domain. It consumes (over-simplified) order requests over HTTP and transforms these request messages into a different format depending on the order category. The transformation results are written to the file system. The reference application can be found under <tt>tutorials/ref</tt> in the IPF source tree. The Eclipse project name is <tt>org.openehealth.ipf.tutorials.ref</tt>. For instructions how to import IPF sources into Eclipse refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Eclipseimport">Development</a> section of the reference manual. To start a single instance of the reference application you need to start a Derby database server and an IPF instance. To start the database server select <tt>Run-&gt;Run Configurations...</tt> from the Eclipse menu, choose <tt>Java Application-&gt;Derby - Start</tt> in the dialog box and press the <tt>Run</tt> button. You should see the following output on the console (German language settings).</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Apache Derby Network Server 10.4.1.3 - (648739) wurde gestartet und ist seit 2008-12-04 08:01:01.541 GMT bereit, Verbindungen am Port 1527 zu akzeptieren. 
</pre>
</div></div>

<p>To start the IPF instance select <tt>Run-&gt;Run Configurations...</tt> from the Eclipse menu, choose <tt>Java Application-&gt;TutorialServer1</tt> in the dialog box and press the <tt>Run</tt> button. You should see the following output on the console (warnings omitted).</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>INFO - using stored sequence default
INFO - Using Persistence Adapter: AMQPersistenceAdapter(data\activemq1)
INFO - ActiveMQ null JMS Message Broker (broker1) is starting
INFO - For help or more information please see: http://activemq.apache.org/
INFO - AMQStore starting using directory: data\activemq1
INFO - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1801/jmxrmi
INFO - Kaha Store using data directory data\activemq1\kr-store\state
INFO - Active data files: []
WARN - The ReferenceStore is not valid - recovering ...
INFO - Kaha Store successfully deleted data directory data\activemq1\kr-store\data
INFO - Journal Recovery Started from: DataManager:(data-)
INFO - Kaha Store using data directory data\activemq1\kr-store\data
INFO - Recovered 28 operations from redo log in 0.328 seconds.
INFO - Finished recovering the ReferenceStore
INFO - ActiveMQ JMS Message Broker (broker1, ID:lap-xp-0818-3028-1228379536237-0:0) started
...
INFO - Registered replay strategy with identifier http
INFO - Registered replay strategy with identifier file
INFO - Registered replay strategy with identifier direct
2008-12-04 09:32:20.751::INFO:  jetty-6.1.11
2008-12-04 09:32:20.876::INFO:  Started SelectChannelConnector@0.0.0.0:8081
INFO - Connector vm://broker1 Started
</pre>
</div></div>


<p>Now the reference application is ready to accept order request messages via <tt><a href="http://localhost:8081/tutorial" rel="nofollow">http://localhost:8081/tutorial</a></tt>. Here are two sample order request messages and their transformation results.</p>

<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh">Request message</th>
<th class="confluenceTh">Transformed message</th>
</tr>
<tr>
<td class="confluenceTd"><pre>&lt;order xmlns="http://www.openehealth.org/tutorial"&gt;
    &lt;customer&gt;123&lt;/customer&gt;
    &lt;category&gt;animals&lt;/category&gt;
    &lt;item&gt;ozelot&lt;/item&gt;
    &lt;count&gt;3&lt;/count&gt;
&lt;/order&gt;</pre></td>
<td class="confluenceTd"><pre>Order
-----
Customer: 123
Item:     ozelot
Count:    3</pre></td>
</tr>
<tr>
<td class="confluenceTd"><pre>&lt;order xmlns="http://www.openehealth.org/tutorial"&gt;
    &lt;customer&gt;123&lt;/customer&gt;
    &lt;category&gt;books&lt;/category&gt;
    &lt;item&gt;eating ozelots&lt;/item&gt;
    &lt;count&gt;3&lt;/count&gt;
&lt;/order&gt;</pre></td>
<td class="confluenceTd"><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ns0:order xmlns:ns0="http://www.openehealth.org/tutorial" category="books"&gt;
    &lt;ns1:customer xmlns:ns1="http://www.openehealth.org/tutorial"&gt;123&lt;/ns1:customer&gt;
    
    &lt;ns2:item xmlns:ns2="http://www.openehealth.org/tutorial"&gt;eating ozelots&lt;/ns2:item&gt;
    &lt;ns3:count xmlns:ns3="http://www.openehealth.org/tutorial"&gt;3&lt;/ns3:count&gt;
&lt;/ns0:order&gt;</pre></td>
</tr>
</tbody></table>

<p>The transformed messages are written to the <tt>order/out</tt> folder if processing was successful otherwise to the <tt>order/error-app</tt> or <tt>order/error-sys</tt> folder. For sending these messages you can use the <a href="http://http4e.roussev.org/install/" rel="nofollow">Eclipse HTTP client</a>. Here's a screenshot made after sending an order request.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/reference-1.JPG" align="absmiddle" border="0"></p>

<p>The reference application also implements the <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management" title="Flow management">flow manager</a> which can be accessed via the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager#IPFManager-Flowmanagementclient">IPF Manager </a>(Eclipse RCP application) or a generic <a href="http://repo.openehealth.org/confluence/display/ipf2/Flow+management#Flowmanagement-JMXinterface">JMX client</a>. The <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager</a> can be used standalone, or as an extension of your development Eclipse instance. To connect to the flow management service with the standalone flow management client:</p>

<ul>
	<li><a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">Start the flow management client</a></li>
	<li><a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager#IPFManager-Connectionmanagement">Create a connection</a> on port 1801.</li>
	<li>Right-click on the connection and select <tt>Open Flow Manager</tt> from the context menu.</li>
</ul>


<p>The flow management window opens. To get a list of all tracked message flows so far press the <tt>Search</tt> button. Depending on the number of order requests you've sent you'll see more or less flows in the result list of the <tt>Search</tt> view. For more information on how to use the flow management client refer to the <a href="http://repo.openehealth.org/confluence/display/ipftools/IPF+Manager" title="IPF Manager">IPF Manager  documentation</a>.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/reference-2.JPG" align="absmiddle" border="0"></p>

<h2><a name="IPFreference-single-XDSdemorepository"></a>XDS demo repository </h2>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Preliminary content</b><br><p>This section is work in progress.</p></td></tr></tbody></table></div>

<p>This tutorial is a guide to the XDS demo repository, a simplified implementation of an XDS registry and repository to store documents, folders, submission sets and associations. The demo is useful for everyone who wants to use the IPF XDS components. It shows how to:</p>
<ul>
	<li>Use the XDS.b components to offer a registry and a repository service</li>
	<li>Transform and process registration, retrieval and query requests</li>
	<li>Configure and use ATNA logging</li>
	<li>Enable secure transport using HTTPS</li>
</ul>


<p>The demo repository is non-persistent. A restart will therefore always start out with a blank respository/registry.</p>

<h3><a name="IPFreference-single-Overview"></a>Overview</h3>

<p>The XDS demo repository is implemented in Groovy. Most of the code deals with the query functionality. This is used for the ITI-18 transaction (registry stored query) and for the other transactions to perform checks of the input data. Within the project you can find the following source files, tests and configuration files.</p>

<p>Source files:</p>
<table class="confluenceTable"><tbody>
<tr>
<td class="confluenceTd">DataStore</td>
<td class="confluenceTd">The actual storage of documents, document entries, folders, submission sets and associations. The store is non-persistent at the moment to keep things simple. Allows adding, retrieving and querying</td>
</tr>
<tr>
<td class="confluenceTd">Comparators</td>
<td class="confluenceTd">Basic comparison methods used by the query logic</td>
</tr>
<tr>
<td class="confluenceTd">ContentUtils</td>
<td class="confluenceTd">Helpers to calculate content related data, e.g. hash codes and size</td>
</tr>
<tr>
<td class="confluenceTd">Iti18RouteBuilder</td>
<td class="confluenceTd">Route for the stored query transaction</td>
</tr>
<tr>
<td class="confluenceTd">Iti4142RouteBuilder</td>
<td class="confluenceTd">Routes for the register document set transactions</td>
</tr>
<tr>
<td class="confluenceTd">Iti43RouteBuilder</td>
<td class="confluenceTd">Route for the retrieve document set transaction</td>
</tr>
<tr>
<td class="confluenceTd">QueryMatcher</td>
<td class="confluenceTd">Matching code for various stored query types used by ITI-18</td>
</tr>
<tr>
<td class="confluenceTd">RegRepModelExtension</td>
<td class="confluenceTd">The DSL extension for the routes</td>
</tr>
<tr>
<td class="confluenceTd">SearchDefinition</td>
<td class="confluenceTd">The DSL element for creating a search query in a route</td>
</tr>
<tr>
<td class="confluenceTd">SearchProcessor</td>
<td class="confluenceTd">The processor that performs search queries using the data store</td>
</tr>
<tr>
<td class="confluenceTd">SearchResult</td>
<td class="confluenceTd">An enum that represents the type of results from a search query</td>
</tr>
<tr>
<td class="confluenceTd">Server</td>
<td class="confluenceTd">The main entry point of the demo repository that starts the server</td>
</tr>
</tbody></table>

<p>Test files:</p>
<table class="confluenceTable"><tbody>
<tr>
<td class="confluenceTd">TestRepositoryAndRegistry</td>
<td class="confluenceTd">Basic tests that send individual requests and check their results</td>
</tr>
<tr>
<td class="confluenceTd">TestThreading</td>
<td class="confluenceTd">A multi-threading test to show the thread-safety of the repository and of the XDS components</td>
</tr>
<tr>
<td class="confluenceTd">Task</td>
<td class="confluenceTd">Base class for tasks used in the multi-threading test</td>
</tr>
</tbody></table>

<p>Configuration files:</p>
<table class="confluenceTable"><tbody>
<tr>
<td class="confluenceTd">context.xml</td>
<td class="confluenceTd">Spring application context containing beans for Camel and IPF configuration as well as the data store</td>
</tr>
<tr>
<td class="confluenceTd">log4j.xml, logging.properties</td>
<td class="confluenceTd">logging configuration</td>
</tr>
</tbody></table>

<p>The repository can be started within Eclipse or from command line using the startup.bat after building an assembly. For this guide it is assumed that you have installed the Groovy Eclipse plugin as described in our <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development" title="IPF Development">development setup</a>. To start the server within Eclipse, right click on <tt>Server.groovy</tt> and choose <tt>Run as/Groovy</tt>. The repository can be configured to use HTTPS by specifying the command line argument <tt>secure</tt>. </p>

<h3><a name="IPFreference-single-RunningXDSToolKittestsagainstthedemorepository"></a>Running XDSToolKit tests against the demo repository</h3>

<p>You can either implement your own XDS source and consumer or use the <a href="http://ihewiki.wustl.edu/wiki/index.php/XDS_Main_Page" rel="nofollow">XDSToolKit</a> to run tests against the repository. To use the toolkit you should first ensure that it runs fine against the public NIST repository that it is pre-configured with. Then you can change <tt>xdstest/actors.xml</tt> in the XDSToolKit installation to make it run against the demo repository. Add a new site to the existing <tt>&lt;sites&gt;</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">  <span class="code-tag">&lt;site name=<span class="code-quote">"ipf"</span>&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"pr.b"</span>&gt;</span>http://localhost:9091/xds-iti41<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"r.b"</span>&gt;</span>http://localhost:9091/xds-iti42<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"sq.b"</span>&gt;</span>http://localhost:9091/xds-iti18<span class="code-tag">&lt;/transaction&gt;</span>

    <span class="code-tag">&lt;transaction name=<span class="code-quote">"pr.b"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti41<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"r.b"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti42<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"sq.b"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti18<span class="code-tag">&lt;/transaction&gt;</span>

    <span class="code-tag">&lt;transaction name=<span class="code-quote">"pr.a"</span>&gt;</span>http://localhost:9091/xds-iti15<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"r.a"</span>&gt;</span>http://localhost:9091/xds-iti14<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"sq.a"</span>&gt;</span>http://localhost:9091/xds-iti18<span class="code-tag">&lt;/transaction&gt;</span>

    <span class="code-tag">&lt;transaction name=<span class="code-quote">"pr.a"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti15<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"r.a"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti14<span class="code-tag">&lt;/transaction&gt;</span>
    <span class="code-tag">&lt;transaction name=<span class="code-quote">"sq.a"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti18<span class="code-tag">&lt;/transaction&gt;</span>

    <span class="code-tag">&lt;repository uid=<span class="code-quote">"1.19.6.24.109.42.1"</span>&gt;</span>http://localhost:9091/xds-iti43<span class="code-tag">&lt;/repository&gt;</span>
    <span class="code-tag">&lt;repository uid=<span class="code-quote">"1.19.6.24.109.42.1"</span> secure=<span class="code-quote">"1"</span>&gt;</span>https://localhost:9091/xds-iti43<span class="code-tag">&lt;/repository&gt;</span>
  <span class="code-tag">&lt;/site&gt;</span>
</pre>
</div></div>

<p>The demo supports the XDS.b tests that are <a href="http://ihewiki.wustl.edu/wiki/index.php/XDS_Test_Kit_2009-2010_Test_Requirements" rel="nofollow">required for registry/repository implementations at the connectathon</a>. Note that some of the XDS tests are checking the forwarding of registration requests to the public repository. At the moment the demo repository does not forward these requests. Instead the entries will be registered within its own registry. The following is the list of tests that were verified:</p>

<p>Stored Query Transaction:<br>
12346, 11897, 11898, 11899, 11901, 11902, 11903, 11904, 11905, 11906, 11907, 11908, 11909, 12374, 12368, 11741</p>

<p>Provide and Register Document Set:<br>
11966, 11979, 11983, 11981, 11986, 12369, 12086</p>

<p>Register Document Set:<br>
11990, 11991, 11992, 12022, 11993, 11994, 11995, 11996, 11997, 11999, 12000, 12001, 12326, 12323, 12002, 12327, 12084, 12004, 12370, 12005</p>

<p>Retrieve Document Set Transaction:<br>
12029, 12021, 12360, 12362, 12028</p>

<h3><a name="IPFreference-single-IPFXDSrelatedcodesnippets"></a>IPF XDS related code snippets</h3>

<p>The main purpose of the demo repository is to demonstrate the features that the IPF XDS components offer. This section takes a closer look at such code pieces.</p>

<h4><a name="IPFreference-single-Basicconfiguration"></a>Basic configuration</h4>

<p>Configuration of an XDS application is pretty similar to the standard configuration of an IPF application. The main difference is the configuration of CXF. Because the application runs within a Tomcat environment, CXF should not start its own Jetty instance. Here is the commented <tt>context.xml</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-xml">&lt;!-- We can add more CXF related namespaces here if we need to add something to
     the default CXF configuration. --&gt;
&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span> 
    <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="code-keyword">xmlns:lang</span>=<span class="code-quote">"http://www.springframework.org/schema/lang"</span> 
    <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
    <span class="code-keyword">xmlns:util</span>=<span class="code-quote">"http://www.springframework.org/schema/util"</span>
    xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/lang
http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util-2.5.xsd
http://camel.apache.org/schema/spring 
http://camel.apache.org/schema/spring/camel-spring.xsd 
"&gt;

    &lt;!-- The following imports are required to configure CXF. cxf-servlet
         is imported to configure CXF to run with servlet support. This 
         allows us to use Tomcat with the CXFServlet instead of using CXF 
         with a standalone Jetty server. --&gt;
    <span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf.xml"</span> /&gt;</span>
    <span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf-extension-soap.xml"</span> /&gt;</span>
    <span class="code-tag">&lt;import resource=<span class="code-quote">"classpath:META-INF/cxf/cxf-servlet.xml"</span> /&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- Camel context and producer --&gt;</span></span>
    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
        <span class="code-tag">&lt;camel:jmxAgent id=<span class="code-quote">"agent"</span> disabled=<span class="code-quote">"true"</span> /&gt;</span>
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"iti4142RouteBuilder"</span>/&gt;</span>        
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"iti43RouteBuilder"</span>/&gt;</span>        
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"iti18RouteBuilder"</span>/&gt;</span>        
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>
    
    <span class="code-tag"><span class="code-comment">&lt;!-- Our route builders for the ITI transactions --&gt;</span></span>
    &lt;bean id=<span class="code-quote">"iti4142RouteBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.tutorials.xds.Iti4142RouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"iti43RouteBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.tutorials.xds.Iti43RouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"iti18RouteBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.tutorials.xds.Iti18RouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;!-- The DSL extensions. We use the core extension of the IPF and the ones 
         that come with the XDS components. In addition, we also define our own. --&gt;
    &lt;bean id=<span class="code-quote">"coreModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"xdsModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.ihe.xds.core.extend.XDSModelExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>
    
    <span class="code-tag">&lt;bean id=<span class="code-quote">"regRepModelExtension"</span> class=<span class="code-quote">"org.openehealth.ipf.tutorials.xds.RegRepModelExtension"</span>&gt;</span>
        <span class="code-tag">&lt;property name=<span class="code-quote">"dataStore"</span> ref=<span class="code-quote">"dataStore"</span>/&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"routeModelExtender"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"xdsModelExtension"</span> /&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"regRepModelExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

    <span class="code-tag"><span class="code-comment">&lt;!-- The store that contains all the in-memory documents and their meta data --&gt;</span></span>    
    <span class="code-tag">&lt;bean id=<span class="code-quote">"dataStore"</span> class=<span class="code-quote">"org.openehealth.ipf.tutorials.xds.DataStore"</span> /&gt;</span>
<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<h4><a name="IPFreference-single-Exposingtheendpoints"></a>Exposing the endpoints</h4>

<p>To allow clients to communicate with the registry/repository, a few routes are defined that automatically expose the SOAP-based endpoints. The SOAP related details that are required by the IHE profile are not defined directly. A <tt>from(...)</tt> is all it takes. You can find those in the route builders. Take a look at the following snippets:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti18RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-keyword">public</span> void configure() <span class="code-keyword">throws</span> Exception {
        ...
        <span class="code-comment">// Entry point <span class="code-keyword">for</span> Stored Query
</span>        from('xds-iti18:xds-iti18')
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti4142RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-keyword">public</span> void configure() <span class="code-keyword">throws</span> Exception {
        ...
        <span class="code-comment">// Entry point <span class="code-keyword">for</span> Provide and Register Document Set
</span>        from('xds-iti41:xds-iti41')
        ...
        <span class="code-comment">// Entry point <span class="code-keyword">for</span> Register Document Set
</span>        from('xds-iti42:xds-iti42')
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti43RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-keyword">public</span> void configure() <span class="code-keyword">throws</span> Exception {
        ...
        <span class="code-comment">// Entry point <span class="code-keyword">for</span> Retrieve Document Set
</span>        from('xds-iti43:xds-iti43')
</pre>
</div></div>

<h4><a name="IPFreference-single-Validatingincomingmessages"></a>Validating incoming messages</h4>
<p>Once the endpoints have been exposed, clients can send in messages. These messages might or might not conform to the IHE specification. It is usually a good idea to validate incoming messages before processing them. The XDS components offer a simple validation. This is not meant to be complete, e.g. it cannot validate that a patient ID is actually known to the registry, but it performs a variety of checks that will simplify our route implementations. All routes of the demo repository perform this basic validation step right after logging the incoming request, e.g. in ITI-43:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti43RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        from('xds-iti43:xds-iti43')
            .log(log) { 'received iti43: ' + it.in.getBody(RetrieveDocumentSet.class) }
            .validate().iti43Request()
</pre>
</div></div>

<p>A validation failure will throw an <tt>XDSMetaDataException</tt>. It is not necessary to put any <tt>onException</tt> handling in the route for this exception. The XDS components convert validation failures into an equivalent XDS response with the correct error code. Therefore, this exception can be thrown anywhere else in the routing. E.g. the demo repository contains code to check for a specific patient ID used by the XDSToolKit. Because the demo does not track patients yet, it simply throws an exception if this specific patient ID is found in a request:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti4142RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        from('direct:checkPatientIds')
            .choice().when { it.in.body.req.submissionSet.patientId.id == '1111111' }
                .fail(UNKNOWN_PATIENT_ID)
            ...
</pre>
</div></div>

<p>A failure is reported by throwing an <tt>XDSMetaDataException</tt> via the <tt>fail</tt> DSL extension that is implemented in <tt>RegRepModelExtension.groovy</tt>. The code snippet below shows that this is simply a shortcut to throw the exception.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>RegRepModelExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        ProcessorType.metaClass.fail = { message -&gt;
            delegate.process { 
                <span class="code-keyword">throw</span> <span class="code-keyword">new</span> XDSMetaDataException(message)
            }
        }
</pre>
</div></div>

<p>If any other exception is thrown in the route, the XDS components will report a general error in the failure response (either <tt>XDSRepositoryError</tt> or <tt>XDSRegistryError</tt>). Of course you can use standard <a href="http://camel.apache.org/exception-clause.html" rel="nofollow">exception handling from Camel</a> to handle such cases.</p>

<h4><a name="IPFreference-single-Usingthemetadataclasses"></a>Using the meta data classes</h4>

<p>Once validated, the route starts processing the incoming message. The format of the data structure that is received in the message body is very important. By default these are instances of the raw ebXML classes. While these might be interesting for some use cases, it is often better to use classes that are closer to the XDS meta classes defined by the IHE specification. These meta classes serve two purposes: They ensure conformance with the XDS specification and they are much easier to use than the more generic ebXML classes. All route builders of the demo repository convert the ebXML bodies to the meta classes after validation. There are different ways to do this. One way is to simply use <tt>convertBodyTo</tt> which results in the body to be converted from the ebXML class to the meta data class. This is done in the ITI-43 route:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti43RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        <span class="code-comment">// Entry point <span class="code-keyword">for</span> Retrieve Document Set
</span>        from('xds-iti43:xds-iti43')
            .log(log) { 'received iti43: ' + it.in.getBody(RetrieveDocumentSet.class) }
            <span class="code-comment">// Validate and convert the request
</span>            .validate().iti43Request()
            .convertBodyTo(RetrieveDocumentSet.class)
</pre>
</div></div>

<p>Another way is to retrieve the meta class instance via <tt>getBody</tt>. E.g. in the ITI-41 route builder, the input body is transformed into a map that contains the actual request object. This allows access to the request at any stage in the routing. To create the map, a <tt>transform</tt> processing is used:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti4142RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        from('xds-iti41:xds-iti41')
            .log(log) { 'received iti41: ' + it.in.getBody(ProvideAndRegisterDocumentSet.class) }
            <span class="code-comment">// Validate and convert the request
</span>            .validate().iti41Request()
            .transform { 
                [ 'req': it.in.getBody(ProvideAndRegisterDocumentSet.class), 'uuidMap': [:] ] 
            }
</pre>
</div></div>

<p>In contrast to <tt>convertBodyTo</tt>, <tt>getBody</tt> does not replace the body of the message automatically. Check out the <tt>log</tt> step at the beginning of the route. It uses <tt>getBody</tt> to retrieve the meta class. The good thing about these classes is that they have meaningful <tt>equals</tt>, <tt>hashCode</tt> and <tt>toString</tt> implementations. The logging step converts the ebXML class on-the-fly and uses its <tt>toString</tt> method to get a nice textual representation. If <tt>convertBodyTo</tt> is used, the validation step will fail, because it expects an ebXML class in the message body.</p>

<p>Lets look at some typical use cases that require access to the meta classes. </p>

<h5><a name="IPFreference-single-Evaluatingthequerytype"></a>Evaluating the query type</h5>

<p>The next code snippet shows the dispatching of an ITI-18 message based on the stored query type. This uses <a href="http://camel.apache.org/content-based-router.html" rel="nofollow">content based routing</a> via <tt>choice</tt> to call sub routes that perform the corresponding query logic. The <tt>queryType</tt> method is a simple shortcut to get the query type property from the request message. If a non-supported query type is found an exception is thrown using the <tt>fail</tt> processor. All query types that are defined by the IHE specification are listed in the enum <tt>org.openehealth.ipf.platform.camel.ihe.xds.commons.requests.query.QueryType</tt>.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti18RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-keyword">public</span> void configure() <span class="code-keyword">throws</span> Exception {
        ...

        from('xds-iti18:xds-iti18')
            ...
            <span class="code-comment">// Dispatch to the correct query implementation
</span>            .choice()
                .when { queryType(it) == FIND_DOCUMENTS }.to('direct:findDocs')
                .when { queryType(it) == FIND_SUBMISSION_SETS }.to('direct:findSets')
                .when { queryType(it) == FIND_FOLDERS }.to('direct:findFolders')
                .when { queryType(it) == GET_SUBMISSION_SET_AND_CONTENTS }.to('direct:getSetAndContents')
                .when { queryType(it) == GET_DOCUMENTS }.to('direct:getDocs')
                .when { queryType(it) == GET_FOLDER_AND_CONTENTS }.to('direct:getFolderAndContents')
                .when { queryType(it) == GET_FOLDERS }.to('direct:getFolders')
                .when { queryType(it) == GET_SUBMISSION_SETS }.to('direct:getSets')
                .when { queryType(it) == GET_ASSOCIATIONS }.to('direct:getAssocs')                
                .when { queryType(it) == GET_DOCUMENTS_AND_ASSOCIATIONS }.to('direct:getDocsAndAssocs')
                .when { queryType(it) == GET_FOLDERS_FOR_DOCUMENT }.to('direct:getFoldersForDoc')
                .when { queryType(it) == GET_RELATED_DOCUMENTS }.to('direct:getRelatedDocs')                
                .otherwise().fail(ErrorCode.UNKNOWN_STORED_QUERY)
            .end()

         ...
    }

    def queryType(exchange) { exchange.in.body.req.query.type }
</pre>
</div></div>

<h5><a name="IPFreference-single-Splittingforindividualentryprocessing"></a>Splitting for individual entry processing</h5>

<p>Many XDS transactions work with sets of entries, e.g. upload and download are using multiple documents instead of just one. Using the <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Splitter">splitter</a> you can break down the request message into its individual entries and process them individually. In the demo repository this is done in many cases. The next snippet of the ITI-43 route shows how to retrieve a document set by retrieving each document from the store one at a time. Using <tt>split</tt> the actual splitting of the message is done by taking the list of documents contained in the meta class. The splitter aggregates a result list using the retrieved documents. This list is going to be in the message body after the splitting functionality has finished processing (indicated by <tt>end()</tt>). The entries of the list are the result of the processing of <tt>retrieve</tt>, which is a custom DSL element that calls <tt>DataStore.get()</tt> to get the contents of the document. Finally, the message is transformed, putting the aggregated list into the meta class for the response:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti43RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">            <span class="code-comment">// Retrieve each requested document and aggregate them in a list
</span>            .split { it.in.body.documents }
            .aggregate { target, next -&gt; target.out.body.addAll(next.out.body) }
            .retrieve()            
            .end()
            <span class="code-comment">// Create success response
</span>            .transform { <span class="code-keyword">new</span> RetrievedDocumentSet(Status.SUCCESS, it.in.body) }
</pre>
</div></div>

<h4><a name="IPFreference-single-Securetransport"></a>Secure transport</h4>

<p>Using HTTPS instead of HTTP requires very little work. In fact, for a registry/repository it does not require anything related to IPF. Simply configure Tomcat to use secure transport for the webservices. With the embedded Tomcat class of the XDS test package, this is only a few lines of code:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Server.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        servletServer.secure = args.length == 1 &amp;&amp; args[0].equals('secure')
        servletServer.keystoreFile = 'keystore'
        servletServer.keystorePass = 'changeit'
        servletServer.truststoreFile = 'keystore'
        servletServer.truststorePass = 'changeit'
</pre>
</div></div>

<p>The keystore provided with the test application is the one that is used in the XDSToolKit. Therefore, you can use the demo repository with secure transport enabled tests from the XDSToolKit. Note that those keystores are changed from time to time. You can replace the keystore of the demo repository by simply overwriting the <tt>keystore</tt> file in the project root directory.</p>

<p>The configuration of a complete Tomcat installation is well documented <a href="http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html" rel="nofollow">here</a>. Of course your mileage may vary if you are using a different container. In any case, you will not require additional configuration steps within a registry/repository implementation. Note that clients (source and consumer) will need to configure the endpoint to use HTTPS. This is not part of this guide. You can find more details in the <a href="http://repo.openehealth.org/confluence/display/ipf2/IHE+Support+aggregator+page#IHESupportaggregatorpage-MakingcallstoanXDS.bservice">standard documentation</a>.</p>

<h4><a name="IPFreference-single-Auditing"></a>Auditing</h4>

<p>By default auditing is turned on by all endpoints. The configuration of the syslog server that receives auditing messages can be found in <tt>Server.groovy</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Server.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">    <span class="code-keyword">private</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> <span class="code-object">int</span> SYSLOG_PORT = 514
    ...    
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(<span class="code-object">String</span>[] args) {
        ...
        AuditorModuleContext.context.config.auditRepositoryHost = 'localhost'
        AuditorModuleContext.context.config.auditRepositoryPort = SYSLOG_PORT
        ...
    }
</pre>
</div></div>

<p>Auditing messages will always be send. Because they are send unreliably via the UDP protocol (this is the default), the XDS components "do not care" if there is actually a syslog server running at the specified host and port. If you want to see the audit messages that the demo repository logs, you can install a syslog server at localhost using the standard syslog port 514 or you can change the settings in <tt>Server.groovy</tt> to match your setup.</p>

<p>If you want to disable auditing you can do so by changing the endpoint configurations, e.g. for ITI-18:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Iti18RouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">        from('xds-iti18:xds-iti18?audit=<span class="code-keyword">false</span>')
</pre>
</div></div>
<h2><a name="IPFreference-single-IPFextensionmechanismtutorial"></a>IPF extension mechanism tutorial</h2>

<div class="panelMacro"><table class="noteMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/warning.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Preliminary content</b><br><p>This section is work in progress.</p></td></tr></tbody></table></div>

<p>This tutorial is targeted at developers who want to learn more about the new IPF extension mechanism. Before going through this tutorial we recommend you first to read the <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+extension+mechanism" title="IPF extension mechanism">IPF extension mechanism</a> wiki section and then go through both <a href="http://repo.openehealth.org/confluence/display/ipf2/First+details+tutorial" title="First details tutorial">First details tutorial</a> and <a href="http://repo.openehealth.org/confluence/display/ipf2/HL7+processing+tutorial" title="HL7 processing tutorial">HL7 processing tutorial</a>, where you can find most of the technical explanations needed to understand the content covered in this section.</p>

<h3><a name="IPFreference-single-Sourcecode"></a>Source code</h3>

<p>The latest sources of the this tutorial are located at <a href="http://github.com/krasserm/ipf/tree/master/tutorials/config" rel="nofollow">http://github.com/krasserm/ipf/tree/master/tutorials/config</a>. To check out the sources, clone the <a href="http://github.com/krasserm/ipf" rel="nofollow">ipf git repository</a> (see also <a href="http://repo.openehealth.org/confluence/display/ipf2/IPF+Development#IPFDevelopment-Sources">Appendix A</a>)</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>git clone git://github.com/krasserm/ipf.git
</pre>
</div></div>

<p>Then change into the <tt>tutorials/config</tt> directory.</p>

<h3><a name="IPFreference-single-Projectstructurebaseapplication"></a>Project structure - base application</h3>

<p>The concept of this tutorial is to present you how can be IPF extension mechanism applied to extend the functionality of one IPF based application (a base application) with some custom extensions. As a part of base application you can find the following resources inside the tutorial project:</p>

<ul>
	<li><tt>org.openehealth.ipf.tutorials.config.base.Base.java</tt> - the executable Main class of the base application</li>
	<li><tt>org.openehealth.ipf.tutorials.config.base.route.SampleRouteBuilder.groovy</tt> - a route definition of the base application</li>
	<li><tt>org.openehealth.ipf.tutorials.config.base.extend.SampleModelExtension.groovy</tt> - a DSL extension of the base application</li>
	<li>config/base-context.xml - spring beans definition of the base module</li>
	<li>config/extender-context.xml - spring beans definition of the extension mechanism (configurers and post processor)</li>
</ul>


<h4><a name="IPFreference-single-Routedefinition"></a>Route definition</h4>

<p>The <tt>SampleRouteBuilder.groovy</tt> route builder defines 5 routes. Note that in order to be ready for customizations the <tt>SampleRouteBuilder</tt> extends the <tt>org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilder</tt>:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>SampleRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> class SampleRouteBuilder <span class="code-keyword">extends</span> CustomRouteBuilder {

    void configure() {
        from('jetty:http:<span class="code-comment">//0.0.0.0:8800/reverse')
</span>            .convertBodyTo(<span class="code-object">String</span>.class)
            .multicast().to('direct:file-save','direct:reverse-response')

        from('direct:reverse-response')
            .transmogrify{'reversed response: ' + it.reverse()}
	
        from('jetty:http:<span class="code-comment">//0.0.0.0:8800/map')
</span>            .convertBodyTo(<span class="code-object">String</span>.class)
            .unmarshal().ghl7()
            .validate().ghl7()
            .to('direct:map')

        from('direct:map')
            .marshal().ghl7()
            .to('direct:file-save')
            .transmogrify{'map response ok!'}
	
        from('direct:file-save')
            .setFileHeaderFrom('destination')
            .to('file:target/output')
    }
}
</pre>
</div></div>

<p>Actually there are two separate routing sections. The input of the first one is defined over the first http endpoint (from('jetty:<a href="http://0.0.0.0:8800/reverse" rel="nofollow">http://0.0.0.0:8800/reverse</a>')), the EIP diagram is shown below:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/eip-reverse.png" align="absmiddle" border="0"></p>

<p>It is a simple flow where the input is being converted to a string and then sent over the multicast to both direct endpoints (<em>reverse-response</em> and <em>file-save</em>). The <em>file-save</em> direct endpoint writes the content in a file whereas the <em>reverse-response</em> routes the exchange further to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Transmogrifier"><em>transmogrifier</em></a> which converts the input in reversed order and sends it back to the client.</p>

<p>The second routing section accepts the input messages over the other http endpoint (from('jetty:<a href="http://0.0.0.0:8800/map" rel="nofollow">http://0.0.0.0:8800/map</a>')) as shown on the EIP diagram below. This route basically deals with the <a href="http://repo.openehealth.org/confluence/display/ipf2/Camel+DSL+Extensions+for+HL7" title="Camel DSL Extensions for HL7">HL7v2 extensions</a> which are also available in IPF. The input is being converted to string and then unmarshaled to the <a href="http://repo.openehealth.org/confluence/display/ipf2/Camel+DSL+Extensions+for+HL7#CamelDSLExtensionsforHL7-HL7v2DSLMessageAdapter%28un%29marshalling">message adapter</a>. Afterwards the HL7v2 message will be validated and sent over the <em>map</em> direct endpoint to a marshaler which marshals a HL7 message adapter to an output stream. The next is the file endpoint which saves content to a file. Finally the last transmogrifier (<em>responseTransmogrifier</em>) creates the response and sends it back to the client.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/eip-map.png" align="absmiddle" border="0"></p>

<h4><a name="IPFreference-single-Springbeansdefinition"></a>Spring beans definition</h4>

<p>The spring beans definition of the base application is separated in two context xml files.</p>

<ul>
	<li>base-context.xml - bean definitions required for the base route</li>
	<li>extender-context.xml - defines all configurers and post processor as a part of the exension mechanism</li>
</ul>


<p>First let's take a look at the base-context.xml. Note that you're not required to add the "baseRoute" bean to the "camelContext". Since it extends the <tt>CustomRouteBuilder</tt> the IPF extension mechanism will do that for you. Also the "baseExtension" bean will be activated by the IPF extension mechanism because it implements the <tt>org.openehealth.ipf.commons.core.extend.config.Extension</tt> marker interface therefore it doesn't require explicit adding to the "routeModelExtender".</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>base-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span> /&gt;</span>

  &lt;bean id=<span class="code-quote">"baseRoute"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.tutorials.config.base.route.SampleRouteBuilder"</span> /&gt;
    
  &lt;bean id=<span class="code-quote">"baseExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.tutorials.config.base.extend.SampleModelExtension"</span> /&gt;
  
  &lt;bean id=<span class="code-quote">"bidiMappingService"</span>
      class=<span class="code-quote">"org.openehealth.ipf.commons.map.BidiMappingService"</span> /&gt;

  &lt;bean id=<span class="code-quote">"coreModelExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.CoreModelExtension"</span> /&gt;

  &lt;bean id=<span class="code-quote">"hapiModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.modules.hl7.extend.HapiModelExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"bidiMappingService"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
        
  &lt;bean id=<span class="code-quote">"hl7ModelExtension"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.hl7.extend.Hl7ModelExtension"</span> /&gt;
        
  &lt;bean id=<span class="code-quote">"mappingExtension"</span>
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.extend.MappingExtension"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"bidiMappingService"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
      <span class="code-tag">&lt;list&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"coreModelExtension"</span> /&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"hapiModelExtension"</span> /&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"hl7ModelExtension"</span> /&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"mappingExtension"</span> /&gt;</span>
      <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<p>The extender-context.xml defines all configurers potentially needed to extend the base application. Therefore activated are three configurers, one which activates the custom mappings, one for the custom DSL extensions and last one for the custom route builders. In addition defined is the "postProcessor" which actually processes all defined configurers. Each defined configurer must be explicitly added to the "postProcessor" bean:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extender-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;bean id=<span class="code-quote">"customMappingsConfigurer"</span> 
      class=<span class="code-quote">"org.openehealth.ipf.commons.map.config.CustomMappingsConfigurer"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"mappingService"</span> ref=<span class="code-quote">"bidiMappingService"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"customRouteBuilderConfigurer"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.config.CustomRouteBuilderConfigurer"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"camelContext"</span> ref=<span class="code-quote">"camelContext"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>

  &lt;bean id=<span class="code-quote">"customExtensionConfigurer"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.core.extend.config.ExtensionConfigurer"</span> /&gt;
    
  &lt;bean id=<span class="code-quote">"postProcessor"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.core.config.SpringConfigurationPostProcessor"</span>&gt;
    <span class="code-tag">&lt;property name=<span class="code-quote">"springConfigurers"</span> &gt;</span>
      <span class="code-tag">&lt;list&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"customMappingsConfigurer"</span> /&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"customRouteBuilderConfigurer"</span> /&gt;</span>
        <span class="code-tag">&lt;ref bean=<span class="code-quote">"customExtensionConfigurer"</span> /&gt;</span>
      <span class="code-tag">&lt;/list&gt;</span>
    <span class="code-tag">&lt;/property&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<h4><a name="IPFreference-single-Assemblyandinstallation"></a>Assembly and installation</h4>

<p>To create a distribution package from our tutorial project please run from the command line:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>mvn clean assembly:assembly
</pre>
</div></div>

<p>which should create a tutorial-config-&lt;version&gt;.zip file inside the projects target folder. If you unpack this archive you will get the structure like shown on the picture below:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/assembly-structure.png" align="absmiddle" border="0"></p>

<p>The lib folder contains the project jar file (tutorial-config-&lt;version&gt;.jar) as well as all required runtime dependencies. Startup scripts are located directly under the root folder. The content of the conf folder will be analyzed later. That is all you need to run the base application. So let's start the provided startup.bat/sh script (depending on the operating system you running it on). This will start two routes accepting the requests on the port 8800. As HTTP client we use the Eclipse HTTP Client. To prepare the reverse-route test open the Eclipse HTTP client and</p>

<ul>
	<li>Enter <a href="http://localhost:8800/reverse" rel="nofollow">http://localhost:8800/reverse</a> in the address field (top-left corner of the window)</li>
	<li>Select POST in the HTTP method field (top-right corner of the window)</li>
	<li>Enter some content of your choice in the Body field</li>
</ul>


<p>To submit the request, press the green arrow at the top of the window. As a response you should get the reversed content with the 200 http response code, like shown on the picture below. Additionally you should get the original message content saved in the target/output/default.txt file:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/reverse-response.png" align="absmiddle" border="0"></p>

<p>Now let's prepare the map-route test again using the Eclipse HTTP client. For this test please download a <a href="http://repo.openehealth.org/confluence/download/attachments/3866789/message.hl7?version=1">sample hl7 message</a> and:</p>
<ul>
	<li>Enter <a href="http://localhost:8800/map" rel="nofollow">http://localhost:8800/map</a> in the address field</li>
	<li>Select POST in the HTTP method field</li>
	<li>Copy the sample hl7 message content in the Body field</li>
</ul>


<p>Submit the request and as a response you should get the "map response ok!" with the 200 http response code. The original message content will be additionally saved in the target/output/default.txt file.</p>

<h3><a name="IPFreference-single-Extensionsdefinition"></a>Extensions definition</h3>

<p>Now here will be shown how we can extend/customize the functionalities of both routes with usage of the IPF extension mechanism. We will extend the reverse-route by adding an additional transmogrifier (htmlTransmogrifier) which transforms the content in html-format and saves it in the target/output/transmogrified-&lt;timestamp&gt;.html file. See the extension part on the EIP diagram below: </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/eip-reverse-extended.png" align="absmiddle" border="0"></p>

<p>This custom logic is written in a separate route builder (also extends the CustomRouteBuilder), see the code snippet below. This CustomInterceptor should intercept all incoming exchanges to the <em>file-save</em> direct endpoint and additionally process it with the <em>htmlTransmogrifier</em>. The <tt>CustomInterceptor.groovy</tt> can be found under conf/config folder of the unzipped assembly archive:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CustomInterceptor.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class CustomInterceptor <span class="code-keyword">extends</span> CustomRouteBuilder {

    void configure() {
        interceptFrom('direct:file-save')
            .transmogrify('htmlTransmogrifier')
            .setDestinationHeader()
            
        ...
   }
}
</pre>
</div></div>

<p>Note the <b>setDestinationHeader</b> DSL extension. It is defined in the custom DSL extension and its being activated by the IPF extension mechanism:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CustomModelExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class CustomModelExtension <span class="code-keyword">implements</span> Extension {
    
    <span class="code-keyword">static</span> extensions = {
        ProcessorDefinition.metaClass.setDestinationHeader = { -&gt;
            delegate.setHeader('destination') { exchange -&gt;
                <span class="code-quote">"transmogrified-${<span class="code-object">System</span>.currentTimeMillis()}.html"</span>
            }
        }
    }
}
</pre>
</div></div>

<p>The spring definition for these extensions you can found under conf/extension-context.xml. Here is the snippet of the CustomInterceptor,  HtmlTransmogrifier and CustomModelExtension bean definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extension-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;lang:groovy id=<span class="code-quote">"interceptorRoute"</span>
     script-source=<span class="code-quote">"classpath:config/CustomInterceptor.groovy"</span> &gt;
    <span class="code-tag">&lt;lang:property name=<span class="code-quote">"intercepted"</span> ref=<span class="code-quote">"baseRoute"</span> /&gt;</span>
  <span class="code-tag">&lt;/lang:groovy&gt;</span>

  &lt;lang:groovy id=<span class="code-quote">"htmlTransmogrifier"</span>
     script-source=<span class="code-quote">"classpath:config/HtmlTransmogrifier.groovy"</span> /&gt;

  &lt;lang:groovy id=<span class="code-quote">"customExtension"</span>
     script-source=<span class="code-quote">"classpath:config/CustomModelExtension.groovy"</span> /&gt;
...
</pre>
</div></div>

<p>Note the <b>intercepted</b> property of the <em>interceptorRoute</em> bean. It tells the IPF extension mechanism to inject this custom route builder in the existing <em>baseRoute</em> custom route builder. If you don't want to inject your custom route builder in any of existing route builders but only to add it to the existing CamelContext, you should not define this property at all.</p>

<p>If you want to test this functionality please run the scripts startup.bat/sh with additional parameter:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>startup.bat extension-context.xml
</pre>
</div></div>

<p>The <tt>org.openehealth.ipf.tutorials.config.base.Base</tt> class expects that first argument is the name of additional extensions spring context file and it tries to start this context along with the base-context.xml and extender-context.xml.<br>
Now if you run the same test for the reverse-route with the HTTP client:</p>

<ul>
	<li>Enter <a href="http://localhost:8800/reverse" rel="nofollow">http://localhost:8800/reverse</a> in the address field</li>
	<li>Select POST in the HTTP method field</li>
	<li>Enter some content of your choice in the Body field</li>
</ul>


<p>After submitting the request you should get the reversed content with the 200 http response code, and additionally the original message content saved in the target/output/transmogrified-&lt;timestamp&gt;.html file similar to the screenshot below:</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/html-output.png" align="absmiddle" border="0"></p>

<p>Next we will extend the mapping-route by adding a custom mapping and a custom transmogrifier which uses this mapping definition to transform the incoming HL7v2 message. Also it will be defined a custom exception handler which handles the exceptions of the type <tt>ca.uhn.hl7v2.HL7Exception.class</tt>. The exception handler customizes the response to the client (response 400) and saves the exception message to the targer/hl7-error/error-&lt;timestamp&gt;.txt file. See the extension parts on the EIP diagram below: </p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/eip-map-extended.png" align="absmiddle" border="0"></p>

<p>The <tt>CustomInterceptor.groovy</tt> intercepts all incoming exchanges to the <em>map</em> direct endpoint and additionally processes it with the "genderTransmogrifier". The <tt>CustomInterceptor.groovy</tt> can be found under conf/config folder of the unzipped assembly archive:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CustomInterceptor.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class CustomInterceptor <span class="code-keyword">extends</span> CustomRouteBuilder {

    void configure() {
        ...
        interceptFrom('direct:map')
            .transmogrify('genderTransmogrifier')
    }
}
</pre>
</div></div>

<p>The "genderTransmogrifier" makes use of custom mapping definition (<b>mapGender</b>) to make the transformation.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>GenderTransmogrifier.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class GenderTransmogrifier <span class="code-keyword">implements</span> Transmogrifier {

    <span class="code-object">Object</span> zap(<span class="code-object">Object</span> msg, <span class="code-object">Object</span>... params) {
        msg.PID[8] = msg.PID[8].mapGender()
        msg
    }
}
</pre>
</div></div>

<p>Custom mapping is defined in separate mapping definition file under conf/gender.map:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>gender.map</b></div><div class="codeContent panelContent">
<pre class="code-java">mappings = {
    gender(
        F      : 'W',
        (ELSE) : { it }
    )         
}
</pre>
</div></div>

<p>In extension-context.xml you can found the bean definitions for these extensions as well. Here is the snippet of the "customInterceptor", "genderTransmogrifier" and "customMappings" bean definition:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extension-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;lang:groovy id=<span class="code-quote">"interceptorRoute"</span>
     script-source=<span class="code-quote">"classpath:config/CustomInterceptor.groovy"</span> &gt;
    <span class="code-tag">&lt;lang:property name=<span class="code-quote">"intercepted"</span> ref=<span class="code-quote">"baseRoute"</span> /&gt;</span>
  <span class="code-tag">&lt;/lang:groovy&gt;</span>

  &lt;lang:groovy id=<span class="code-quote">"genderTransmogrifier"</span>
     script-source=<span class="code-quote">"classpath:config/GenderTransmogrifier.groovy"</span> /&gt;

  &lt;bean id=<span class="code-quote">"genderMapping"</span> 
        class=<span class="code-quote">"org.openehealth.ipf.commons.map.config.CustomMappings"</span>&gt;
      <span class="code-tag">&lt;property name=<span class="code-quote">"mappingScript"</span> value=<span class="code-quote">"classpath:config/gender.map"</span> /&gt;</span>
  <span class="code-tag">&lt;/bean&gt;</span>
...
</pre>
</div></div>

<p>You may have noticed when you run the base application, that if you tried to send some not-hl7v2 content to the "http://localhost:8800/map" endpoint, you would get an 500 http response code with the complete exception trace as a response content. Let's try to customize this behavior by adding the custom exception handler for the very specific <tt>ca.uhn.hl7v2.HL7Exception.class</tt> exception type, and do some custom handling when such exception occurs. We have defined this exception handler in a separate route builder <tt>CustomExceptionHandler.groovy</tt> which also extends the CustomRouteBuilder:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>CustomExceptionHandler.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java">class CustomExceptionHandler <span class="code-keyword">extends</span> CustomRouteBuilder {

    void configure() {
        onException(ca.uhn.hl7v2.HL7Exception.class)
          .maximumRedeliveries(0)
          .handled(<span class="code-keyword">true</span>)
          .transform()
          .exceptionMessage()
          .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400))
          .end()
          .setHeader(Exchange.FILE_NAME) { exhg -&gt;
              <span class="code-quote">"error-${<span class="code-object">System</span>.currentTimeMillis()}.txt"</span>
           }
          .to('file:target/hl7-error')
    }
}
</pre>
</div></div>

<p>Details about exception handling in Camel can be found <a href="http://camel.apache.org/exception-clause.html" rel="nofollow">here</a>. What we did here basically is extracted the exception message from the exchange and returned it back to the client with the 400 http response code. Additionally the exception message content will be saved in the /target/hl7-error/error-&lt;timestamp&gt;.txt file.</p>

<p>Notice the bean definition for this exception handler is similar to the "customInterceptor" bean. This bean also defines the <b>intercepted</b> property which means it will be also injected in the "baseRoute":</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>extension-context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">...
  &lt;lang:groovy id=<span class="code-quote">"exceptionHandler"</span>
     script-source=<span class="code-quote">"classpath:config/CustomExceptionHandler.groovy"</span> &gt;
    <span class="code-tag">&lt;lang:property name=<span class="code-quote">"intercepted"</span> ref=<span class="code-quote">"baseRoute"</span> /&gt;</span>
  <span class="code-tag">&lt;/lang:groovy&gt;</span>
...
</pre>
</div></div>

<p>Now let's prepare the map-route test again using the Eclipse HTTP client. We will use the same sample hl7 message we used in the first test for this route:</p>

<ul>
	<li>Enter <a href="http://localhost:8800/map" rel="nofollow">http://localhost:8800/map</a> in the address field</li>
	<li>Select POST in the HTTP method field</li>
	<li>Copy the sample hl7 message content in the Body field</li>
</ul>


<p>Submit the request and as a response you should get the "map response ok!" with the 200 http response code. Message content transformed over the genderTransmogrifier will be additionally saved in the target/output/transmogrified-&lt;timestamp&gt;.html file. Note that the transformation was successful if you have in the message on the position marked at the screenshot the value of "<b>W</b>":</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/html-map-output.png" align="absmiddle" border="0"></p>

<p>Let's try to send to the same http endpoint some not-hl7v2 content which should trigger the HL7Exception on the processor which tries to parse this content (unmarshal.ghl7). You should get this exception message as response content together with the 400 http response code. The exception message should be also saved in a target/hl7-error/error-&lt;timestamp&gt;.txt file.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/map-error-response.png" align="absmiddle" border="0"></p>
<h1><a name="IPFreference-single-AppendixCIPFGuidelines"></a>Appendix C - IPF Guidelines</h1>

<h2><a name="IPFreference-single-DSLextensionsguide"></a>DSL extensions guide</h2>

<p>This section gives some guidance how to write DSL extensions for IPF. As an example we introduce a new DSL element <tt>translate</tt> for translating the in-message body from one language into another language and write the result to the out-message body. To keep the example focused, we won't discuss the actual logic for doing the translation, instead we'll focus only on the DSL part of this example. We start with the simplest case and continue to evolve the example by adding new requirements.</p>

<h3><a name="IPFreference-single-Processorwithcustomname"></a>Processor with custom name</h3>

<p>This is the simplest case for defining a DSL extension. Let's say we have a custom processor which translates the in-message body into a language that matches the system's default locale.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Translator.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example;

<span class="code-keyword">import</span> org.apache.camel.Exchange;
<span class="code-keyword">import</span> org.apache.camel.Processor;
<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.core.util.Exchanges;

<span class="code-keyword">public</span> class Translator <span class="code-keyword">implements</span> Processor {

    <span class="code-keyword">public</span> void process(Exchange exchange) <span class="code-keyword">throws</span> Exception {
        <span class="code-object">String</span> input = exchange.getIn().getBody(<span class="code-object">String</span>.class);
        <span class="code-object">String</span> output = ... <span class="code-comment">// translate from input using <span class="code-keyword">default</span> locale
</span>        Exchanges.resultMessage(exchange).setBody(output);
    }

}
</pre>
</div></div>

<p>The result is written in an exchange-pattern-sensitive manner using the <tt>Exchanges.resultMessage()</tt> method. Without defining a custom DSL element we can already use this processor in route definitions with the <tt>process</tt> DSL element.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('direct:input')
        .process(<span class="code-keyword">new</span> Translator())
        .to('direct:output')
        
    }
    
}
</pre>
</div></div>

<p>What we want to achieve is to make the DSL more expressive by introducing a <tt>translate</tt> DSL element. The result should look like</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('direct:input')
        .translate()
        .to('direct:output')
        
    }
    
}
</pre>
</div></div>

<p>Apache Camel doesn't allow us to modify the classes that define the DSL (these are called <b>model classes</b>). To be more precise we cannot modify existing Camel model classes using Java (without hacking the Camel code itself). We therefore use <a href="http://groovy.codehaus.org/Dynamic+Groovy" rel="nofollow">Groovy meta-programming</a> for introducting new methods to these model classes. To introduce the <tt>translate</tt> extension we have to define a <tt>translate()</tt> method on the class that matches the return type of the <tt>from()</tt> method. In our case this is <tt>org.apache.camel.model.ProcessorDefinition</tt> (<tt>from()</tt> actually returns a type that extends <tt>ProcessorDefinition</tt> but this is not relevant for our example). Here's the extension definition</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.model.ProcessorDefinition

class MyExtension {

    <span class="code-keyword">static</span> extensions = {
        
        ProcessorDefinition.metaClass.translate = {-&gt;
            delegate.process(<span class="code-keyword">new</span> Translator())
        }
        
    }
    
}
</pre>
</div></div>

<p>The <tt>translate</tt> extension is added to the <tt>ProcessorDefinition</tt> meta-class using a closure that implements this extension. The <tt>delegate</tt> variable is the object on which we call the <tt>translate()</tt> method. In our case this is the object returned from the <tt>from('direct:input')</tt> method call. The <tt>process(new Translator())</tt> call is now made by the extension definition instead of made directly in the route definition. To activate this extension we use the following beans in our application context.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>context.xml</b></div><div class="codeContent panelContent">
<pre class="code-xml">&lt;beans xmlns=<span class="code-quote">"http://www.springframework.org/schema/beans"</span>
       <span class="code-keyword">xmlns:xsi</span>=<span class="code-quote">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="code-keyword">xmlns:camel</span>=<span class="code-quote">"http://camel.apache.org/schema/spring"</span>
       xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd"&gt;

    <span class="code-tag">&lt;camel:camelContext id=<span class="code-quote">"camelContext"</span>&gt;</span>
        <span class="code-tag">&lt;camel:routeBuilder ref=<span class="code-quote">"routeBuilder"</span>/&gt;</span>
    <span class="code-tag">&lt;/camel:camelContext&gt;</span>

    &lt;bean id=<span class="code-quote">"routeBuilder"</span> depends-on=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"example.MyRouteBuilder"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"myExtension"</span> 
        class=<span class="code-quote">"example.MyExtension"</span>&gt;
    <span class="code-tag">&lt;/bean&gt;</span>

    &lt;bean id=<span class="code-quote">"routeModelExtender"</span>
        class=<span class="code-quote">"org.openehealth.ipf.platform.camel.core.extend.DefaultModelExtender"</span>&gt;
        <span class="code-tag">&lt;property name=<span class="code-quote">"routeModelExtensions"</span>&gt;</span>
            <span class="code-tag">&lt;list&gt;</span>
                <span class="code-tag">&lt;ref bean=<span class="code-quote">"myExtension"</span> /&gt;</span>
            <span class="code-tag">&lt;/list&gt;</span>
        <span class="code-tag">&lt;/property&gt;</span>
    <span class="code-tag">&lt;/bean&gt;</span>

<span class="code-tag">&lt;/beans&gt;</span>
</pre>
</div></div>

<p>The <tt>routeBuilder</tt> bean is configured to depend on the <tt>routeModelExtender</tt>. This ensures that the extension is activated before the route builder is used.</p>

<div class="panelMacro"><table class="tipMacro"><colgroup><col width="24"><col></colgroup><tbody><tr><td valign="top"><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/check.gif" width="16" height="16" align="absmiddle" alt="" border="0"></td><td><b>Extensions and OSGi</b><br><p>For activating extensions inside an OSGi environment refer to the <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support#OSGisupport-Extenderbundles">extender bundles</a> section from the <a href="http://repo.openehealth.org/confluence/display/ipf2/OSGi+support" title="OSGi support">OSGi support section</a>.</p></td></tr></tbody></table></div>

<h3><a name="IPFreference-single-DSLextensionsusingamodelclass"></a>DSL extensions using a model class</h3>

<p>In the previous section we wrote a DSL extension without defining a model class. There are some cases where it becomes necessary to use a model class e.g. if you want to lookup beans from the application context. Let's say we want to configure our translation processor with a custom dictionary that is defined as bean in the Spring application context. We also want to pass that bean name as argument to the DSL extension.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('direct:input')
        .translate('myCustomDictionary')
        .to('direct:output')
        
    }
    
}
</pre>
</div></div>

<p>Here, we want our DSL extension to look up the bean from the application context. We could inject an object doing a context-specific bean-lookup into our extension definition but this is highly discouraged because it causes problems (not only) in OSGi environments. The proper way is to use a separate model class for the <tt>translate</tt> DSL extension.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>TranslatorDefinition.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example;

<span class="code-keyword">import</span> java.util.Map;

<span class="code-keyword">import</span> org.apache.camel.Processor;
<span class="code-keyword">import</span> org.apache.camel.model.OutputDefinition;
<span class="code-keyword">import</span> org.apache.camel.spi.RouteContext;

<span class="code-keyword">public</span> class TranslatorDefinition <span class="code-keyword">extends</span> OutputDefinition&lt;TranslatorDefinition&gt; {

    <span class="code-keyword">private</span> <span class="code-object">String</span> dictionaryBeanName;
    
    <span class="code-keyword">public</span> TranslatorDefinition() {
        <span class="code-keyword">this</span>(<span class="code-keyword">null</span>);
    }
    
    <span class="code-keyword">public</span> TranslatorDefinition(<span class="code-object">String</span> dictionaryBeanName) {
        <span class="code-keyword">this</span>.dictionaryBeanName = dictionaryBeanName;
    }
    
    @Override
    <span class="code-keyword">public</span> Processor createProcessor(RouteContext routeContext) <span class="code-keyword">throws</span> Exception {
        <span class="code-keyword">if</span> (dictionaryBeanName != <span class="code-keyword">null</span>) {
            <span class="code-keyword">return</span> <span class="code-keyword">new</span> Translator(routeContext.lookup(dictionaryBeanName, Map.class));
        } <span class="code-keyword">else</span> {
            <span class="code-keyword">return</span> <span class="code-keyword">new</span> Translator();
        }
    }
    
}
</pre>
</div></div>

<p>We extend Camel's <tt>org.apache.camel.model.OutputDefinition</tt> class to define our own custom model class and override its <tt>createProcessor(RouteContext)</tt> method. Instead of creating the processor in the DSL extension definition directly we create the processor in that method. Camel passes the current route context as argument from which we can lookup beans in the Spring application context. The name of the dictionary bean to lookup is stored in the <tt>dictionaryBeanName</tt> instance variable. For this code to work we need to add an additional constructor to our <tt>Translator</tt> class.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Translator.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example;

<span class="code-keyword">import</span> java.util.Map;

<span class="code-keyword">import</span> org.apache.camel.Exchange;
<span class="code-keyword">import</span> org.apache.camel.Processor;
<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.core.util.Exchanges;

<span class="code-keyword">public</span> class Translator <span class="code-keyword">implements</span> Processor {

    <span class="code-keyword">private</span> Map dictionary;
    
    <span class="code-keyword">public</span> Translator() {
        <span class="code-keyword">this</span>(<span class="code-keyword">null</span>);
    }

    <span class="code-keyword">public</span> Translator(Map dictionary) {
        <span class="code-keyword">this</span>.dictionary = dictionary;
    }

    <span class="code-keyword">public</span> void process(Exchange exchange) <span class="code-keyword">throws</span> Exception {
        <span class="code-object">String</span> input = exchange.getIn().getBody(<span class="code-object">String</span>.class);
        <span class="code-object">String</span> output = ... <span class="code-comment">// translate from input using <span class="code-keyword">default</span> locale and custom dictionary
</span>        Exchanges.resultMessage(exchange).setBody(output);
    }

}
</pre>
</div></div>

<p>Finally, we use this model class in our extension definition.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.model.ProcessorDefinition

class MyExtension {

    <span class="code-keyword">static</span> extensions = {
        
        ProcessorDefinition.metaClass.translate = {-&gt;
            delegate.addOutput(<span class="code-keyword">new</span> TranslatorDefinition())
            <span class="code-keyword">return</span> delegate
        }
        
        ProcessorDefinition.metaClass.translate = {<span class="code-object">String</span> dictionaryBeanName -&gt;
            delegate.addOutput(<span class="code-keyword">new</span> TranslatorDefinition(dictionaryBeanName))
            <span class="code-keyword">return</span> delegate
        }
    
    }
    
}
</pre>
</div></div>

<p>We define two <tt>translate</tt> extensions here. One without parameters and another one with a <tt>String</tt> parameter for the dictionary bean name. Our custom model class instance is added as <em>output</em> to the object on which the <tt>translate</tt> method is called i.e. the <tt>delegate</tt>. The delegate is then returned by the extension definition. The configuration of the route builder and the extension class in the Spring application context remains the same except that we additionally need to define a <tt>myCustomDictionary</tt> bean to make the above example route work.</p>

<h3><a name="IPFreference-single-ParameterizedDSLextensions"></a>Parameterized DSL extensions</h3>

<p>In the previous section we've seen how to configure our translator with a custom dictionary. We've done this by passing the dictionary bean name as argument to the <tt>translate</tt> method. To make the DSL even more readable we'd like to have something like this.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyRouteBuilder.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.spring.SpringRouteBuilder

class MyRouteBuilder <span class="code-keyword">extends</span> SpringRouteBuilder {

    void configure() {
        from('direct:input')
        .translate().withDictionary('myCustomDictionary')
        .to('direct:output')
        
    }
    
}
</pre>
</div></div>

<p>Here we introduced a <tt>withDictionary</tt> <em>parameter</em> to the <tt>translate</tt> extension that takes the dictionary bean name as argument (although it is technically a method we call it a parameter because it is only valid in context of the <tt>translate</tt> DSL extension). For implementing this we need to make some changes to the classes we've implemented so far. First, we have to add a <tt>withDictionary(String)</tt> method to our model class. This method replaces the constructor with the <tt>String</tt> parameter from the previous section. </p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>TranslatorDefinition.java</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example;

<span class="code-keyword">import</span> java.util.Map;

<span class="code-keyword">import</span> org.apache.camel.Processor;
<span class="code-keyword">import</span> org.apache.camel.spi.RouteContext;
<span class="code-keyword">import</span> org.openehealth.ipf.platform.camel.core.model.DelegateDefinition;

<span class="code-keyword">public</span> class TranslatorDefinition <span class="code-keyword">extends</span> DelegateDefinition {

    <span class="code-keyword">private</span> <span class="code-object">String</span> dictionaryBeanName;
    
    <span class="code-keyword">public</span> TranslatorDefinition withDictionary(<span class="code-object">String</span> dictionaryBeanName) {
        <span class="code-keyword">this</span>.dictionaryBeanName = dictionaryBeanName;
        <span class="code-keyword">return</span> <span class="code-keyword">this</span>;
    }
    
    @Override
    <span class="code-keyword">protected</span> Processor doCreateDelegate(RouteContext routeContext) {
        Translator translator = <span class="code-keyword">null</span>;
        <span class="code-keyword">if</span> (dictionaryBeanName != <span class="code-keyword">null</span>) {
            translator = <span class="code-keyword">new</span> Translator(routeContext.lookup(dictionaryBeanName, Map.class));
        } <span class="code-keyword">else</span> {
            translator = <span class="code-keyword">new</span> Translator();
        }
        <span class="code-keyword">return</span> translator;
    }

}
</pre>
</div></div>

<p>The <tt>withDictionary</tt> parameter is specific to our <tt>translate</tt> DSL extension i.e. you can only use it after calling <tt>translate()</tt> in a route definition. The return value is of type <tt>TranslatorDefinition</tt>. If you need further parameterization of the <tt>translate</tt> DSL extension you can do so by adding further methods to the <tt>TranslatorDefinition</tt> class. We also need to change the base class to <tt>org.openehealth.ipf.platform.camel.core.model.DelegateDefinition</tt> and implement the abstract <tt>doCreateDelegate(RouteContext)</tt> method instead of <tt>createProcessor(RouteContext)</tt>. This is needed if we want to reuse our <tt>Translator</tt> implementation, otherwise, we would have to provide an <tt>org.apache.camel.processor.DelegateProcessor</tt> implementation. The next step is to change our extension definition.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>MyExtension.groovy</b></div><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">package</span> example

<span class="code-keyword">import</span> org.apache.camel.model.ProcessorDefinition

class MyExtension {

    <span class="code-keyword">static</span> extensions = {
        
        ProcessorDefinition.metaClass.translate = {-&gt;
            TranslatorDefinition result = <span class="code-keyword">new</span> TranslatorDefinition()
            delegate.addOutput(result)
            <span class="code-keyword">return</span> result
        }
        
        ProcessorDefinition.metaClass.translate = {<span class="code-object">String</span> dictionaryBeanName -&gt;
            TranslatorDefinition result = <span class="code-keyword">new</span> TranslatorDefinition(dictionaryBeanName)
            delegate.addOutput(result)
            <span class="code-keyword">return</span> result
        }
    
    }
    
}
</pre>
</div></div>

<p>The important difference is that the return type of our extension definition is our custom <tt>TranslatorDefinition</tt>. If we'd return the <tt>delegate</tt> we would get an error when we try to invoke the <tt>withDictionary()</tt> method after the <tt>translate()</tt> method. </p>
<h1><a name="IPFreference-single-AppendixDIPFcontext"></a>Appendix D - IPF context</h1>

<p>The Open eHealth Framework is an endavour of the Open eHealth Foundation to ease and support the development of both messaging-oriented integration solutions and data-centric web applications in the healthcare domain. Data-centric web-applications are developed on top of the Open eHealth Application Platform whereas messaging-oriented integration solutions are developed on top of the <a href="http://repo.openehealth.org/confluence/display/ipf2/Home" title="Home">Open eHealth Integration Platform</a>. In context of the Open eHealth Foundation the Open eHealth Framework will be mainly used to provide open-source implementations of <a href="http://www.ihe.net/" rel="nofollow">IHE</a> profiles and actors. However, the Open eHealth Framework is not limited to the <a href="http://www.ihe.net/" rel="nofollow">IHE</a> domain and may be also used as a general-purpose framework for the development of distributed or standalone enterprise applications.</p>

<h2><a name="IPFreference-single-IHE"></a>IHE</h2>

<p>This section outlines how Open eHealth Framework applications relate to IHE profiles. Core concepts of IHE profiles are:</p>
<table class="confluenceTable"><tbody>
<tr>
<th class="confluenceTh"> Concept </th>
<th class="confluenceTh"> IHE Definition (Technical Framework, Volume 1) </th>
<th class="confluenceTh"> Description </th>
<th class="confluenceTh"> Example </th>
</tr>
<tr>
<td class="confluenceTd"> Actor </td>
<td class="confluenceTd"> Actors are information systems or components of information systems that produce, manage, or act on categories of information required by operational activities in the enterprise.</td>
<td class="confluenceTd"> An application role in a distributed system. </td>
<td class="confluenceTd"> <em>Patient identity cross-reference manager</em> aka <em>PIX manager</em>. </td>
</tr>
<tr>
<td class="confluenceTd"> Transaction </td>
<td class="confluenceTd"> Transactions are interactions between actors that communicate the required information through standards-based messages.</td>
<td class="confluenceTd"> A message exchange between actors. </td>
<td class="confluenceTd"> <em>Patient identitiy feed</em> between the <em>patient identity source</em> and the <em>PIX manager</em> </td>
</tr>
<tr>
<td class="confluenceTd"> Profile </td>
<td class="confluenceTd"> Each integration profile is a representation of a real-world capability that is supported by a set of actors that interact through transactions. </td>
<td class="confluenceTd">A set of actors and transactions. </td>
<td class="confluenceTd"> <em>PIX profile</em> </td>
</tr>
</tbody></table>
<p>The Open eHealth Framework is a development framework with special support for the implementation of IHE concepts (i.e. profiles). This is illustrated with the abstract IHE profile in Figure 1. The profile defines three actors and two transactions. Transaction 1 is between actor 1 and actor 2 whereas transaction 2 is between actor 1 and actor 3.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/ihe-1.JPG" align="absmiddle" border="0"></p>

<p>Figure 1: Abstract IHE profile</p>

<p>IHE actors are usually represented by a single application or application component i.e. the actor - component relationship is 1:1 (IHE actor - component relationships may also be 1:n or n:1). Hospital information systems often play the role of IHE actors. If you plan to develop an IHE actor from scratch the Open eHealth Application Platform is the development framework recommended by the Open eHealth Foundation.</p>

<p>Usually custom developed clinical information systems expose interfaces that are not aligned to IHE profiles. In order to play the role of an IHE actor in IHE transactions these interfaces must be translated to IHE-compliant interfaces. Here's where the <a href="http://repo.openehealth.org/confluence/display/ipf2/Home" title="Home">Open eHealth Integration Platform</a> comes into play. Integration components, developed on top of the Open eHealth Integration Platform, translate internal proprietary actor interfaces to external IHE-compliant interfaces. In addition to interface translations, integration components may also coordinate the message exchanges between other actors (e.g. using a process engine). Other integration components may also implement IHE cross-cutting concerns e.g. logging relevant message exchanges (transactions) between IHE actors to a central logging server (see IHE ATNA).</p>

<h3><a name="IPFreference-single-Deploymentoptions"></a>Deployment options</h3>

<p>Figure 2 gives an overview of the most relevant deployment options of application and integration components. In this overview actor implementations always run in separate processes whereas the deployment of integration components vary:</p>
<ul>
	<li><em>Embedded deplyoment</em>: Integration components run within the same process as actor implementations</li>
	<li><em>Standalone deployment</em>: Integration components run on a single standalone integration hub (EAI style)</li>
	<li><em>Federated deployment</em>: Integration components run on a distributed/federeted integration platform (ESB style)</li>
</ul>


<p>Deployment options can of course be combined for IHE profile implementations. The <a href="http://repo.openehealth.org/confluence/display/ipf2/Home" title="Home">Open eHealth Integration Platform</a> supports all of the above deployment options.</p>

<p><img src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/ihe-2.JPG" align="absmiddle" border="0"></p>

<p>Figure 2: IHE Profile deployment options</p>
<h1><a name="IPFreference-single-AppendixEKnowncamelissues"></a>Appendix E - Known camel issues</h1>

<h1><a name="IPFreference-single-AppendixFDSLextensionsindex"></a>Appendix F - DSL extensions index</h1>

<p>This section summarizes all DSL extensions contributed by IPF components. These extensions are used with the <a href="http://repo.openehealth.org/confluence/display/ipf2/Core+features#Corefeatures-Scriptinglayer">IPF scripting layer</a>.</p>

<ul>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2-m1/dslIndex.html" rel="nofollow">DSL extensions in IPF 2.2-m1</a></li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2-m2/dslIndex.html" rel="nofollow">DSL extensions in IPF 2.2-m2</a></li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2-rc1/dslIndex.html" rel="nofollow">DSL extensions in IPF 2.2-rc1</a></li>
	<li><a href="http://repo.openehealth.org/sites/ipf/reports/ipf-2.2.0/dslIndex.html" rel="nofollow">DSL extensions in IPF 2.2.0</a></li>
</ul>
        </div>

        <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dc="http://purl.org/dc/elements/1.1/"
         xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
         <rdf:Description
    rdf:about="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single"
    dc:identifier="http://repo.openehealth.org/confluence/display/ipf2/IPF+reference+-+single"
    dc:title="IPF reference - single"
    trackback:ping="http://repo.openehealth.org/confluence/rpc/trackback/3211298"/>
</rdf:RDF>
-->

            
    
    
    
    
    


<fieldset class="hidden parameters">
    <legend>Labels parameters</legend>
    <input type="hidden" id="editLabel" value="Edit">
    <input type="hidden" id="addLabel" value="Add Labels">
    <input type="hidden" id="domainName" value="http://repo.openehealth.org/confluence">
    <input type="hidden" id="pageId" value="3211298">
    <input type="hidden" id="spaceKey" value="ipf2">
</fieldset>

<div id="labels-section" class="pageSection">
    <div id="default-labels-header" class="section-header">
        <h2 id="labels-section-title" class="section-title  hidden ">Labels</h2>
            </div>

    <div class="labels-editor">
        <div id="labelsList">
                    </div>

        <span class="errorMessage error" id="errorSpan"></span>
        <form method="GET" action="" id="add-labels-form">
            <div id="labelInputSpan" class="labels-input">
                <div id="labelOperationErrorContainer" class="hidden">
                    <span class="error"><span class="errorMessage" id="labelOperationErrorMessage"></span></span>
                </div>

                <div class="caption">Enter labels to add to this page:</div>

                <input autocomplete="off" id="labelsString" name="labelsString" value="" size="40">
                <input type="submit" class="add-labels" value="Add">
                <input type="submit" class="hide-labels-editor" value="Done">
                <div id="waitImageAndStatus">
                    <img class="waiting" alt="Please wait" src="./IPF reference - single - Open eHealth Integration Platform 2.x - Confluence_files/wait.gif">&nbsp;
                    <span id="labelOperationStatus" class="smalltext"></span>
                </div>
                <div class="auto_complete" id="labelsAutocompleteList" style="display: none; "></div>
                <div class="labels-tip">
                    <div id="suggestedLabelsSpan"></div>
                    Looking for a label? Just start typing.
                </div>
            </div>
        </form>
    </div>
</div>

            
            

<!--
    Root decorator: this is a layer of abstraction that Confluence doesn't need. It will be removed eventually.
-->




    
        
    
    
    


<fieldset class="parameters hidden">
    <input type="hidden" id="deleteCommentConfirmMessage" value="Are you sure you want to remove the comment?">
    <input type="hidden" id="collapseTooltip" value="Click to toggle the display of this comment.">
</fieldset>





<div id="comments-section" class="pageSection">
    
    
    
    
                                    </div>



            
</div>
    <br class="clear">
</div><div style="display: none; " id="__su__events">SETHEIGHT:32px</div><iframe id="suoverlay_48887987" style="z-index: 20000000; position: fixed; left: 0px; top: 0px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; overflow-x: hidden; overflow-y: hidden; width: 0px; height: 0px; " src="chrome-extension://kcahibnffhnnjcedflmchmokndkjnhpg/norefer.html?url=http%3A%2F%2Fwww.stumbleupon.com%2Ftoolbar%2Foverlay.php%3F20110228%23overlayid%253D48887987%2526openerid%253D45044311"></iframe><iframe id="suoverlay_52361191" style="z-index: 20000000; position: fixed; left: 0px; top: 0px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; overflow-x: hidden; overflow-y: hidden; width: 0px; height: 0px; " src="chrome-extension://kcahibnffhnnjcedflmchmokndkjnhpg/norefer.html?url=http%3A%2F%2Fwww.stumbleupon.com%2Ftoolbar%2Foverlay.php%3F20110228%23overlayid%253D52361191%2526openerid%253D45044311"></iframe><iframe id="suoverlay_44183646" style="z-index: 20000000; position: fixed; left: 0px; top: 0px; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; overflow-x: hidden; overflow-y: hidden; width: 0px; height: 0px; " src="chrome-extension://kcahibnffhnnjcedflmchmokndkjnhpg/norefer.html?url=http%3A%2F%2Fwww.stumbleupon.com%2Ftoolbar%2Foverlay.php%3F20110228%23overlayid%253D44183646%2526openerid%253D45044311"></iframe>


<div id="footer">
                                        <p class="license license-opensource">
                  Powered by a free <b>Atlassian Confluence Open Source Project License</b> granted to Open eHealth Foundation. <a href="http://www.atlassian.com/c/conf/11461">Evaluate Confluence today</a>.<br>
                </p>
                            <ul id="poweredby">
        <li class="noprint">Powered by <a href="http://www.atlassian.com/software/confluence" class="smalltext">Atlassian Confluence</a> 2.10, the <a href="http://www.atlassian.com/software/confluence" class="smalltext">Enterprise Wiki</a>.</li>
        <li class="print-only">Printed by Atlassian Confluence 2.10, the Enterprise Wiki.</li>
        <li class="noprint"><a href="http://jira.atlassian.com/secure/BrowseProject.jspa?id=10470" class="smalltext">Bug/feature request</a> –</li>
        <li class="noprint"><a href="http://www.atlassian.com/about/connected.jsp?s_kwcid=Confluence-stayintouch" class="smalltext">Atlassian news</a> –</li>
        <li class="noprint"><a href="http://repo.openehealth.org/confluence/administrators.action">Contact administrators</a></li>
    </ul>
</div>




</body><script type="text/javascript" id="__su__scriptcont">var suclient_framesrc = 'chrome-extension://kcahibnffhnnjcedflmchmokndkjnhpg/norefer.html?url=http%3A%2F%2Fwww.stumbleupon.com%2Ftoolbar%2Flitebar.php%3Fdevice%3Dchromebar%26version%3Dchromebar%25202.9.8.1%26ts%3D1299315588';
var suclient = {
	frameId: "__su__tbcont",
	scriptId: "__su__scriptcont",
	eventsId: "__su__events",
	eventName: "__su__message",
	
	createToolbar: function() {
		var firstChild = document.body.firstChild;
		var frame = document.getElementById(this.frameId);
		if(!frame)
		{
			document.body.style.position = "relative";
			document.body.style.top = "0px";
			document.body.style.marginTop = '33px';
			frame = document.createElement("iframe");
			frame.setAttribute("src", suclient_framesrc);
			frame.setAttribute('id', this.frameId);
			frame.setAttribute('width','100%');
			frame.style.height = "0px";
			frame.style.border = "none";
			frame.style.position = "fixed";
			frame.style.top = "0px";
			frame.style.left = "0px";
			frame.style.marginBottom = "0px";
			frame.style.marginLeft = "0px";
			frame.style.zIndex = "10000000";
			frame.style.background = 'url(http://cdn.stumble-upon.com/i/toolbar/bgToolbar.gif)';
			frame.style.backgroundColor = '#444444';
			frame.style.height = '0px';
			frame.style.width  = '100%';
			document.body.insertBefore(frame, firstChild);
			
			// Create the node for getting events from the extension
			var div = document.createElement("div");
			div.style.display = "none";
			div.setAttribute("id", this.eventsId);
			document.body.appendChild(div);

			// Listen for events on that element.
			div.addEventListener(this.eventName, function(event) { suclient.onMessageEvent(event); });
		}
	},
	
	onMessageEvent: function() {
		var msg = document.getElementById(this.eventsId).innerHTML;
		var parts = msg.split(":");
		switch(parts[0])
		{
		case "SETHEIGHT":
			this.setHeight(parts[1]);
			break;
		case "DESTROY":
			this.destroyToolbar();
			break;
		}
	},
	
	setHeight: function(newHeight) {
		var frame = document.getElementById(this.frameId);
		frame.style.height = newHeight;
		document.body.style.marginTop = newHeight;
	},
	
	destroyToolbar: function(event) {
		// Remove the frame, remove our listeners, remove the event element, restore the body,
		// and then remove this script element and the suclient code.
		// Remove the frame
		var frame = document.getElementById(this.frameId);
		document.body.removeChild(frame);
		// Remove the event communication element
		var div = document.getElementById(this.eventsId);
		document.body.removeChild(div);
		// Restore the body
		document.body.style.marginTop = "0px";
		// Remove this script node and the last reference to it
		var myNode = document.getElementById(this.scriptId);
		document.body.removeChild(myNode);
		suclient = null;
	}
}

// We create it when we are first injected
suclient.createToolbar();


</script></html>